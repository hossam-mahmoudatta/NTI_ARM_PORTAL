
TESTER_SHERBINY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b64  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  08000c94  08000c94  00010c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c98  08000c98  00010ca0  2**0
                  CONTENTS
  4 .ARM          00000000  08000c98  08000c98  00010ca0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c98  08000ca0  00010ca0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c98  08000c98  00010c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c9c  08000c9c  00010c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ca0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000000  08000ca0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08000ca0  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010ca0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010cc9  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001118  00000000  00000000  00010d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000008b9  00000000  00000000  00011e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000248  00000000  00000000  000126e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000192  00000000  00000000  00012928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000179c  00000000  00000000  00012aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000143b  00000000  00000000  00014256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000055a2  00000000  00000000  00015691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000006a0  00000000  00000000  0001ac34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0001b2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c7c 	.word	0x08000c7c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000c7c 	.word	0x08000c7c

08000170 <_delay_ms>:
#include"SYSTICK_INTERFACE.h"

#include"DELAY_INTERFACE.h"


void _delay_ms( u32 Copy_u32Time ){
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]

	MSTK_VidInit();
 8000178:	f000 fa0a 	bl	8000590 <MSTK_VidInit>
	/* Disable INT */
	MSTK_VidINTStatus( MSTK_INT_DIS );
 800017c:	2000      	movs	r0, #0
 800017e:	f000 fa2b 	bl	80005d8 <MSTK_VidINTStatus>
	MSTK_VidStart( Copy_u32Time * 1000 );
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000188:	fb02 f303 	mul.w	r3, r2, r3
 800018c:	4618      	mov	r0, r3
 800018e:	f000 fa0b 	bl	80005a8 <MSTK_VidStart>
	/* Wiat Flag Polling */
	while( MSTK_u8ReadFlag() == 0 );
 8000192:	bf00      	nop
 8000194:	f000 fa3a 	bl	800060c <MSTK_u8ReadFlag>
 8000198:	4603      	mov	r3, r0
 800019a:	2b00      	cmp	r3, #0
 800019c:	d0fa      	beq.n	8000194 <_delay_ms+0x24>

}
 800019e:	bf00      	nop
 80001a0:	bf00      	nop
 80001a2:	3708      	adds	r7, #8
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}

080001a8 <_delay_us>:


/* Suppose That The Clock System (AHB) = 8MHZ EXT & The Systick Clock Is = AHB/8 */
void _delay_us( u32 Copy_u32Time ){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]

	MSTK_VidInit();
 80001b0:	f000 f9ee 	bl	8000590 <MSTK_VidInit>
	/* Disable INT */
	MSTK_VidINTStatus( MSTK_INT_DIS );
 80001b4:	2000      	movs	r0, #0
 80001b6:	f000 fa0f 	bl	80005d8 <MSTK_VidINTStatus>
	MSTK_VidStart( Copy_u32Time );
 80001ba:	6878      	ldr	r0, [r7, #4]
 80001bc:	f000 f9f4 	bl	80005a8 <MSTK_VidStart>
	/* Wiat Flag Polling */
	while( MSTK_u8ReadFlag() == 0 );
 80001c0:	bf00      	nop
 80001c2:	f000 fa23 	bl	800060c <MSTK_u8ReadFlag>
 80001c6:	4603      	mov	r3, r0
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d0fa      	beq.n	80001c2 <_delay_us+0x1a>

}
 80001cc:	bf00      	nop
 80001ce:	bf00      	nop
 80001d0:	3708      	adds	r7, #8
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}
	...

080001d8 <MGPIO_VidSetPinDirection>:

#include"GPIO_INTERFACE.h"
#include"GPIO_REG.h"


void MGPIO_VidSetPinDirection( u8 Copy_u8Port , u8 Copy_u8Pin , u8 u8Copy_u8Mode ){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
 80001e2:	460b      	mov	r3, r1
 80001e4:	71bb      	strb	r3, [r7, #6]
 80001e6:	4613      	mov	r3, r2
 80001e8:	717b      	strb	r3, [r7, #5]

	switch(Copy_u8Port){
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	2b02      	cmp	r3, #2
 80001ee:	d07a      	beq.n	80002e6 <MGPIO_VidSetPinDirection+0x10e>
 80001f0:	2b02      	cmp	r3, #2
 80001f2:	f300 80b1 	bgt.w	8000358 <MGPIO_VidSetPinDirection+0x180>
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d002      	beq.n	8000200 <MGPIO_VidSetPinDirection+0x28>
 80001fa:	2b01      	cmp	r3, #1
 80001fc:	d03a      	beq.n	8000274 <MGPIO_VidSetPinDirection+0x9c>
			MGPIOC->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
			MGPIOC->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
		}

		break;
	default :break;
 80001fe:	e0ab      	b.n	8000358 <MGPIO_VidSetPinDirection+0x180>
		if(Copy_u8Pin <= 7 ){//low
 8000200:	79bb      	ldrb	r3, [r7, #6]
 8000202:	2b07      	cmp	r3, #7
 8000204:	d817      	bhi.n	8000236 <MGPIO_VidSetPinDirection+0x5e>
			MGPIOA->CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ));// R M W
 8000206:	4b5a      	ldr	r3, [pc, #360]	; (8000370 <MGPIO_VidSetPinDirection+0x198>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	79ba      	ldrb	r2, [r7, #6]
 800020c:	0092      	lsls	r2, r2, #2
 800020e:	210f      	movs	r1, #15
 8000210:	fa01 f202 	lsl.w	r2, r1, r2
 8000214:	43d2      	mvns	r2, r2
 8000216:	4611      	mov	r1, r2
 8000218:	4a55      	ldr	r2, [pc, #340]	; (8000370 <MGPIO_VidSetPinDirection+0x198>)
 800021a:	400b      	ands	r3, r1
 800021c:	6013      	str	r3, [r2, #0]
			MGPIOA->CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 );
 800021e:	4b54      	ldr	r3, [pc, #336]	; (8000370 <MGPIO_VidSetPinDirection+0x198>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	7979      	ldrb	r1, [r7, #5]
 8000224:	79ba      	ldrb	r2, [r7, #6]
 8000226:	0092      	lsls	r2, r2, #2
 8000228:	fa01 f202 	lsl.w	r2, r1, r2
 800022c:	4611      	mov	r1, r2
 800022e:	4a50      	ldr	r2, [pc, #320]	; (8000370 <MGPIO_VidSetPinDirection+0x198>)
 8000230:	430b      	orrs	r3, r1
 8000232:	6013      	str	r3, [r2, #0]
		break;
 8000234:	e092      	b.n	800035c <MGPIO_VidSetPinDirection+0x184>
		}else if(Copy_u8Pin <=15 ){//high
 8000236:	79bb      	ldrb	r3, [r7, #6]
 8000238:	2b0f      	cmp	r3, #15
 800023a:	f200 808f 	bhi.w	800035c <MGPIO_VidSetPinDirection+0x184>
			Copy_u8Pin = Copy_u8Pin - 8;
 800023e:	79bb      	ldrb	r3, [r7, #6]
 8000240:	3b08      	subs	r3, #8
 8000242:	71bb      	strb	r3, [r7, #6]
			MGPIOA->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 8000244:	4b4a      	ldr	r3, [pc, #296]	; (8000370 <MGPIO_VidSetPinDirection+0x198>)
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	79ba      	ldrb	r2, [r7, #6]
 800024a:	0092      	lsls	r2, r2, #2
 800024c:	210f      	movs	r1, #15
 800024e:	fa01 f202 	lsl.w	r2, r1, r2
 8000252:	43d2      	mvns	r2, r2
 8000254:	4611      	mov	r1, r2
 8000256:	4a46      	ldr	r2, [pc, #280]	; (8000370 <MGPIO_VidSetPinDirection+0x198>)
 8000258:	400b      	ands	r3, r1
 800025a:	6053      	str	r3, [r2, #4]
			MGPIOA->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 );
 800025c:	4b44      	ldr	r3, [pc, #272]	; (8000370 <MGPIO_VidSetPinDirection+0x198>)
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	7979      	ldrb	r1, [r7, #5]
 8000262:	79ba      	ldrb	r2, [r7, #6]
 8000264:	0092      	lsls	r2, r2, #2
 8000266:	fa01 f202 	lsl.w	r2, r1, r2
 800026a:	4611      	mov	r1, r2
 800026c:	4a40      	ldr	r2, [pc, #256]	; (8000370 <MGPIO_VidSetPinDirection+0x198>)
 800026e:	430b      	orrs	r3, r1
 8000270:	6053      	str	r3, [r2, #4]
		break;
 8000272:	e073      	b.n	800035c <MGPIO_VidSetPinDirection+0x184>
		if(Copy_u8Pin <= 7 ){//low
 8000274:	79bb      	ldrb	r3, [r7, #6]
 8000276:	2b07      	cmp	r3, #7
 8000278:	d817      	bhi.n	80002aa <MGPIO_VidSetPinDirection+0xd2>
			MGPIOB->CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );// R M W
 800027a:	4b3e      	ldr	r3, [pc, #248]	; (8000374 <MGPIO_VidSetPinDirection+0x19c>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	79ba      	ldrb	r2, [r7, #6]
 8000280:	0092      	lsls	r2, r2, #2
 8000282:	210f      	movs	r1, #15
 8000284:	fa01 f202 	lsl.w	r2, r1, r2
 8000288:	43d2      	mvns	r2, r2
 800028a:	4611      	mov	r1, r2
 800028c:	4a39      	ldr	r2, [pc, #228]	; (8000374 <MGPIO_VidSetPinDirection+0x19c>)
 800028e:	400b      	ands	r3, r1
 8000290:	6013      	str	r3, [r2, #0]
			MGPIOB->CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 8000292:	4b38      	ldr	r3, [pc, #224]	; (8000374 <MGPIO_VidSetPinDirection+0x19c>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	7979      	ldrb	r1, [r7, #5]
 8000298:	79ba      	ldrb	r2, [r7, #6]
 800029a:	0092      	lsls	r2, r2, #2
 800029c:	fa01 f202 	lsl.w	r2, r1, r2
 80002a0:	4611      	mov	r1, r2
 80002a2:	4a34      	ldr	r2, [pc, #208]	; (8000374 <MGPIO_VidSetPinDirection+0x19c>)
 80002a4:	430b      	orrs	r3, r1
 80002a6:	6013      	str	r3, [r2, #0]
		break;
 80002a8:	e05a      	b.n	8000360 <MGPIO_VidSetPinDirection+0x188>
		}else if(Copy_u8Pin <=15 ){//high
 80002aa:	79bb      	ldrb	r3, [r7, #6]
 80002ac:	2b0f      	cmp	r3, #15
 80002ae:	d857      	bhi.n	8000360 <MGPIO_VidSetPinDirection+0x188>
			Copy_u8Pin = Copy_u8Pin - 8;
 80002b0:	79bb      	ldrb	r3, [r7, #6]
 80002b2:	3b08      	subs	r3, #8
 80002b4:	71bb      	strb	r3, [r7, #6]
			MGPIOB->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 80002b6:	4b2f      	ldr	r3, [pc, #188]	; (8000374 <MGPIO_VidSetPinDirection+0x19c>)
 80002b8:	685b      	ldr	r3, [r3, #4]
 80002ba:	79ba      	ldrb	r2, [r7, #6]
 80002bc:	0092      	lsls	r2, r2, #2
 80002be:	210f      	movs	r1, #15
 80002c0:	fa01 f202 	lsl.w	r2, r1, r2
 80002c4:	43d2      	mvns	r2, r2
 80002c6:	4611      	mov	r1, r2
 80002c8:	4a2a      	ldr	r2, [pc, #168]	; (8000374 <MGPIO_VidSetPinDirection+0x19c>)
 80002ca:	400b      	ands	r3, r1
 80002cc:	6053      	str	r3, [r2, #4]
			MGPIOB->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 80002ce:	4b29      	ldr	r3, [pc, #164]	; (8000374 <MGPIO_VidSetPinDirection+0x19c>)
 80002d0:	685b      	ldr	r3, [r3, #4]
 80002d2:	7979      	ldrb	r1, [r7, #5]
 80002d4:	79ba      	ldrb	r2, [r7, #6]
 80002d6:	0092      	lsls	r2, r2, #2
 80002d8:	fa01 f202 	lsl.w	r2, r1, r2
 80002dc:	4611      	mov	r1, r2
 80002de:	4a25      	ldr	r2, [pc, #148]	; (8000374 <MGPIO_VidSetPinDirection+0x19c>)
 80002e0:	430b      	orrs	r3, r1
 80002e2:	6053      	str	r3, [r2, #4]
		break;
 80002e4:	e03c      	b.n	8000360 <MGPIO_VidSetPinDirection+0x188>
		if(Copy_u8Pin <= 7 ){//low
 80002e6:	79bb      	ldrb	r3, [r7, #6]
 80002e8:	2b07      	cmp	r3, #7
 80002ea:	d817      	bhi.n	800031c <MGPIO_VidSetPinDirection+0x144>
			MGPIOC->CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );// R M W
 80002ec:	4b22      	ldr	r3, [pc, #136]	; (8000378 <MGPIO_VidSetPinDirection+0x1a0>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	79ba      	ldrb	r2, [r7, #6]
 80002f2:	0092      	lsls	r2, r2, #2
 80002f4:	210f      	movs	r1, #15
 80002f6:	fa01 f202 	lsl.w	r2, r1, r2
 80002fa:	43d2      	mvns	r2, r2
 80002fc:	4611      	mov	r1, r2
 80002fe:	4a1e      	ldr	r2, [pc, #120]	; (8000378 <MGPIO_VidSetPinDirection+0x1a0>)
 8000300:	400b      	ands	r3, r1
 8000302:	6013      	str	r3, [r2, #0]
			MGPIOC->CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 8000304:	4b1c      	ldr	r3, [pc, #112]	; (8000378 <MGPIO_VidSetPinDirection+0x1a0>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	7979      	ldrb	r1, [r7, #5]
 800030a:	79ba      	ldrb	r2, [r7, #6]
 800030c:	0092      	lsls	r2, r2, #2
 800030e:	fa01 f202 	lsl.w	r2, r1, r2
 8000312:	4611      	mov	r1, r2
 8000314:	4a18      	ldr	r2, [pc, #96]	; (8000378 <MGPIO_VidSetPinDirection+0x1a0>)
 8000316:	430b      	orrs	r3, r1
 8000318:	6013      	str	r3, [r2, #0]
		break;
 800031a:	e023      	b.n	8000364 <MGPIO_VidSetPinDirection+0x18c>
		}else if(Copy_u8Pin <=15 ){//high
 800031c:	79bb      	ldrb	r3, [r7, #6]
 800031e:	2b0f      	cmp	r3, #15
 8000320:	d820      	bhi.n	8000364 <MGPIO_VidSetPinDirection+0x18c>
			Copy_u8Pin = Copy_u8Pin - 8;
 8000322:	79bb      	ldrb	r3, [r7, #6]
 8000324:	3b08      	subs	r3, #8
 8000326:	71bb      	strb	r3, [r7, #6]
			MGPIOC->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 8000328:	4b13      	ldr	r3, [pc, #76]	; (8000378 <MGPIO_VidSetPinDirection+0x1a0>)
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	79ba      	ldrb	r2, [r7, #6]
 800032e:	0092      	lsls	r2, r2, #2
 8000330:	210f      	movs	r1, #15
 8000332:	fa01 f202 	lsl.w	r2, r1, r2
 8000336:	43d2      	mvns	r2, r2
 8000338:	4611      	mov	r1, r2
 800033a:	4a0f      	ldr	r2, [pc, #60]	; (8000378 <MGPIO_VidSetPinDirection+0x1a0>)
 800033c:	400b      	ands	r3, r1
 800033e:	6053      	str	r3, [r2, #4]
			MGPIOC->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 8000340:	4b0d      	ldr	r3, [pc, #52]	; (8000378 <MGPIO_VidSetPinDirection+0x1a0>)
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	7979      	ldrb	r1, [r7, #5]
 8000346:	79ba      	ldrb	r2, [r7, #6]
 8000348:	0092      	lsls	r2, r2, #2
 800034a:	fa01 f202 	lsl.w	r2, r1, r2
 800034e:	4611      	mov	r1, r2
 8000350:	4a09      	ldr	r2, [pc, #36]	; (8000378 <MGPIO_VidSetPinDirection+0x1a0>)
 8000352:	430b      	orrs	r3, r1
 8000354:	6053      	str	r3, [r2, #4]
		break;
 8000356:	e005      	b.n	8000364 <MGPIO_VidSetPinDirection+0x18c>
	default :break;
 8000358:	bf00      	nop
 800035a:	e004      	b.n	8000366 <MGPIO_VidSetPinDirection+0x18e>
		break;
 800035c:	bf00      	nop
 800035e:	e002      	b.n	8000366 <MGPIO_VidSetPinDirection+0x18e>
		break;
 8000360:	bf00      	nop
 8000362:	e000      	b.n	8000366 <MGPIO_VidSetPinDirection+0x18e>
		break;
 8000364:	bf00      	nop
	}

}
 8000366:	bf00      	nop
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr
 8000370:	40010800 	.word	0x40010800
 8000374:	40010c00 	.word	0x40010c00
 8000378:	40011000 	.word	0x40011000

0800037c <MGPIO_VidSetPinValue>:

void MGPIO_VidSetPinValue( u8 Copy_u8Port , u8 Copy_u8Pin , u8 u8Copy_u8Value ){
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	4603      	mov	r3, r0
 8000384:	71fb      	strb	r3, [r7, #7]
 8000386:	460b      	mov	r3, r1
 8000388:	71bb      	strb	r3, [r7, #6]
 800038a:	4613      	mov	r3, r2
 800038c:	717b      	strb	r3, [r7, #5]

	switch(Copy_u8Port){
 800038e:	79fb      	ldrb	r3, [r7, #7]
 8000390:	2b02      	cmp	r3, #2
 8000392:	d040      	beq.n	8000416 <MGPIO_VidSetPinValue+0x9a>
 8000394:	2b02      	cmp	r3, #2
 8000396:	dc60      	bgt.n	800045a <MGPIO_VidSetPinValue+0xde>
 8000398:	2b00      	cmp	r3, #0
 800039a:	d002      	beq.n	80003a2 <MGPIO_VidSetPinValue+0x26>
 800039c:	2b01      	cmp	r3, #1
 800039e:	d01d      	beq.n	80003dc <MGPIO_VidSetPinValue+0x60>

		break;

	}

}
 80003a0:	e05b      	b.n	800045a <MGPIO_VidSetPinValue+0xde>
		if( u8Copy_u8Value == HIGH ){
 80003a2:	797b      	ldrb	r3, [r7, #5]
 80003a4:	2b01      	cmp	r3, #1
 80003a6:	d10a      	bne.n	80003be <MGPIO_VidSetPinValue+0x42>
			SET_BIT( MGPIOA->ODR , Copy_u8Pin );
 80003a8:	4b2e      	ldr	r3, [pc, #184]	; (8000464 <MGPIO_VidSetPinValue+0xe8>)
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	79ba      	ldrb	r2, [r7, #6]
 80003ae:	2101      	movs	r1, #1
 80003b0:	fa01 f202 	lsl.w	r2, r1, r2
 80003b4:	4611      	mov	r1, r2
 80003b6:	4a2b      	ldr	r2, [pc, #172]	; (8000464 <MGPIO_VidSetPinValue+0xe8>)
 80003b8:	430b      	orrs	r3, r1
 80003ba:	60d3      	str	r3, [r2, #12]
		break;
 80003bc:	e048      	b.n	8000450 <MGPIO_VidSetPinValue+0xd4>
		}else if( u8Copy_u8Value == LOW ){
 80003be:	797b      	ldrb	r3, [r7, #5]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d145      	bne.n	8000450 <MGPIO_VidSetPinValue+0xd4>
			CLR_BIT( MGPIOA->ODR , Copy_u8Pin );
 80003c4:	4b27      	ldr	r3, [pc, #156]	; (8000464 <MGPIO_VidSetPinValue+0xe8>)
 80003c6:	68db      	ldr	r3, [r3, #12]
 80003c8:	79ba      	ldrb	r2, [r7, #6]
 80003ca:	2101      	movs	r1, #1
 80003cc:	fa01 f202 	lsl.w	r2, r1, r2
 80003d0:	43d2      	mvns	r2, r2
 80003d2:	4611      	mov	r1, r2
 80003d4:	4a23      	ldr	r2, [pc, #140]	; (8000464 <MGPIO_VidSetPinValue+0xe8>)
 80003d6:	400b      	ands	r3, r1
 80003d8:	60d3      	str	r3, [r2, #12]
		break;
 80003da:	e039      	b.n	8000450 <MGPIO_VidSetPinValue+0xd4>
		if( u8Copy_u8Value == HIGH ){
 80003dc:	797b      	ldrb	r3, [r7, #5]
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d10a      	bne.n	80003f8 <MGPIO_VidSetPinValue+0x7c>
			SET_BIT( MGPIOB->ODR , Copy_u8Pin );
 80003e2:	4b21      	ldr	r3, [pc, #132]	; (8000468 <MGPIO_VidSetPinValue+0xec>)
 80003e4:	68db      	ldr	r3, [r3, #12]
 80003e6:	79ba      	ldrb	r2, [r7, #6]
 80003e8:	2101      	movs	r1, #1
 80003ea:	fa01 f202 	lsl.w	r2, r1, r2
 80003ee:	4611      	mov	r1, r2
 80003f0:	4a1d      	ldr	r2, [pc, #116]	; (8000468 <MGPIO_VidSetPinValue+0xec>)
 80003f2:	430b      	orrs	r3, r1
 80003f4:	60d3      	str	r3, [r2, #12]
		break;
 80003f6:	e02d      	b.n	8000454 <MGPIO_VidSetPinValue+0xd8>
		}else if( u8Copy_u8Value == LOW ){
 80003f8:	797b      	ldrb	r3, [r7, #5]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d12a      	bne.n	8000454 <MGPIO_VidSetPinValue+0xd8>
			CLR_BIT( MGPIOB->ODR , Copy_u8Pin );
 80003fe:	4b1a      	ldr	r3, [pc, #104]	; (8000468 <MGPIO_VidSetPinValue+0xec>)
 8000400:	68db      	ldr	r3, [r3, #12]
 8000402:	79ba      	ldrb	r2, [r7, #6]
 8000404:	2101      	movs	r1, #1
 8000406:	fa01 f202 	lsl.w	r2, r1, r2
 800040a:	43d2      	mvns	r2, r2
 800040c:	4611      	mov	r1, r2
 800040e:	4a16      	ldr	r2, [pc, #88]	; (8000468 <MGPIO_VidSetPinValue+0xec>)
 8000410:	400b      	ands	r3, r1
 8000412:	60d3      	str	r3, [r2, #12]
		break;
 8000414:	e01e      	b.n	8000454 <MGPIO_VidSetPinValue+0xd8>
		if( u8Copy_u8Value == HIGH ){
 8000416:	797b      	ldrb	r3, [r7, #5]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d10a      	bne.n	8000432 <MGPIO_VidSetPinValue+0xb6>
			SET_BIT( MGPIOC->ODR , Copy_u8Pin );
 800041c:	4b13      	ldr	r3, [pc, #76]	; (800046c <MGPIO_VidSetPinValue+0xf0>)
 800041e:	68db      	ldr	r3, [r3, #12]
 8000420:	79ba      	ldrb	r2, [r7, #6]
 8000422:	2101      	movs	r1, #1
 8000424:	fa01 f202 	lsl.w	r2, r1, r2
 8000428:	4611      	mov	r1, r2
 800042a:	4a10      	ldr	r2, [pc, #64]	; (800046c <MGPIO_VidSetPinValue+0xf0>)
 800042c:	430b      	orrs	r3, r1
 800042e:	60d3      	str	r3, [r2, #12]
		break;
 8000430:	e012      	b.n	8000458 <MGPIO_VidSetPinValue+0xdc>
		}else if( u8Copy_u8Value == LOW ){
 8000432:	797b      	ldrb	r3, [r7, #5]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d10f      	bne.n	8000458 <MGPIO_VidSetPinValue+0xdc>
			CLR_BIT( MGPIOC->ODR , Copy_u8Pin );
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <MGPIO_VidSetPinValue+0xf0>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	79ba      	ldrb	r2, [r7, #6]
 800043e:	2101      	movs	r1, #1
 8000440:	fa01 f202 	lsl.w	r2, r1, r2
 8000444:	43d2      	mvns	r2, r2
 8000446:	4611      	mov	r1, r2
 8000448:	4a08      	ldr	r2, [pc, #32]	; (800046c <MGPIO_VidSetPinValue+0xf0>)
 800044a:	400b      	ands	r3, r1
 800044c:	60d3      	str	r3, [r2, #12]
		break;
 800044e:	e003      	b.n	8000458 <MGPIO_VidSetPinValue+0xdc>
		break;
 8000450:	bf00      	nop
 8000452:	e002      	b.n	800045a <MGPIO_VidSetPinValue+0xde>
		break;
 8000454:	bf00      	nop
 8000456:	e000      	b.n	800045a <MGPIO_VidSetPinValue+0xde>
		break;
 8000458:	bf00      	nop
}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr
 8000464:	40010800 	.word	0x40010800
 8000468:	40010c00 	.word	0x40010c00
 800046c:	40011000 	.word	0x40011000

08000470 <MNVIC_VidEnablePeripheral>:

#include"NVIC_INTERFACE.h"
#include"NVIC_REG.h"


void MNVIC_VidEnablePeripheral ( u8 Copy_u8INTID ){
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	71fb      	strb	r3, [r7, #7]

	MNVIC->ISER[ Copy_u8INTID / 32 ] = 1 << ( Copy_u8INTID % 32 ) ;
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	f003 031f 	and.w	r3, r3, #31
 8000480:	2201      	movs	r2, #1
 8000482:	fa02 f103 	lsl.w	r1, r2, r3
 8000486:	4a05      	ldr	r2, [pc, #20]	; (800049c <MNVIC_VidEnablePeripheral+0x2c>)
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	095b      	lsrs	r3, r3, #5
 800048c:	b2db      	uxtb	r3, r3
 800048e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	e000e100 	.word	0xe000e100

080004a0 <MRCC_VidInit>:
#include"RCC_CONFG.h"
#include"ERROR_STATUS.h"
#include"RCC_PRIVATE.h"
#include"RCC_REG.h"

void MRCC_VidInit( void ){
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0

	u32 LOC_u32TimeOut = 0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	607b      	str	r3, [r7, #4]

	#elif CLOCK_TYPE == HSE

		/* BIT 1:0 -> Choose Between HSI OR HSE OR PLL */
		/* HSE Selected As A System Clock */
		SET_BIT( MRCC->CFGR , 0  );
 80004aa:	4b15      	ldr	r3, [pc, #84]	; (8000500 <MRCC_VidInit+0x60>)
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	4a14      	ldr	r2, [pc, #80]	; (8000500 <MRCC_VidInit+0x60>)
 80004b0:	f043 0301 	orr.w	r3, r3, #1
 80004b4:	6053      	str	r3, [r2, #4]
		CLR_BIT( MRCC->CFGR , 1  );
 80004b6:	4b12      	ldr	r3, [pc, #72]	; (8000500 <MRCC_VidInit+0x60>)
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	4a11      	ldr	r2, [pc, #68]	; (8000500 <MRCC_VidInit+0x60>)
 80004bc:	f023 0302 	bic.w	r3, r3, #2
 80004c0:	6053      	str	r3, [r2, #4]
		/* Bit 16 -> Enable The HSE Clock */
		SET_BIT( MRCC->CR   , 16 );
 80004c2:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <MRCC_VidInit+0x60>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a0e      	ldr	r2, [pc, #56]	; (8000500 <MRCC_VidInit+0x60>)
 80004c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004cc:	6013      	str	r3, [r2, #0]
		/* Bit 17 -> Checking While The HSE Clock Is Stable */
		while( ( ( GET_BIT( MRCC->CR , 17 ) ) == 0 ) && ( LOC_u32TimeOut < 100000 ) ){ LOC_u32TimeOut++; }
 80004ce:	e002      	b.n	80004d6 <MRCC_VidInit+0x36>
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	3301      	adds	r3, #1
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <MRCC_VidInit+0x60>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d103      	bne.n	80004ea <MRCC_VidInit+0x4a>
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4a07      	ldr	r2, [pc, #28]	; (8000504 <MRCC_VidInit+0x64>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d9f2      	bls.n	80004d0 <MRCC_VidInit+0x30>

		SET_BIT( MRCC->CR , 19 );

	#elif CLOCK_SECURITY_SYSTEM == DISABLE_CLOCK_SECURITY_SYSTEM

		CLR_BIT( MRCC->CR , 19 );
 80004ea:	4b05      	ldr	r3, [pc, #20]	; (8000500 <MRCC_VidInit+0x60>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a04      	ldr	r2, [pc, #16]	; (8000500 <MRCC_VidInit+0x60>)
 80004f0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80004f4:	6013      	str	r3, [r2, #0]

		#warning " Wrong Clock Security System Configuration Choice "

	#endif

}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr
 8000500:	40021000 	.word	0x40021000
 8000504:	0001869f 	.word	0x0001869f

08000508 <MRCC_VidEnablePeripheralClock>:

void MRCC_VidEnablePeripheralClock( u8 Copy_u8PeripheralBus , u8 Copy_u8Peripheral ){
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	460a      	mov	r2, r1
 8000512:	71fb      	strb	r3, [r7, #7]
 8000514:	4613      	mov	r3, r2
 8000516:	71bb      	strb	r3, [r7, #6]


		switch( Copy_u8PeripheralBus ){
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	2b02      	cmp	r3, #2
 800051c:	d01c      	beq.n	8000558 <MRCC_VidEnablePeripheralClock+0x50>
 800051e:	2b02      	cmp	r3, #2
 8000520:	dc25      	bgt.n	800056e <MRCC_VidEnablePeripheralClock+0x66>
 8000522:	2b00      	cmp	r3, #0
 8000524:	d002      	beq.n	800052c <MRCC_VidEnablePeripheralClock+0x24>
 8000526:	2b01      	cmp	r3, #1
 8000528:	d00b      	beq.n	8000542 <MRCC_VidEnablePeripheralClock+0x3a>
			case APB2_BUS : SET_BIT( MRCC->APB2ENR , Copy_u8Peripheral ); break;

		}


}
 800052a:	e020      	b.n	800056e <MRCC_VidEnablePeripheralClock+0x66>
			case AHB_BUS  : SET_BIT( MRCC->AHBENR  , Copy_u8Peripheral ); break;
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <MRCC_VidEnablePeripheralClock+0x70>)
 800052e:	695b      	ldr	r3, [r3, #20]
 8000530:	79ba      	ldrb	r2, [r7, #6]
 8000532:	2101      	movs	r1, #1
 8000534:	fa01 f202 	lsl.w	r2, r1, r2
 8000538:	4611      	mov	r1, r2
 800053a:	4a0f      	ldr	r2, [pc, #60]	; (8000578 <MRCC_VidEnablePeripheralClock+0x70>)
 800053c:	430b      	orrs	r3, r1
 800053e:	6153      	str	r3, [r2, #20]
 8000540:	e015      	b.n	800056e <MRCC_VidEnablePeripheralClock+0x66>
			case APB1_BUS :	SET_BIT( MRCC->APB1ENR , Copy_u8Peripheral ); break;
 8000542:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <MRCC_VidEnablePeripheralClock+0x70>)
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	79ba      	ldrb	r2, [r7, #6]
 8000548:	2101      	movs	r1, #1
 800054a:	fa01 f202 	lsl.w	r2, r1, r2
 800054e:	4611      	mov	r1, r2
 8000550:	4a09      	ldr	r2, [pc, #36]	; (8000578 <MRCC_VidEnablePeripheralClock+0x70>)
 8000552:	430b      	orrs	r3, r1
 8000554:	61d3      	str	r3, [r2, #28]
 8000556:	e00a      	b.n	800056e <MRCC_VidEnablePeripheralClock+0x66>
			case APB2_BUS : SET_BIT( MRCC->APB2ENR , Copy_u8Peripheral ); break;
 8000558:	4b07      	ldr	r3, [pc, #28]	; (8000578 <MRCC_VidEnablePeripheralClock+0x70>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	79ba      	ldrb	r2, [r7, #6]
 800055e:	2101      	movs	r1, #1
 8000560:	fa01 f202 	lsl.w	r2, r1, r2
 8000564:	4611      	mov	r1, r2
 8000566:	4a04      	ldr	r2, [pc, #16]	; (8000578 <MRCC_VidEnablePeripheralClock+0x70>)
 8000568:	430b      	orrs	r3, r1
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	bf00      	nop
}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	40021000 	.word	0x40021000

0800057c <SysTick_Handler>:
#include"SYSTICK_INTERFACE.h"
#include"SYSTICK_REG.h"

void ( * MSTK_CallBack ) ( void );

void SysTick_Handler(void){
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0

	MSTK_CallBack();
 8000580:	4b02      	ldr	r3, [pc, #8]	; (800058c <SysTick_Handler+0x10>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4798      	blx	r3

}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	2000001c 	.word	0x2000001c

08000590 <MSTK_VidInit>:
void MSTK_VidSetCallBack( void (*ptr)(void) ){

	MSTK_CallBack = ptr;
}

void MSTK_VidInit( void ){
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0

	// Enable Systick Interrupt  -  Clock = AHB / 8 - Stop Systic
	MSTK->CTRL = 0x00000002;
 8000594:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <MSTK_VidInit+0x14>)
 8000596:	2202      	movs	r2, #2
 8000598:	601a      	str	r2, [r3, #0]

}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	e000e010 	.word	0xe000e010

080005a8 <MSTK_VidStart>:


void MSTK_VidStart( u32 Copy_PreloadValue ){
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]

	// AHB = EXT = 8MHZ & CLOCK OF MSTK = AHB / 8 = 8MHZ / 8 = 1MHZ = 1 Micro For Each Count
	//Load Reload Value
	MSTK->LOAD = Copy_PreloadValue - 1;
 80005b0:	4a08      	ldr	r2, [pc, #32]	; (80005d4 <MSTK_VidStart+0x2c>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	3b01      	subs	r3, #1
 80005b6:	6053      	str	r3, [r2, #4]
	//Clear Val Register
	MSTK->VAL  = 0 ;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <MSTK_VidStart+0x2c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
	//Enable Systick
	SET_BIT( MSTK->CTRL , 0 );
 80005be:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <MSTK_VidStart+0x2c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a04      	ldr	r2, [pc, #16]	; (80005d4 <MSTK_VidStart+0x2c>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6013      	str	r3, [r2, #0]

}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr
 80005d4:	e000e010 	.word	0xe000e010

080005d8 <MSTK_VidINTStatus>:

void MSTK_VidINTStatus( u8 Copy_u8Status ){
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]

	 MSTK->CTRL &= ~( 1 << 1 );
 80005e2:	4b09      	ldr	r3, [pc, #36]	; (8000608 <MSTK_VidINTStatus+0x30>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a08      	ldr	r2, [pc, #32]	; (8000608 <MSTK_VidINTStatus+0x30>)
 80005e8:	f023 0302 	bic.w	r3, r3, #2
 80005ec:	6013      	str	r3, [r2, #0]
	 MSTK->CTRL |=  ( Copy_u8Status << 1 );
 80005ee:	4b06      	ldr	r3, [pc, #24]	; (8000608 <MSTK_VidINTStatus+0x30>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	79fa      	ldrb	r2, [r7, #7]
 80005f4:	0052      	lsls	r2, r2, #1
 80005f6:	4611      	mov	r1, r2
 80005f8:	4a03      	ldr	r2, [pc, #12]	; (8000608 <MSTK_VidINTStatus+0x30>)
 80005fa:	430b      	orrs	r3, r1
 80005fc:	6013      	str	r3, [r2, #0]

}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr
 8000608:	e000e010 	.word	0xe000e010

0800060c <MSTK_u8ReadFlag>:

u8 MSTK_u8ReadFlag( void ){
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

	return ( GET_BIT( MSTK->CTRL , 16 ) );
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <MSTK_u8ReadFlag+0x1c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	0c1b      	lsrs	r3, r3, #16
 8000616:	b2db      	uxtb	r3, r3
 8000618:	f003 0301 	and.w	r3, r3, #1
 800061c:	b2db      	uxtb	r3, r3

}
 800061e:	4618      	mov	r0, r3
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	e000e010 	.word	0xe000e010

0800062c <TIM2_IRQHandler>:
	TIMER2_CNT = Copy_u8Preload;
}

/*Timer2 ISR*/
void TIM2_IRQHandler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	if(TIMER2_pvInputCaptureCallBackFunc != NULL)
 8000630:	4b04      	ldr	r3, [pc, #16]	; (8000644 <TIM2_IRQHandler+0x18>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d002      	beq.n	800063e <TIM2_IRQHandler+0x12>
	{
		TIMER2_pvInputCaptureCallBackFunc();
 8000638:	4b02      	ldr	r3, [pc, #8]	; (8000644 <TIM2_IRQHandler+0x18>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4798      	blx	r3
	}
	else
	{
		/*Do nothing*/
	}
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000020 	.word	0x20000020

08000648 <Timer3_u8InputCaptureSetCallBack>:
	// Enable Timer 3
	SET_BIT(TIMER3_CR1,0);

}
u8 Timer3_u8InputCaptureSetCallBack(void (*Copy_pvCallBackFunc)(void))
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	u8 Local_u8ErrorState = OK;
 8000650:	2300      	movs	r3, #0
 8000652:	73fb      	strb	r3, [r7, #15]
	if(Copy_pvCallBackFunc != NULL)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <Timer3_u8InputCaptureSetCallBack+0x18>
	{
		TIMER3_pvInputCaptureCallBackFunc = Copy_pvCallBackFunc;
 800065a:	4a04      	ldr	r2, [pc, #16]	; (800066c <Timer3_u8InputCaptureSetCallBack+0x24>)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6013      	str	r3, [r2, #0]
	else
	{
//		Local_u8ErrorState= NULL_POINTER;
	}

	return Local_u8ErrorState;
 8000660:	7bfb      	ldrb	r3, [r7, #15]

}
 8000662:	4618      	mov	r0, r3
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr
 800066c:	20000024 	.word	0x20000024

08000670 <Timer3_VoidSetPreload>:

void Timer3_VoidSetPreload(u8 Copy_u8Preload)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
	TIMER3_CNT = Copy_u8Preload;
 800067a:	4a04      	ldr	r2, [pc, #16]	; (800068c <Timer3_VoidSetPreload+0x1c>)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	6013      	str	r3, [r2, #0]
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	40000424 	.word	0x40000424

08000690 <TIM3_IRQHandler>:

/*Timer3 ISR*/
void TIM3_IRQHandler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	if(TIMER3_pvInputCaptureCallBackFunc != NULL)
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <TIM3_IRQHandler+0x18>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d002      	beq.n	80006a2 <TIM3_IRQHandler+0x12>
	{
		TIMER3_pvInputCaptureCallBackFunc();
 800069c:	4b02      	ldr	r3, [pc, #8]	; (80006a8 <TIM3_IRQHandler+0x18>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4798      	blx	r3
	}
	else
	{
		/*Do nothing*/
	}
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000024 	.word	0x20000024

080006ac <CLCD_voidSendCommand>:
#include "MACROS.h"
#include "DELAY_INTERFACE.h"


void CLCD_voidSendCommand(u8 Copy_u8Command)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
	/*1- Set RS to Low: for command*/
	MGPIO_VidSetPinValue(LCD_CONTROL_PORT, RS, LOW);
 80006b6:	2200      	movs	r2, #0
 80006b8:	210b      	movs	r1, #11
 80006ba:	2000      	movs	r0, #0
 80006bc:	f7ff fe5e 	bl	800037c <MGPIO_VidSetPinValue>


	/*Send the command*/
	MGPIO_VidSetPinValue(LCD_DATA_PORT, D4, GET_BIT(Copy_u8Command,4));
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	091b      	lsrs	r3, r3, #4
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	461a      	mov	r2, r3
 80006ce:	210f      	movs	r1, #15
 80006d0:	2001      	movs	r0, #1
 80006d2:	f7ff fe53 	bl	800037c <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(LCD_DATA_PORT, D5, GET_BIT(Copy_u8Command,5));
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	095b      	lsrs	r3, r3, #5
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	f003 0301 	and.w	r3, r3, #1
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	461a      	mov	r2, r3
 80006e4:	210e      	movs	r1, #14
 80006e6:	2001      	movs	r0, #1
 80006e8:	f7ff fe48 	bl	800037c <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(LCD_DATA_PORT, D6, GET_BIT(Copy_u8Command,6));
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	099b      	lsrs	r3, r3, #6
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	461a      	mov	r2, r3
 80006fa:	210d      	movs	r1, #13
 80006fc:	2001      	movs	r0, #1
 80006fe:	f7ff fe3d 	bl	800037c <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(LCD_DATA_PORT, D7, GET_BIT(Copy_u8Command,7));
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	09db      	lsrs	r3, r3, #7
 8000706:	b2db      	uxtb	r3, r3
 8000708:	461a      	mov	r2, r3
 800070a:	210c      	movs	r1, #12
 800070c:	2001      	movs	r0, #1
 800070e:	f7ff fe35 	bl	800037c <MGPIO_VidSetPinValue>



	/*Send the Enable pulse*/
	MGPIO_VidSetPinValue(LCD_CONTROL_PORT, EN, HIGH);
 8000712:	2201      	movs	r2, #1
 8000714:	210a      	movs	r1, #10
 8000716:	2000      	movs	r0, #0
 8000718:	f7ff fe30 	bl	800037c <MGPIO_VidSetPinValue>
	_delay_ms(2);
 800071c:	2002      	movs	r0, #2
 800071e:	f7ff fd27 	bl	8000170 <_delay_ms>
	MGPIO_VidSetPinValue(LCD_CONTROL_PORT, EN, LOW);
 8000722:	2200      	movs	r2, #0
 8000724:	210a      	movs	r1, #10
 8000726:	2000      	movs	r0, #0
 8000728:	f7ff fe28 	bl	800037c <MGPIO_VidSetPinValue>

	MGPIO_VidSetPinValue(LCD_DATA_PORT, D4, GET_BIT(Copy_u8Command,0));
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	b2db      	uxtb	r3, r3
 8000734:	461a      	mov	r2, r3
 8000736:	210f      	movs	r1, #15
 8000738:	2001      	movs	r0, #1
 800073a:	f7ff fe1f 	bl	800037c <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(LCD_DATA_PORT, D5, GET_BIT(Copy_u8Command,1));
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	085b      	lsrs	r3, r3, #1
 8000742:	b2db      	uxtb	r3, r3
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	b2db      	uxtb	r3, r3
 800074a:	461a      	mov	r2, r3
 800074c:	210e      	movs	r1, #14
 800074e:	2001      	movs	r0, #1
 8000750:	f7ff fe14 	bl	800037c <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(LCD_DATA_PORT, D6, GET_BIT(Copy_u8Command,2));
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	089b      	lsrs	r3, r3, #2
 8000758:	b2db      	uxtb	r3, r3
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	b2db      	uxtb	r3, r3
 8000760:	461a      	mov	r2, r3
 8000762:	210d      	movs	r1, #13
 8000764:	2001      	movs	r0, #1
 8000766:	f7ff fe09 	bl	800037c <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(LCD_DATA_PORT, D7, GET_BIT(Copy_u8Command,3));
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	08db      	lsrs	r3, r3, #3
 800076e:	b2db      	uxtb	r3, r3
 8000770:	f003 0301 	and.w	r3, r3, #1
 8000774:	b2db      	uxtb	r3, r3
 8000776:	461a      	mov	r2, r3
 8000778:	210c      	movs	r1, #12
 800077a:	2001      	movs	r0, #1
 800077c:	f7ff fdfe 	bl	800037c <MGPIO_VidSetPinValue>



	/*Send the Enable pulse*/
	MGPIO_VidSetPinValue(LCD_CONTROL_PORT, EN, HIGH);
 8000780:	2201      	movs	r2, #1
 8000782:	210a      	movs	r1, #10
 8000784:	2000      	movs	r0, #0
 8000786:	f7ff fdf9 	bl	800037c <MGPIO_VidSetPinValue>
	_delay_ms(2);
 800078a:	2002      	movs	r0, #2
 800078c:	f7ff fcf0 	bl	8000170 <_delay_ms>
	MGPIO_VidSetPinValue(LCD_CONTROL_PORT, EN, LOW);
 8000790:	2200      	movs	r2, #0
 8000792:	210a      	movs	r1, #10
 8000794:	2000      	movs	r0, #0
 8000796:	f7ff fdf1 	bl	800037c <MGPIO_VidSetPinValue>

}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <CLCD_voidSendData>:
void CLCD_voidSendData(u8 Copy_u8Data)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	71fb      	strb	r3, [r7, #7]
	/*1- Set RS to High: for data*/
	MGPIO_VidSetPinValue(LCD_CONTROL_PORT, RS, HIGH);
 80007ac:	2201      	movs	r2, #1
 80007ae:	210b      	movs	r1, #11
 80007b0:	2000      	movs	r0, #0
 80007b2:	f7ff fde3 	bl	800037c <MGPIO_VidSetPinValue>



	/*Send the data*/

	MGPIO_VidSetPinValue(LCD_DATA_PORT, D4, GET_BIT(Copy_u8Data,4));
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	091b      	lsrs	r3, r3, #4
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	461a      	mov	r2, r3
 80007c4:	210f      	movs	r1, #15
 80007c6:	2001      	movs	r0, #1
 80007c8:	f7ff fdd8 	bl	800037c <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(LCD_DATA_PORT, D5, GET_BIT(Copy_u8Data,5));
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	095b      	lsrs	r3, r3, #5
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	461a      	mov	r2, r3
 80007da:	210e      	movs	r1, #14
 80007dc:	2001      	movs	r0, #1
 80007de:	f7ff fdcd 	bl	800037c <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(LCD_DATA_PORT, D6, GET_BIT(Copy_u8Data,6));
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	099b      	lsrs	r3, r3, #6
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	461a      	mov	r2, r3
 80007f0:	210d      	movs	r1, #13
 80007f2:	2001      	movs	r0, #1
 80007f4:	f7ff fdc2 	bl	800037c <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(LCD_DATA_PORT, D7, GET_BIT(Copy_u8Data,7));
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	09db      	lsrs	r3, r3, #7
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	461a      	mov	r2, r3
 8000800:	210c      	movs	r1, #12
 8000802:	2001      	movs	r0, #1
 8000804:	f7ff fdba 	bl	800037c <MGPIO_VidSetPinValue>


	/*Send the Enable pulse*/
	MGPIO_VidSetPinValue(LCD_CONTROL_PORT, EN, HIGH);
 8000808:	2201      	movs	r2, #1
 800080a:	210a      	movs	r1, #10
 800080c:	2000      	movs	r0, #0
 800080e:	f7ff fdb5 	bl	800037c <MGPIO_VidSetPinValue>
	_delay_ms(2);
 8000812:	2002      	movs	r0, #2
 8000814:	f7ff fcac 	bl	8000170 <_delay_ms>
	MGPIO_VidSetPinValue(LCD_CONTROL_PORT, EN, LOW);
 8000818:	2200      	movs	r2, #0
 800081a:	210a      	movs	r1, #10
 800081c:	2000      	movs	r0, #0
 800081e:	f7ff fdad 	bl	800037c <MGPIO_VidSetPinValue>

	MGPIO_VidSetPinValue(LCD_DATA_PORT, D4 , GET_BIT(Copy_u8Data,0));
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	f003 0301 	and.w	r3, r3, #1
 8000828:	b2db      	uxtb	r3, r3
 800082a:	461a      	mov	r2, r3
 800082c:	210f      	movs	r1, #15
 800082e:	2001      	movs	r0, #1
 8000830:	f7ff fda4 	bl	800037c <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(LCD_DATA_PORT, D5 , GET_BIT(Copy_u8Data,1));
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	085b      	lsrs	r3, r3, #1
 8000838:	b2db      	uxtb	r3, r3
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	b2db      	uxtb	r3, r3
 8000840:	461a      	mov	r2, r3
 8000842:	210e      	movs	r1, #14
 8000844:	2001      	movs	r0, #1
 8000846:	f7ff fd99 	bl	800037c <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(LCD_DATA_PORT, D6 , GET_BIT(Copy_u8Data,2));
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	089b      	lsrs	r3, r3, #2
 800084e:	b2db      	uxtb	r3, r3
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	b2db      	uxtb	r3, r3
 8000856:	461a      	mov	r2, r3
 8000858:	210d      	movs	r1, #13
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff fd8e 	bl	800037c <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(LCD_DATA_PORT, D7 , GET_BIT(Copy_u8Data,3));
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	08db      	lsrs	r3, r3, #3
 8000864:	b2db      	uxtb	r3, r3
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	b2db      	uxtb	r3, r3
 800086c:	461a      	mov	r2, r3
 800086e:	210c      	movs	r1, #12
 8000870:	2001      	movs	r0, #1
 8000872:	f7ff fd83 	bl	800037c <MGPIO_VidSetPinValue>




	/*Send the Enable pulse*/
	MGPIO_VidSetPinValue(LCD_CONTROL_PORT, EN, HIGH);
 8000876:	2201      	movs	r2, #1
 8000878:	210a      	movs	r1, #10
 800087a:	2000      	movs	r0, #0
 800087c:	f7ff fd7e 	bl	800037c <MGPIO_VidSetPinValue>
	_delay_ms(2);
 8000880:	2002      	movs	r0, #2
 8000882:	f7ff fc75 	bl	8000170 <_delay_ms>
	MGPIO_VidSetPinValue(LCD_CONTROL_PORT, EN, LOW);
 8000886:	2200      	movs	r2, #0
 8000888:	210a      	movs	r1, #10
 800088a:	2000      	movs	r0, #0
 800088c:	f7ff fd76 	bl	800037c <MGPIO_VidSetPinValue>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	MGPIO_VidSetPinDirection(LCD_CONTROL_PORT,RS,OUTPUT_SPEED_10MHZ_PP);
 800089c:	2201      	movs	r2, #1
 800089e:	210b      	movs	r1, #11
 80008a0:	2000      	movs	r0, #0
 80008a2:	f7ff fc99 	bl	80001d8 <MGPIO_VidSetPinDirection>
	MGPIO_VidSetPinDirection(LCD_CONTROL_PORT,EN,OUTPUT_SPEED_10MHZ_PP);
 80008a6:	2201      	movs	r2, #1
 80008a8:	210a      	movs	r1, #10
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff fc94 	bl	80001d8 <MGPIO_VidSetPinDirection>

	MGPIO_VidSetPinDirection(LCD_DATA_PORT,D4,OUTPUT_SPEED_10MHZ_PP);
 80008b0:	2201      	movs	r2, #1
 80008b2:	210f      	movs	r1, #15
 80008b4:	2001      	movs	r0, #1
 80008b6:	f7ff fc8f 	bl	80001d8 <MGPIO_VidSetPinDirection>
	MGPIO_VidSetPinDirection(LCD_DATA_PORT,D5,OUTPUT_SPEED_10MHZ_PP);
 80008ba:	2201      	movs	r2, #1
 80008bc:	210e      	movs	r1, #14
 80008be:	2001      	movs	r0, #1
 80008c0:	f7ff fc8a 	bl	80001d8 <MGPIO_VidSetPinDirection>
	MGPIO_VidSetPinDirection(LCD_DATA_PORT,D6,OUTPUT_SPEED_10MHZ_PP);
 80008c4:	2201      	movs	r2, #1
 80008c6:	210d      	movs	r1, #13
 80008c8:	2001      	movs	r0, #1
 80008ca:	f7ff fc85 	bl	80001d8 <MGPIO_VidSetPinDirection>
	MGPIO_VidSetPinDirection(LCD_DATA_PORT,D7,OUTPUT_SPEED_10MHZ_PP);
 80008ce:	2201      	movs	r2, #1
 80008d0:	210c      	movs	r1, #12
 80008d2:	2001      	movs	r0, #1
 80008d4:	f7ff fc80 	bl	80001d8 <MGPIO_VidSetPinDirection>

	/*1- wait for more then 30ms*/
	_delay_ms(50);
 80008d8:	2032      	movs	r0, #50	; 0x32
 80008da:	f7ff fc49 	bl	8000170 <_delay_ms>

	/*2- Function set command: 2Lines, 5x7 Font size*/
	CLCD_voidSendCommand(0x02);
 80008de:	2002      	movs	r0, #2
 80008e0:	f7ff fee4 	bl	80006ac <CLCD_voidSendCommand>
	_delay_ms(1);
 80008e4:	2001      	movs	r0, #1
 80008e6:	f7ff fc43 	bl	8000170 <_delay_ms>

	CLCD_voidSendCommand(0x28);
 80008ea:	2028      	movs	r0, #40	; 0x28
 80008ec:	f7ff fede 	bl	80006ac <CLCD_voidSendCommand>
	_delay_ms(1);
 80008f0:	2001      	movs	r0, #1
 80008f2:	f7ff fc3d 	bl	8000170 <_delay_ms>
	CLCD_voidSendCommand(0x0c);
 80008f6:	200c      	movs	r0, #12
 80008f8:	f7ff fed8 	bl	80006ac <CLCD_voidSendCommand>
	_delay_ms(1);
 80008fc:	2001      	movs	r0, #1
 80008fe:	f7ff fc37 	bl	8000170 <_delay_ms>
	CLCD_voidSendCommand(0x01);
 8000902:	2001      	movs	r0, #1
 8000904:	f7ff fed2 	bl	80006ac <CLCD_voidSendCommand>
	_delay_ms(20);
 8000908:	2014      	movs	r0, #20
 800090a:	f7ff fc31 	bl	8000170 <_delay_ms>
	CLCD_voidSendCommand(0x06);
 800090e:	2006      	movs	r0, #6
 8000910:	f7ff fecc 	bl	80006ac <CLCD_voidSendCommand>
	CLCD_voidSendCommand(0x80);
 8000914:	2080      	movs	r0, #128	; 0x80
 8000916:	f7ff fec9 	bl	80006ac <CLCD_voidSendCommand>

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <CLCD_voidWriteNumber>:
void CLCD_voidWriteNumber(u32 Copy_u32Number)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
		CLCD_voidSendData((Local_u32Reserved%10)+ '0');
		Local_u32Reserved/=10;
	}
	while(Local_u32Reserved!=1);*/
	u8 arr[20];
	u8 i = 0 , j;
 8000928:	2300      	movs	r3, #0
 800092a:	77fb      	strb	r3, [r7, #31]
	if (Copy_u32Number == 0)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d11d      	bne.n	800096e <CLCD_voidWriteNumber+0x4e>
	{
		CLCD_voidSendData('0');
 8000932:	2030      	movs	r0, #48	; 0x30
 8000934:	f7ff ff35 	bl	80007a2 <CLCD_voidSendData>
	{
		Copy_u32Number = Copy_u32Number * -1;
		CLCD_voidSendData('-');
	}

	while(Copy_u32Number)
 8000938:	e019      	b.n	800096e <CLCD_voidWriteNumber+0x4e>
	{
		arr[i++] = Copy_u32Number%10 + '0';
 800093a:	6879      	ldr	r1, [r7, #4]
 800093c:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <CLCD_voidWriteNumber+0x84>)
 800093e:	fba3 2301 	umull	r2, r3, r3, r1
 8000942:	08da      	lsrs	r2, r3, #3
 8000944:	4613      	mov	r3, r2
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	4413      	add	r3, r2
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	1aca      	subs	r2, r1, r3
 800094e:	b2d2      	uxtb	r2, r2
 8000950:	7ffb      	ldrb	r3, [r7, #31]
 8000952:	1c59      	adds	r1, r3, #1
 8000954:	77f9      	strb	r1, [r7, #31]
 8000956:	3230      	adds	r2, #48	; 0x30
 8000958:	b2d2      	uxtb	r2, r2
 800095a:	3320      	adds	r3, #32
 800095c:	443b      	add	r3, r7
 800095e:	f803 2c18 	strb.w	r2, [r3, #-24]
		Copy_u32Number /= 10;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <CLCD_voidWriteNumber+0x84>)
 8000966:	fba2 2303 	umull	r2, r3, r2, r3
 800096a:	08db      	lsrs	r3, r3, #3
 800096c:	607b      	str	r3, [r7, #4]
	while(Copy_u32Number)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d1e2      	bne.n	800093a <CLCD_voidWriteNumber+0x1a>
	}
	for (j = i; j>0; --j)
 8000974:	7ffb      	ldrb	r3, [r7, #31]
 8000976:	77bb      	strb	r3, [r7, #30]
 8000978:	e00b      	b.n	8000992 <CLCD_voidWriteNumber+0x72>
	{
		CLCD_voidSendData(arr[j - 1]);
 800097a:	7fbb      	ldrb	r3, [r7, #30]
 800097c:	3b01      	subs	r3, #1
 800097e:	3320      	adds	r3, #32
 8000980:	443b      	add	r3, r7
 8000982:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff ff0b 	bl	80007a2 <CLCD_voidSendData>
	for (j = i; j>0; --j)
 800098c:	7fbb      	ldrb	r3, [r7, #30]
 800098e:	3b01      	subs	r3, #1
 8000990:	77bb      	strb	r3, [r7, #30]
 8000992:	7fbb      	ldrb	r3, [r7, #30]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d1f0      	bne.n	800097a <CLCD_voidWriteNumber+0x5a>
	}

}
 8000998:	bf00      	nop
 800099a:	bf00      	nop
 800099c:	3720      	adds	r7, #32
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	cccccccd 	.word	0xcccccccd

080009a8 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pchString)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	u8 Local_u8Counter=0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	73fb      	strb	r3, [r7, #15]
	while(Copy_pchString[Local_u8Counter]!='\0')
 80009b4:	e009      	b.n	80009ca <CLCD_voidSendString+0x22>
	{
		CLCD_voidSendData(Copy_pchString[Local_u8Counter]);
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	4413      	add	r3, r2
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff feef 	bl	80007a2 <CLCD_voidSendData>
		Local_u8Counter++;
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
 80009c6:	3301      	adds	r3, #1
 80009c8:	73fb      	strb	r3, [r7, #15]
	while(Copy_pchString[Local_u8Counter]!='\0')
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	4413      	add	r3, r2
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d1ef      	bne.n	80009b6 <CLCD_voidSendString+0xe>
	}
}
 80009d6:	bf00      	nop
 80009d8:	bf00      	nop
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <CLCD_voidGoToXY>:
	/*5- Display the special pattern*/
	CLCD_voidSendData(Copy_u8PatternNumber);
}

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	460a      	mov	r2, r1
 80009ea:	71fb      	strb	r3, [r7, #7]
 80009ec:	4613      	mov	r3, r2
 80009ee:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8DDRAMAddress;
	if(Copy_u8YPos ==0)
 80009f0:	79bb      	ldrb	r3, [r7, #6]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d102      	bne.n	80009fc <CLCD_voidGoToXY+0x1c>
	{
		/*Check if in first line*/
		Local_u8DDRAMAddress=Copy_u8XPos;
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	73fb      	strb	r3, [r7, #15]
 80009fa:	e005      	b.n	8000a08 <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8YPos==1)
 80009fc:	79bb      	ldrb	r3, [r7, #6]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d102      	bne.n	8000a08 <CLCD_voidGoToXY+0x28>
	{
		/*Check if in second line*/
		Local_u8DDRAMAddress=0x40+Copy_u8XPos;
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	3340      	adds	r3, #64	; 0x40
 8000a06:	73fb      	strb	r3, [r7, #15]
	}
	//Local_u8DDRAMAddress=0x40*Copy_u8YPos+Copy_u8XPos
	/*Setbit number 7 for SetDDRAM Address command then send the command*/
	CLCD_voidSendCommand(Local_u8DDRAMAddress+128);
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	3b80      	subs	r3, #128	; 0x80
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fe4c 	bl	80006ac <CLCD_voidSendCommand>
}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <TIM3>:
u32 volatile Difference = 0;
u8 volatile Is_First_Captured = 0;  // is the first value captured ?
u8 volatile Distance  = 0;

void TIM3(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	MGPIO_VidSetPinValue(GPIOA, PIN4, HIGH);
 8000a20:	2201      	movs	r2, #1
 8000a22:	2104      	movs	r1, #4
 8000a24:	2000      	movs	r0, #0
 8000a26:	f7ff fca9 	bl	800037c <MGPIO_VidSetPinValue>
	Is_First_Captured++;
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <TIM3+0x84>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	3301      	adds	r3, #1
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <TIM3+0x84>)
 8000a36:	701a      	strb	r2, [r3, #0]
	if(GET_BIT(TIMER3_SR,1)==1)
 8000a38:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <TIM3+0x88>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	085b      	lsrs	r3, r3, #1
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d12a      	bne.n	8000a9c <TIM3+0x80>
	{

		SET_BIT(TIMER3_SR,1);
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <TIM3+0x88>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a16      	ldr	r2, [pc, #88]	; (8000aa4 <TIM3+0x88>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	6013      	str	r3, [r2, #0]

	if(Is_First_Captured==1)
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <TIM3+0x84>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d10a      	bne.n	8000a72 <TIM3+0x56>
	{

		IC_Val1=TIMER3_CCR1;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <TIM3+0x8c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a12      	ldr	r2, [pc, #72]	; (8000aac <TIM3+0x90>)
 8000a62:	6013      	str	r3, [r2, #0]
		//Is_First_Captured = 1;  // set the first captured as true
		// Now change the polarity to falling edge
		SET_BIT(TIMER3_CCER,1);
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <TIM3+0x94>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a11      	ldr	r2, [pc, #68]	; (8000ab0 <TIM3+0x94>)
 8000a6a:	f043 0302 	orr.w	r3, r3, #2
 8000a6e:	6013      	str	r3, [r2, #0]
		CLR_BIT(TIMER3_DIER,1);


	}
	}
}
 8000a70:	e014      	b.n	8000a9c <TIM3+0x80>
	else if (Is_First_Captured==2)   // if the first is already captured
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <TIM3+0x84>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d10f      	bne.n	8000a9c <TIM3+0x80>
		IC_Val2 = TIMER3_CCR1 ; // read second value
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <TIM3+0x8c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0c      	ldr	r2, [pc, #48]	; (8000ab4 <TIM3+0x98>)
 8000a82:	6013      	str	r3, [r2, #0]
		CLR_BIT(TIMER3_CCER,1);
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <TIM3+0x94>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a09      	ldr	r2, [pc, #36]	; (8000ab0 <TIM3+0x94>)
 8000a8a:	f023 0302 	bic.w	r3, r3, #2
 8000a8e:	6013      	str	r3, [r2, #0]
		CLR_BIT(TIMER3_DIER,1);
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <TIM3+0x9c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <TIM3+0x9c>)
 8000a96:	f023 0302 	bic.w	r3, r3, #2
 8000a9a:	6013      	str	r3, [r2, #0]
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000034 	.word	0x20000034
 8000aa4:	40000410 	.word	0x40000410
 8000aa8:	40000434 	.word	0x40000434
 8000aac:	20000028 	.word	0x20000028
 8000ab0:	40000420 	.word	0x40000420
 8000ab4:	2000002c 	.word	0x2000002c
 8000ab8:	4000040c 	.word	0x4000040c

08000abc <HCSR04_Read>:
//	}
//	}
//}

void HCSR04_Read (void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	MGPIO_VidSetPinValue(GPIOA, PIN5, HIGH);  // pull the TRIG pin HIGH
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2105      	movs	r1, #5
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f7ff fc59 	bl	800037c <MGPIO_VidSetPinValue>
	_delay_us(10);  // wait for 10 us
 8000aca:	200a      	movs	r0, #10
 8000acc:	f7ff fb6c 	bl	80001a8 <_delay_us>
	MGPIO_VidSetPinValue(GPIOA, PIN5, LOW);  // pull the TRIG pin low
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2105      	movs	r1, #5
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f7ff fc51 	bl	800037c <MGPIO_VidSetPinValue>
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <main>:
int main(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0

	MRCC_VidInit();
 8000ae4:	f7ff fcdc 	bl	80004a0 <MRCC_VidInit>
	MRCC_VidEnablePeripheralClock(APB1_BUS, TIM2_RCC);
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2001      	movs	r0, #1
 8000aec:	f7ff fd0c 	bl	8000508 <MRCC_VidEnablePeripheralClock>
	MRCC_VidEnablePeripheralClock(APB1_BUS, TIM3_RCC);
 8000af0:	2101      	movs	r1, #1
 8000af2:	2001      	movs	r0, #1
 8000af4:	f7ff fd08 	bl	8000508 <MRCC_VidEnablePeripheralClock>
	MRCC_VidEnablePeripheralClock(APB2_BUS, GPIOA_RCC);
 8000af8:	2102      	movs	r1, #2
 8000afa:	2002      	movs	r0, #2
 8000afc:	f7ff fd04 	bl	8000508 <MRCC_VidEnablePeripheralClock>
	MRCC_VidEnablePeripheralClock(APB2_BUS, GPIOB_RCC);
 8000b00:	2103      	movs	r1, #3
 8000b02:	2002      	movs	r0, #2
 8000b04:	f7ff fd00 	bl	8000508 <MRCC_VidEnablePeripheralClock>

	//MNVIC_VidEnablePeripheral(TIM2_C);
	MNVIC_VidEnablePeripheral(TIM3_C);
 8000b08:	201d      	movs	r0, #29
 8000b0a:	f7ff fcb1 	bl	8000470 <MNVIC_VidEnablePeripheral>
	/*Echo*/
	MGPIO_VidSetPinDirection(GPIOA,PIN0,INPUT_FLOATING);
 8000b0e:	2204      	movs	r2, #4
 8000b10:	2100      	movs	r1, #0
 8000b12:	2000      	movs	r0, #0
 8000b14:	f7ff fb60 	bl	80001d8 <MGPIO_VidSetPinDirection>
	//Echo timer3
	MGPIO_VidSetPinDirection(GPIOA,PIN6,INPUT_FLOATING);
 8000b18:	2204      	movs	r2, #4
 8000b1a:	2106      	movs	r1, #6
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff fb5b 	bl	80001d8 <MGPIO_VidSetPinDirection>
	/*TIRG*/
	MGPIO_VidSetPinDirection(GPIOA, PIN5, OUTPUT_SPEED_10MHZ_PP);
 8000b22:	2201      	movs	r2, #1
 8000b24:	2105      	movs	r1, #5
 8000b26:	2000      	movs	r0, #0
 8000b28:	f7ff fb56 	bl	80001d8 <MGPIO_VidSetPinDirection>

	/*led*/
	MGPIO_VidSetPinDirection(GPIOA, PIN4, OUTPUT_SPEED_10MHZ_PP);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2104      	movs	r1, #4
 8000b30:	2000      	movs	r0, #0
 8000b32:	f7ff fb51 	bl	80001d8 <MGPIO_VidSetPinDirection>
	// Enable the clock for Timer 3

	Timer3_u8InputCaptureSetCallBack(&TIM3);
 8000b36:	4821      	ldr	r0, [pc, #132]	; (8000bbc <main+0xdc>)
 8000b38:	f7ff fd86 	bl	8000648 <Timer3_u8InputCaptureSetCallBack>
	CLCD_voidInit();
 8000b3c:	f7ff feac 	bl	8000898 <CLCD_voidInit>



	CLCD_voidSendData('B');
 8000b40:	2042      	movs	r0, #66	; 0x42
 8000b42:	f7ff fe2e 	bl	80007a2 <CLCD_voidSendData>
	_delay_ms(1000);
 8000b46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b4a:	f7ff fb11 	bl	8000170 <_delay_ms>
//	TIMER2_VoidInitInputCapture(Channle1);
//	TIMER3_VoidInitInputCapture(Channle1);
	/* Loop forever */
	for(;;){
		 Timer3_VoidSetPreload(0);
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f7ff fd8e 	bl	8000670 <Timer3_VoidSetPreload>

		HCSR04_Read();
 8000b54:	f7ff ffb2 	bl	8000abc <HCSR04_Read>
		CLCD_voidSendString("  ");
 8000b58:	4819      	ldr	r0, [pc, #100]	; (8000bc0 <main+0xe0>)
 8000b5a:	f7ff ff25 	bl	80009a8 <CLCD_voidSendString>
		CLCD_voidGoToXY(0, 0);
 8000b5e:	2100      	movs	r1, #0
 8000b60:	2000      	movs	r0, #0
 8000b62:	f7ff ff3d 	bl	80009e0 <CLCD_voidGoToXY>
		while(Is_First_Captured<2);
 8000b66:	bf00      	nop
 8000b68:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <main+0xe4>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d9fa      	bls.n	8000b68 <main+0x88>
		Difference = IC_Val2-IC_Val1;
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <main+0xe8>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <main+0xec>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	4a14      	ldr	r2, [pc, #80]	; (8000bd0 <main+0xf0>)
 8000b7e:	6013      	str	r3, [r2, #0]
		Distance = (Difference /58);
 8000b80:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <main+0xf0>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a13      	ldr	r2, [pc, #76]	; (8000bd4 <main+0xf4>)
 8000b86:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8a:	095b      	lsrs	r3, r3, #5
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <main+0xf8>)
 8000b90:	701a      	strb	r2, [r3, #0]

		CLCD_voidWriteNumber(Distance);
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <main+0xf8>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fec1 	bl	8000920 <CLCD_voidWriteNumber>
		Is_First_Captured=0;
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <main+0xe4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]

		_delay_ms(800);
 8000ba4:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000ba8:	f7ff fae2 	bl	8000170 <_delay_ms>
		SET_BIT(TIMER3_DIER,1);
 8000bac:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <main+0xfc>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <main+0xfc>)
 8000bb2:	f043 0302 	orr.w	r3, r3, #2
 8000bb6:	6013      	str	r3, [r2, #0]
		 Timer3_VoidSetPreload(0);
 8000bb8:	e7c9      	b.n	8000b4e <main+0x6e>
 8000bba:	bf00      	nop
 8000bbc:	08000a1d 	.word	0x08000a1d
 8000bc0:	08000c94 	.word	0x08000c94
 8000bc4:	20000034 	.word	0x20000034
 8000bc8:	2000002c 	.word	0x2000002c
 8000bcc:	20000028 	.word	0x20000028
 8000bd0:	20000030 	.word	0x20000030
 8000bd4:	8d3dcb09 	.word	0x8d3dcb09
 8000bd8:	20000035 	.word	0x20000035
 8000bdc:	4000040c 	.word	0x4000040c

08000be0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000be0:	480d      	ldr	r0, [pc, #52]	; (8000c18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000be2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000be4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bea:	490d      	ldr	r1, [pc, #52]	; (8000c20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bec:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <LoopForever+0xe>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf0:	e002      	b.n	8000bf8 <LoopCopyDataInit>

08000bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf6:	3304      	adds	r3, #4

08000bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bfc:	d3f9      	bcc.n	8000bf2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c00:	4c0a      	ldr	r4, [pc, #40]	; (8000c2c <LoopForever+0x16>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c04:	e001      	b.n	8000c0a <LoopFillZerobss>

08000c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c08:	3204      	adds	r2, #4

08000c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c0c:	d3fb      	bcc.n	8000c06 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c0e:	f000 f811 	bl	8000c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c12:	f7ff ff65 	bl	8000ae0 <main>

08000c16 <LoopForever>:

LoopForever:
  b LoopForever
 8000c16:	e7fe      	b.n	8000c16 <LoopForever>
  ldr   r0, =_estack
 8000c18:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c20:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000c24:	08000ca0 	.word	0x08000ca0
  ldr r2, =_sbss
 8000c28:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000c2c:	20000038 	.word	0x20000038

08000c30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c30:	e7fe      	b.n	8000c30 <ADC1_2_IRQHandler>
	...

08000c34 <__libc_init_array>:
 8000c34:	b570      	push	{r4, r5, r6, lr}
 8000c36:	2600      	movs	r6, #0
 8000c38:	4d0c      	ldr	r5, [pc, #48]	; (8000c6c <__libc_init_array+0x38>)
 8000c3a:	4c0d      	ldr	r4, [pc, #52]	; (8000c70 <__libc_init_array+0x3c>)
 8000c3c:	1b64      	subs	r4, r4, r5
 8000c3e:	10a4      	asrs	r4, r4, #2
 8000c40:	42a6      	cmp	r6, r4
 8000c42:	d109      	bne.n	8000c58 <__libc_init_array+0x24>
 8000c44:	f000 f81a 	bl	8000c7c <_init>
 8000c48:	2600      	movs	r6, #0
 8000c4a:	4d0a      	ldr	r5, [pc, #40]	; (8000c74 <__libc_init_array+0x40>)
 8000c4c:	4c0a      	ldr	r4, [pc, #40]	; (8000c78 <__libc_init_array+0x44>)
 8000c4e:	1b64      	subs	r4, r4, r5
 8000c50:	10a4      	asrs	r4, r4, #2
 8000c52:	42a6      	cmp	r6, r4
 8000c54:	d105      	bne.n	8000c62 <__libc_init_array+0x2e>
 8000c56:	bd70      	pop	{r4, r5, r6, pc}
 8000c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c5c:	4798      	blx	r3
 8000c5e:	3601      	adds	r6, #1
 8000c60:	e7ee      	b.n	8000c40 <__libc_init_array+0xc>
 8000c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c66:	4798      	blx	r3
 8000c68:	3601      	adds	r6, #1
 8000c6a:	e7f2      	b.n	8000c52 <__libc_init_array+0x1e>
 8000c6c:	08000c98 	.word	0x08000c98
 8000c70:	08000c98 	.word	0x08000c98
 8000c74:	08000c98 	.word	0x08000c98
 8000c78:	08000c9c 	.word	0x08000c9c

08000c7c <_init>:
 8000c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c7e:	bf00      	nop
 8000c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c82:	bc08      	pop	{r3}
 8000c84:	469e      	mov	lr, r3
 8000c86:	4770      	bx	lr

08000c88 <_fini>:
 8000c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c8a:	bf00      	nop
 8000c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c8e:	bc08      	pop	{r3}
 8000c90:	469e      	mov	lr, r3
 8000c92:	4770      	bx	lr


AutoParkingVersion1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001408  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001538  08001540  00011540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001538  08001538  00011540  2**0
                  CONTENTS
  4 .ARM          00000000  08001538  08001538  00011540  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001538  08001540  00011540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001538  08001538  00011538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800153c  0800153c  0001153c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000000  08001540  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08001540  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011540  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00011569  2**0
                  CONTENTS, READONLY
 13 .debug_info   000018d1  00000000  00000000  000115ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000aeb  00000000  00000000  00012e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000378  00000000  00000000  00013968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000026f  00000000  00000000  00013ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001a0f  00000000  00000000  00013f4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001c82  00000000  00000000  0001595e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000065e8  00000000  00000000  000175e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000ae0  00000000  00000000  0001dbc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0001e6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001520 	.word	0x08001520

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001520 	.word	0x08001520

08000170 <_delay_ms>:
#include"SYSTICK_INTERFACE.h"

#include"DELAY_INTERFACE.h"


void _delay_ms( u32 Copy_u32Time ){
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]

	MSTK_VidInit();
 8000178:	f000 fa88 	bl	800068c <MSTK_VidInit>
	/* Disable INT */
	MSTK_VidINTStatus( MSTK_INT_DIS );
 800017c:	2000      	movs	r0, #0
 800017e:	f000 faa9 	bl	80006d4 <MSTK_VidINTStatus>
	MSTK_VidStart( Copy_u32Time * 1000 );
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000188:	fb02 f303 	mul.w	r3, r2, r3
 800018c:	4618      	mov	r0, r3
 800018e:	f000 fa89 	bl	80006a4 <MSTK_VidStart>
	/* Wiat Flag Polling */
	while( MSTK_u8ReadFlag() == 0 );
 8000192:	bf00      	nop
 8000194:	f000 fab8 	bl	8000708 <MSTK_u8ReadFlag>
 8000198:	4603      	mov	r3, r0
 800019a:	2b00      	cmp	r3, #0
 800019c:	d0fa      	beq.n	8000194 <_delay_ms+0x24>

}
 800019e:	bf00      	nop
 80001a0:	bf00      	nop
 80001a2:	3708      	adds	r7, #8
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}

080001a8 <_delay_us>:


/* Suppose That The Clock System (AHB) = 8MHZ EXT & The Systick Clock Is = AHB/8 */
void _delay_us( u32 Copy_u32Time ){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]

	MSTK_VidInit();
 80001b0:	f000 fa6c 	bl	800068c <MSTK_VidInit>
	/* Disable INT */
	MSTK_VidINTStatus( MSTK_INT_DIS );
 80001b4:	2000      	movs	r0, #0
 80001b6:	f000 fa8d 	bl	80006d4 <MSTK_VidINTStatus>
	MSTK_VidStart( Copy_u32Time );
 80001ba:	6878      	ldr	r0, [r7, #4]
 80001bc:	f000 fa72 	bl	80006a4 <MSTK_VidStart>
	/* Wiat Flag Polling */
	while( MSTK_u8ReadFlag() == 0 );
 80001c0:	bf00      	nop
 80001c2:	f000 faa1 	bl	8000708 <MSTK_u8ReadFlag>
 80001c6:	4603      	mov	r3, r0
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d0fa      	beq.n	80001c2 <_delay_us+0x1a>

}
 80001cc:	bf00      	nop
 80001ce:	bf00      	nop
 80001d0:	3708      	adds	r7, #8
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}
	...

080001d8 <MGPIO_VidSetPinDirection>:

#include"GPIO_INTERFACE.h"
#include"GPIO_REG.h"


void MGPIO_VidSetPinDirection( u8 Copy_u8Port , u8 Copy_u8Pin , u8 u8Copy_u8Mode ){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
 80001e2:	460b      	mov	r3, r1
 80001e4:	71bb      	strb	r3, [r7, #6]
 80001e6:	4613      	mov	r3, r2
 80001e8:	717b      	strb	r3, [r7, #5]

	switch(Copy_u8Port){
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	2b02      	cmp	r3, #2
 80001ee:	d07a      	beq.n	80002e6 <MGPIO_VidSetPinDirection+0x10e>
 80001f0:	2b02      	cmp	r3, #2
 80001f2:	f300 80b1 	bgt.w	8000358 <MGPIO_VidSetPinDirection+0x180>
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d002      	beq.n	8000200 <MGPIO_VidSetPinDirection+0x28>
 80001fa:	2b01      	cmp	r3, #1
 80001fc:	d03a      	beq.n	8000274 <MGPIO_VidSetPinDirection+0x9c>
			MGPIOC->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
			MGPIOC->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
		}

		break;
	default :break;
 80001fe:	e0ab      	b.n	8000358 <MGPIO_VidSetPinDirection+0x180>
		if(Copy_u8Pin <= 7 ){//low
 8000200:	79bb      	ldrb	r3, [r7, #6]
 8000202:	2b07      	cmp	r3, #7
 8000204:	d817      	bhi.n	8000236 <MGPIO_VidSetPinDirection+0x5e>
			MGPIOA->CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ));// R M W
 8000206:	4b5a      	ldr	r3, [pc, #360]	; (8000370 <MGPIO_VidSetPinDirection+0x198>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	79ba      	ldrb	r2, [r7, #6]
 800020c:	0092      	lsls	r2, r2, #2
 800020e:	210f      	movs	r1, #15
 8000210:	fa01 f202 	lsl.w	r2, r1, r2
 8000214:	43d2      	mvns	r2, r2
 8000216:	4611      	mov	r1, r2
 8000218:	4a55      	ldr	r2, [pc, #340]	; (8000370 <MGPIO_VidSetPinDirection+0x198>)
 800021a:	400b      	ands	r3, r1
 800021c:	6013      	str	r3, [r2, #0]
			MGPIOA->CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 );
 800021e:	4b54      	ldr	r3, [pc, #336]	; (8000370 <MGPIO_VidSetPinDirection+0x198>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	7979      	ldrb	r1, [r7, #5]
 8000224:	79ba      	ldrb	r2, [r7, #6]
 8000226:	0092      	lsls	r2, r2, #2
 8000228:	fa01 f202 	lsl.w	r2, r1, r2
 800022c:	4611      	mov	r1, r2
 800022e:	4a50      	ldr	r2, [pc, #320]	; (8000370 <MGPIO_VidSetPinDirection+0x198>)
 8000230:	430b      	orrs	r3, r1
 8000232:	6013      	str	r3, [r2, #0]
		break;
 8000234:	e092      	b.n	800035c <MGPIO_VidSetPinDirection+0x184>
		}else if(Copy_u8Pin <=15 ){//high
 8000236:	79bb      	ldrb	r3, [r7, #6]
 8000238:	2b0f      	cmp	r3, #15
 800023a:	f200 808f 	bhi.w	800035c <MGPIO_VidSetPinDirection+0x184>
			Copy_u8Pin = Copy_u8Pin - 8;
 800023e:	79bb      	ldrb	r3, [r7, #6]
 8000240:	3b08      	subs	r3, #8
 8000242:	71bb      	strb	r3, [r7, #6]
			MGPIOA->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 8000244:	4b4a      	ldr	r3, [pc, #296]	; (8000370 <MGPIO_VidSetPinDirection+0x198>)
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	79ba      	ldrb	r2, [r7, #6]
 800024a:	0092      	lsls	r2, r2, #2
 800024c:	210f      	movs	r1, #15
 800024e:	fa01 f202 	lsl.w	r2, r1, r2
 8000252:	43d2      	mvns	r2, r2
 8000254:	4611      	mov	r1, r2
 8000256:	4a46      	ldr	r2, [pc, #280]	; (8000370 <MGPIO_VidSetPinDirection+0x198>)
 8000258:	400b      	ands	r3, r1
 800025a:	6053      	str	r3, [r2, #4]
			MGPIOA->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 );
 800025c:	4b44      	ldr	r3, [pc, #272]	; (8000370 <MGPIO_VidSetPinDirection+0x198>)
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	7979      	ldrb	r1, [r7, #5]
 8000262:	79ba      	ldrb	r2, [r7, #6]
 8000264:	0092      	lsls	r2, r2, #2
 8000266:	fa01 f202 	lsl.w	r2, r1, r2
 800026a:	4611      	mov	r1, r2
 800026c:	4a40      	ldr	r2, [pc, #256]	; (8000370 <MGPIO_VidSetPinDirection+0x198>)
 800026e:	430b      	orrs	r3, r1
 8000270:	6053      	str	r3, [r2, #4]
		break;
 8000272:	e073      	b.n	800035c <MGPIO_VidSetPinDirection+0x184>
		if(Copy_u8Pin <= 7 ){//low
 8000274:	79bb      	ldrb	r3, [r7, #6]
 8000276:	2b07      	cmp	r3, #7
 8000278:	d817      	bhi.n	80002aa <MGPIO_VidSetPinDirection+0xd2>
			MGPIOB->CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );// R M W
 800027a:	4b3e      	ldr	r3, [pc, #248]	; (8000374 <MGPIO_VidSetPinDirection+0x19c>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	79ba      	ldrb	r2, [r7, #6]
 8000280:	0092      	lsls	r2, r2, #2
 8000282:	210f      	movs	r1, #15
 8000284:	fa01 f202 	lsl.w	r2, r1, r2
 8000288:	43d2      	mvns	r2, r2
 800028a:	4611      	mov	r1, r2
 800028c:	4a39      	ldr	r2, [pc, #228]	; (8000374 <MGPIO_VidSetPinDirection+0x19c>)
 800028e:	400b      	ands	r3, r1
 8000290:	6013      	str	r3, [r2, #0]
			MGPIOB->CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 8000292:	4b38      	ldr	r3, [pc, #224]	; (8000374 <MGPIO_VidSetPinDirection+0x19c>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	7979      	ldrb	r1, [r7, #5]
 8000298:	79ba      	ldrb	r2, [r7, #6]
 800029a:	0092      	lsls	r2, r2, #2
 800029c:	fa01 f202 	lsl.w	r2, r1, r2
 80002a0:	4611      	mov	r1, r2
 80002a2:	4a34      	ldr	r2, [pc, #208]	; (8000374 <MGPIO_VidSetPinDirection+0x19c>)
 80002a4:	430b      	orrs	r3, r1
 80002a6:	6013      	str	r3, [r2, #0]
		break;
 80002a8:	e05a      	b.n	8000360 <MGPIO_VidSetPinDirection+0x188>
		}else if(Copy_u8Pin <=15 ){//high
 80002aa:	79bb      	ldrb	r3, [r7, #6]
 80002ac:	2b0f      	cmp	r3, #15
 80002ae:	d857      	bhi.n	8000360 <MGPIO_VidSetPinDirection+0x188>
			Copy_u8Pin = Copy_u8Pin - 8;
 80002b0:	79bb      	ldrb	r3, [r7, #6]
 80002b2:	3b08      	subs	r3, #8
 80002b4:	71bb      	strb	r3, [r7, #6]
			MGPIOB->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 80002b6:	4b2f      	ldr	r3, [pc, #188]	; (8000374 <MGPIO_VidSetPinDirection+0x19c>)
 80002b8:	685b      	ldr	r3, [r3, #4]
 80002ba:	79ba      	ldrb	r2, [r7, #6]
 80002bc:	0092      	lsls	r2, r2, #2
 80002be:	210f      	movs	r1, #15
 80002c0:	fa01 f202 	lsl.w	r2, r1, r2
 80002c4:	43d2      	mvns	r2, r2
 80002c6:	4611      	mov	r1, r2
 80002c8:	4a2a      	ldr	r2, [pc, #168]	; (8000374 <MGPIO_VidSetPinDirection+0x19c>)
 80002ca:	400b      	ands	r3, r1
 80002cc:	6053      	str	r3, [r2, #4]
			MGPIOB->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 80002ce:	4b29      	ldr	r3, [pc, #164]	; (8000374 <MGPIO_VidSetPinDirection+0x19c>)
 80002d0:	685b      	ldr	r3, [r3, #4]
 80002d2:	7979      	ldrb	r1, [r7, #5]
 80002d4:	79ba      	ldrb	r2, [r7, #6]
 80002d6:	0092      	lsls	r2, r2, #2
 80002d8:	fa01 f202 	lsl.w	r2, r1, r2
 80002dc:	4611      	mov	r1, r2
 80002de:	4a25      	ldr	r2, [pc, #148]	; (8000374 <MGPIO_VidSetPinDirection+0x19c>)
 80002e0:	430b      	orrs	r3, r1
 80002e2:	6053      	str	r3, [r2, #4]
		break;
 80002e4:	e03c      	b.n	8000360 <MGPIO_VidSetPinDirection+0x188>
		if(Copy_u8Pin <= 7 ){//low
 80002e6:	79bb      	ldrb	r3, [r7, #6]
 80002e8:	2b07      	cmp	r3, #7
 80002ea:	d817      	bhi.n	800031c <MGPIO_VidSetPinDirection+0x144>
			MGPIOC->CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );// R M W
 80002ec:	4b22      	ldr	r3, [pc, #136]	; (8000378 <MGPIO_VidSetPinDirection+0x1a0>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	79ba      	ldrb	r2, [r7, #6]
 80002f2:	0092      	lsls	r2, r2, #2
 80002f4:	210f      	movs	r1, #15
 80002f6:	fa01 f202 	lsl.w	r2, r1, r2
 80002fa:	43d2      	mvns	r2, r2
 80002fc:	4611      	mov	r1, r2
 80002fe:	4a1e      	ldr	r2, [pc, #120]	; (8000378 <MGPIO_VidSetPinDirection+0x1a0>)
 8000300:	400b      	ands	r3, r1
 8000302:	6013      	str	r3, [r2, #0]
			MGPIOC->CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 8000304:	4b1c      	ldr	r3, [pc, #112]	; (8000378 <MGPIO_VidSetPinDirection+0x1a0>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	7979      	ldrb	r1, [r7, #5]
 800030a:	79ba      	ldrb	r2, [r7, #6]
 800030c:	0092      	lsls	r2, r2, #2
 800030e:	fa01 f202 	lsl.w	r2, r1, r2
 8000312:	4611      	mov	r1, r2
 8000314:	4a18      	ldr	r2, [pc, #96]	; (8000378 <MGPIO_VidSetPinDirection+0x1a0>)
 8000316:	430b      	orrs	r3, r1
 8000318:	6013      	str	r3, [r2, #0]
		break;
 800031a:	e023      	b.n	8000364 <MGPIO_VidSetPinDirection+0x18c>
		}else if(Copy_u8Pin <=15 ){//high
 800031c:	79bb      	ldrb	r3, [r7, #6]
 800031e:	2b0f      	cmp	r3, #15
 8000320:	d820      	bhi.n	8000364 <MGPIO_VidSetPinDirection+0x18c>
			Copy_u8Pin = Copy_u8Pin - 8;
 8000322:	79bb      	ldrb	r3, [r7, #6]
 8000324:	3b08      	subs	r3, #8
 8000326:	71bb      	strb	r3, [r7, #6]
			MGPIOC->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 8000328:	4b13      	ldr	r3, [pc, #76]	; (8000378 <MGPIO_VidSetPinDirection+0x1a0>)
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	79ba      	ldrb	r2, [r7, #6]
 800032e:	0092      	lsls	r2, r2, #2
 8000330:	210f      	movs	r1, #15
 8000332:	fa01 f202 	lsl.w	r2, r1, r2
 8000336:	43d2      	mvns	r2, r2
 8000338:	4611      	mov	r1, r2
 800033a:	4a0f      	ldr	r2, [pc, #60]	; (8000378 <MGPIO_VidSetPinDirection+0x1a0>)
 800033c:	400b      	ands	r3, r1
 800033e:	6053      	str	r3, [r2, #4]
			MGPIOC->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 8000340:	4b0d      	ldr	r3, [pc, #52]	; (8000378 <MGPIO_VidSetPinDirection+0x1a0>)
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	7979      	ldrb	r1, [r7, #5]
 8000346:	79ba      	ldrb	r2, [r7, #6]
 8000348:	0092      	lsls	r2, r2, #2
 800034a:	fa01 f202 	lsl.w	r2, r1, r2
 800034e:	4611      	mov	r1, r2
 8000350:	4a09      	ldr	r2, [pc, #36]	; (8000378 <MGPIO_VidSetPinDirection+0x1a0>)
 8000352:	430b      	orrs	r3, r1
 8000354:	6053      	str	r3, [r2, #4]
		break;
 8000356:	e005      	b.n	8000364 <MGPIO_VidSetPinDirection+0x18c>
	default :break;
 8000358:	bf00      	nop
 800035a:	e004      	b.n	8000366 <MGPIO_VidSetPinDirection+0x18e>
		break;
 800035c:	bf00      	nop
 800035e:	e002      	b.n	8000366 <MGPIO_VidSetPinDirection+0x18e>
		break;
 8000360:	bf00      	nop
 8000362:	e000      	b.n	8000366 <MGPIO_VidSetPinDirection+0x18e>
		break;
 8000364:	bf00      	nop
	}

}
 8000366:	bf00      	nop
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr
 8000370:	40010800 	.word	0x40010800
 8000374:	40010c00 	.word	0x40010c00
 8000378:	40011000 	.word	0x40011000

0800037c <MGPIO_VidSetPinValue>:

void MGPIO_VidSetPinValue( u8 Copy_u8Port , u8 Copy_u8Pin , u8 u8Copy_u8Value ){
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	4603      	mov	r3, r0
 8000384:	71fb      	strb	r3, [r7, #7]
 8000386:	460b      	mov	r3, r1
 8000388:	71bb      	strb	r3, [r7, #6]
 800038a:	4613      	mov	r3, r2
 800038c:	717b      	strb	r3, [r7, #5]

	switch(Copy_u8Port){
 800038e:	79fb      	ldrb	r3, [r7, #7]
 8000390:	2b02      	cmp	r3, #2
 8000392:	d040      	beq.n	8000416 <MGPIO_VidSetPinValue+0x9a>
 8000394:	2b02      	cmp	r3, #2
 8000396:	dc60      	bgt.n	800045a <MGPIO_VidSetPinValue+0xde>
 8000398:	2b00      	cmp	r3, #0
 800039a:	d002      	beq.n	80003a2 <MGPIO_VidSetPinValue+0x26>
 800039c:	2b01      	cmp	r3, #1
 800039e:	d01d      	beq.n	80003dc <MGPIO_VidSetPinValue+0x60>

		break;

	}

}
 80003a0:	e05b      	b.n	800045a <MGPIO_VidSetPinValue+0xde>
		if( u8Copy_u8Value == HIGH ){
 80003a2:	797b      	ldrb	r3, [r7, #5]
 80003a4:	2b01      	cmp	r3, #1
 80003a6:	d10a      	bne.n	80003be <MGPIO_VidSetPinValue+0x42>
			SET_BIT( MGPIOA->ODR , Copy_u8Pin );
 80003a8:	4b2e      	ldr	r3, [pc, #184]	; (8000464 <MGPIO_VidSetPinValue+0xe8>)
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	79ba      	ldrb	r2, [r7, #6]
 80003ae:	2101      	movs	r1, #1
 80003b0:	fa01 f202 	lsl.w	r2, r1, r2
 80003b4:	4611      	mov	r1, r2
 80003b6:	4a2b      	ldr	r2, [pc, #172]	; (8000464 <MGPIO_VidSetPinValue+0xe8>)
 80003b8:	430b      	orrs	r3, r1
 80003ba:	60d3      	str	r3, [r2, #12]
		break;
 80003bc:	e048      	b.n	8000450 <MGPIO_VidSetPinValue+0xd4>
		}else if( u8Copy_u8Value == LOW ){
 80003be:	797b      	ldrb	r3, [r7, #5]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d145      	bne.n	8000450 <MGPIO_VidSetPinValue+0xd4>
			CLR_BIT( MGPIOA->ODR , Copy_u8Pin );
 80003c4:	4b27      	ldr	r3, [pc, #156]	; (8000464 <MGPIO_VidSetPinValue+0xe8>)
 80003c6:	68db      	ldr	r3, [r3, #12]
 80003c8:	79ba      	ldrb	r2, [r7, #6]
 80003ca:	2101      	movs	r1, #1
 80003cc:	fa01 f202 	lsl.w	r2, r1, r2
 80003d0:	43d2      	mvns	r2, r2
 80003d2:	4611      	mov	r1, r2
 80003d4:	4a23      	ldr	r2, [pc, #140]	; (8000464 <MGPIO_VidSetPinValue+0xe8>)
 80003d6:	400b      	ands	r3, r1
 80003d8:	60d3      	str	r3, [r2, #12]
		break;
 80003da:	e039      	b.n	8000450 <MGPIO_VidSetPinValue+0xd4>
		if( u8Copy_u8Value == HIGH ){
 80003dc:	797b      	ldrb	r3, [r7, #5]
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d10a      	bne.n	80003f8 <MGPIO_VidSetPinValue+0x7c>
			SET_BIT( MGPIOB->ODR , Copy_u8Pin );
 80003e2:	4b21      	ldr	r3, [pc, #132]	; (8000468 <MGPIO_VidSetPinValue+0xec>)
 80003e4:	68db      	ldr	r3, [r3, #12]
 80003e6:	79ba      	ldrb	r2, [r7, #6]
 80003e8:	2101      	movs	r1, #1
 80003ea:	fa01 f202 	lsl.w	r2, r1, r2
 80003ee:	4611      	mov	r1, r2
 80003f0:	4a1d      	ldr	r2, [pc, #116]	; (8000468 <MGPIO_VidSetPinValue+0xec>)
 80003f2:	430b      	orrs	r3, r1
 80003f4:	60d3      	str	r3, [r2, #12]
		break;
 80003f6:	e02d      	b.n	8000454 <MGPIO_VidSetPinValue+0xd8>
		}else if( u8Copy_u8Value == LOW ){
 80003f8:	797b      	ldrb	r3, [r7, #5]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d12a      	bne.n	8000454 <MGPIO_VidSetPinValue+0xd8>
			CLR_BIT( MGPIOB->ODR , Copy_u8Pin );
 80003fe:	4b1a      	ldr	r3, [pc, #104]	; (8000468 <MGPIO_VidSetPinValue+0xec>)
 8000400:	68db      	ldr	r3, [r3, #12]
 8000402:	79ba      	ldrb	r2, [r7, #6]
 8000404:	2101      	movs	r1, #1
 8000406:	fa01 f202 	lsl.w	r2, r1, r2
 800040a:	43d2      	mvns	r2, r2
 800040c:	4611      	mov	r1, r2
 800040e:	4a16      	ldr	r2, [pc, #88]	; (8000468 <MGPIO_VidSetPinValue+0xec>)
 8000410:	400b      	ands	r3, r1
 8000412:	60d3      	str	r3, [r2, #12]
		break;
 8000414:	e01e      	b.n	8000454 <MGPIO_VidSetPinValue+0xd8>
		if( u8Copy_u8Value == HIGH ){
 8000416:	797b      	ldrb	r3, [r7, #5]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d10a      	bne.n	8000432 <MGPIO_VidSetPinValue+0xb6>
			SET_BIT( MGPIOC->ODR , Copy_u8Pin );
 800041c:	4b13      	ldr	r3, [pc, #76]	; (800046c <MGPIO_VidSetPinValue+0xf0>)
 800041e:	68db      	ldr	r3, [r3, #12]
 8000420:	79ba      	ldrb	r2, [r7, #6]
 8000422:	2101      	movs	r1, #1
 8000424:	fa01 f202 	lsl.w	r2, r1, r2
 8000428:	4611      	mov	r1, r2
 800042a:	4a10      	ldr	r2, [pc, #64]	; (800046c <MGPIO_VidSetPinValue+0xf0>)
 800042c:	430b      	orrs	r3, r1
 800042e:	60d3      	str	r3, [r2, #12]
		break;
 8000430:	e012      	b.n	8000458 <MGPIO_VidSetPinValue+0xdc>
		}else if( u8Copy_u8Value == LOW ){
 8000432:	797b      	ldrb	r3, [r7, #5]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d10f      	bne.n	8000458 <MGPIO_VidSetPinValue+0xdc>
			CLR_BIT( MGPIOC->ODR , Copy_u8Pin );
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <MGPIO_VidSetPinValue+0xf0>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	79ba      	ldrb	r2, [r7, #6]
 800043e:	2101      	movs	r1, #1
 8000440:	fa01 f202 	lsl.w	r2, r1, r2
 8000444:	43d2      	mvns	r2, r2
 8000446:	4611      	mov	r1, r2
 8000448:	4a08      	ldr	r2, [pc, #32]	; (800046c <MGPIO_VidSetPinValue+0xf0>)
 800044a:	400b      	ands	r3, r1
 800044c:	60d3      	str	r3, [r2, #12]
		break;
 800044e:	e003      	b.n	8000458 <MGPIO_VidSetPinValue+0xdc>
		break;
 8000450:	bf00      	nop
 8000452:	e002      	b.n	800045a <MGPIO_VidSetPinValue+0xde>
		break;
 8000454:	bf00      	nop
 8000456:	e000      	b.n	800045a <MGPIO_VidSetPinValue+0xde>
		break;
 8000458:	bf00      	nop
}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr
 8000464:	40010800 	.word	0x40010800
 8000468:	40010c00 	.word	0x40010c00
 800046c:	40011000 	.word	0x40011000

08000470 <MOTORS_Void_MotorInit>:
#include "MOTOR_config.h"
#include "MOTOR_private.h"


void MOTORS_Void_MotorInit()
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	/**************** RF MOTOR PINS ****************************/
	MGPIO_VidSetPinDirection(MOTOR_RF_IN1_PORT , MOTOR_RF_IN1_PIN , OUTPUT_SPEED_10MHZ_PP);
 8000474:	2201      	movs	r2, #1
 8000476:	210e      	movs	r1, #14
 8000478:	2001      	movs	r0, #1
 800047a:	f7ff fead 	bl	80001d8 <MGPIO_VidSetPinDirection>
	MGPIO_VidSetPinDirection(MOTOR_RF_IN2_PORT , MOTOR_RF_IN2_PIN , OUTPUT_SPEED_10MHZ_PP);
 800047e:	2201      	movs	r2, #1
 8000480:	210f      	movs	r1, #15
 8000482:	2001      	movs	r0, #1
 8000484:	f7ff fea8 	bl	80001d8 <MGPIO_VidSetPinDirection>

	/********************** RF ENABLE PINS as alternating ******************/
	MGPIO_VidSetPinDirection(MOTOR_RF_ENA_PORT , MOTOR_RF_ENA_PIN , OUTPUT_SPEED_10MHZ_AFPP);
 8000488:	2209      	movs	r2, #9
 800048a:	2108      	movs	r1, #8
 800048c:	2001      	movs	r0, #1
 800048e:	f7ff fea3 	bl	80001d8 <MGPIO_VidSetPinDirection>
//	MGPIO_VidSetPinDirection(MOTOR_RF_ENA_PORT , MOTOR_RF_ENA_PIN , OUTPUT_SPEED_10MHZ_PP);



	/**************** LF MOTOR PINS ****************************/
	MGPIO_VidSetPinDirection(MOTOR_LF_IN1_PORT , MOTOR_LF_IN1_PIN , OUTPUT_SPEED_10MHZ_PP);
 8000492:	2201      	movs	r2, #1
 8000494:	210c      	movs	r1, #12
 8000496:	2001      	movs	r0, #1
 8000498:	f7ff fe9e 	bl	80001d8 <MGPIO_VidSetPinDirection>
	MGPIO_VidSetPinDirection(MOTOR_LF_IN2_PORT , MOTOR_LF_IN2_PIN , OUTPUT_SPEED_10MHZ_PP);
 800049c:	2201      	movs	r2, #1
 800049e:	210d      	movs	r1, #13
 80004a0:	2001      	movs	r0, #1
 80004a2:	f7ff fe99 	bl	80001d8 <MGPIO_VidSetPinDirection>

	/********************** LF ENABLE PINS as alternating ******************/
	MGPIO_VidSetPinDirection(MOTOR_LF_ENA_PORT , MOTOR_LF_ENA_PIN , OUTPUT_SPEED_10MHZ_AFPP);
 80004a6:	2209      	movs	r2, #9
 80004a8:	2109      	movs	r1, #9
 80004aa:	2001      	movs	r0, #1
 80004ac:	f7ff fe94 	bl	80001d8 <MGPIO_VidSetPinDirection>


	/*************************TIMERS INTIALZATION *****************/

	/* To Initiate PWM Channel 2 & 3 (TIMER2) */
	TIMER4_Void_PwmInit(TIMER4_CHANNEL3);
 80004b0:	2003      	movs	r0, #3
 80004b2:	f000 fc37 	bl	8000d24 <TIMER4_Void_PwmInit>
	TIMER4_Void_PwmInit(TIMER4_CHANNEL4);
 80004b6:	2004      	movs	r0, #4
 80004b8:	f000 fc34 	bl	8000d24 <TIMER4_Void_PwmInit>

//	TIMER4_Void_PwmStart();


	/* To Initiate PWM Channel 1 & 2 (TIMER4) */
	TIMER4_Void_PwmInit(TIMER4_CHANNEL1);
 80004bc:	2001      	movs	r0, #1
 80004be:	f000 fc31 	bl	8000d24 <TIMER4_Void_PwmInit>
	TIMER4_Void_PwmInit(TIMER4_CHANNEL2);
 80004c2:	2002      	movs	r0, #2
 80004c4:	f000 fc2e 	bl	8000d24 <TIMER4_Void_PwmInit>

//	TIMER4_Void_PwmStart();

}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}

080004cc <MOTOR_RF_Void_MotorSetSpeed>:




void MOTOR_RF_Void_MotorSetSpeed(u32 Copy_U32_Speed)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	TIMER4_Void_PwmSetDutyCycle(TIMER4_CHANNEL3,Copy_U32_Speed);
 80004d4:	6879      	ldr	r1, [r7, #4]
 80004d6:	2003      	movs	r0, #3
 80004d8:	f000 fcec 	bl	8000eb4 <TIMER4_Void_PwmSetDutyCycle>

}
 80004dc:	bf00      	nop
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <MOTOR_RF_GO_FORWARD>:
void MOTOR_RF_GO_FORWARD ()
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	MGPIO_VidSetPinValue(MOTOR_RF_IN1_PORT , MOTOR_RF_IN1_PIN , HIGH);
 80004e8:	2201      	movs	r2, #1
 80004ea:	210e      	movs	r1, #14
 80004ec:	2001      	movs	r0, #1
 80004ee:	f7ff ff45 	bl	800037c <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(MOTOR_RF_IN2_PORT , MOTOR_RF_IN2_PIN , LOW);
 80004f2:	2200      	movs	r2, #0
 80004f4:	210f      	movs	r1, #15
 80004f6:	2001      	movs	r0, #1
 80004f8:	f7ff ff40 	bl	800037c <MGPIO_VidSetPinValue>
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}

08000500 <MOTOR_RF_STOP>:
	MGPIO_VidSetPinValue(MOTOR_RF_IN1_PORT , MOTOR_RF_IN1_PIN , LOW);
	MGPIO_VidSetPinValue(MOTOR_RF_IN2_PORT , MOTOR_RF_IN2_PIN , HIGH);
}

void MOTOR_RF_STOP()
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	MGPIO_VidSetPinValue(MOTOR_RF_IN1_PORT , MOTOR_RF_IN1_PIN , HIGH);
 8000504:	2201      	movs	r2, #1
 8000506:	210e      	movs	r1, #14
 8000508:	2001      	movs	r0, #1
 800050a:	f7ff ff37 	bl	800037c <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(MOTOR_RF_IN2_PORT , MOTOR_RF_IN2_PIN , HIGH);
 800050e:	2201      	movs	r2, #1
 8000510:	210f      	movs	r1, #15
 8000512:	2001      	movs	r0, #1
 8000514:	f7ff ff32 	bl	800037c <MGPIO_VidSetPinValue>
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}

0800051c <MOTOR_LF_Void_MotorSetSpeed>:




void MOTOR_LF_Void_MotorSetSpeed(u32 Copy_U32_Speed)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	TIMER4_Void_PwmSetDutyCycle(TIMER4_CHANNEL4,Copy_U32_Speed);
 8000524:	6879      	ldr	r1, [r7, #4]
 8000526:	2004      	movs	r0, #4
 8000528:	f000 fcc4 	bl	8000eb4 <TIMER4_Void_PwmSetDutyCycle>
}
 800052c:	bf00      	nop
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <MOTOR_LF_GO_FORWARD>:
void MOTOR_LF_GO_FORWARD ()
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	MGPIO_VidSetPinValue(MOTOR_LF_IN1_PORT , MOTOR_LF_IN1_PIN , HIGH);
 8000538:	2201      	movs	r2, #1
 800053a:	210c      	movs	r1, #12
 800053c:	2001      	movs	r0, #1
 800053e:	f7ff ff1d 	bl	800037c <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(MOTOR_LF_IN2_PORT , MOTOR_LF_IN2_PIN , LOW);
 8000542:	2200      	movs	r2, #0
 8000544:	210d      	movs	r1, #13
 8000546:	2001      	movs	r0, #1
 8000548:	f7ff ff18 	bl	800037c <MGPIO_VidSetPinValue>
}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}

08000550 <MOTOR_LF_STOP>:
	MGPIO_VidSetPinValue(MOTOR_LF_IN1_PORT , MOTOR_LF_IN1_PIN , LOW);
	MGPIO_VidSetPinValue(MOTOR_LF_IN2_PORT , MOTOR_LF_IN2_PIN , HIGH);
}

void MOTOR_LF_STOP()
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0

	MGPIO_VidSetPinValue(MOTOR_LF_IN1_PORT , MOTOR_LF_IN1_PIN , LOW);
 8000554:	2200      	movs	r2, #0
 8000556:	210c      	movs	r1, #12
 8000558:	2001      	movs	r0, #1
 800055a:	f7ff ff0f 	bl	800037c <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(MOTOR_LF_IN2_PORT , MOTOR_LF_IN2_PIN , LOW);
 800055e:	2200      	movs	r2, #0
 8000560:	210d      	movs	r1, #13
 8000562:	2001      	movs	r0, #1
 8000564:	f7ff ff0a 	bl	800037c <MGPIO_VidSetPinValue>
}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}

0800056c <MNVIC_VidEnablePeripheral>:

#include"NVIC_INTERFACE.h"
#include"NVIC_REG.h"


void MNVIC_VidEnablePeripheral ( u8 Copy_u8INTID ){
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]

	MNVIC->ISER[ Copy_u8INTID / 32 ] = 1 << ( Copy_u8INTID % 32 ) ;
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	f003 031f 	and.w	r3, r3, #31
 800057c:	2201      	movs	r2, #1
 800057e:	fa02 f103 	lsl.w	r1, r2, r3
 8000582:	4a05      	ldr	r2, [pc, #20]	; (8000598 <MNVIC_VidEnablePeripheral+0x2c>)
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	095b      	lsrs	r3, r3, #5
 8000588:	b2db      	uxtb	r3, r3
 800058a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	e000e100 	.word	0xe000e100

0800059c <MRCC_VidInit>:
#include"RCC_CONFG.h"
#include"ERROR_STATUS.h"
#include"RCC_PRIVATE.h"
#include"RCC_REG.h"

void MRCC_VidInit( void ){
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0

	u32 LOC_u32TimeOut = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]

	#elif CLOCK_TYPE == HSE

		/* BIT 1:0 -> Choose Between HSI OR HSE OR PLL */
		/* HSE Selected As A System Clock */
		SET_BIT( MRCC->CFGR , 0  );
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <MRCC_VidInit+0x60>)
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	4a14      	ldr	r2, [pc, #80]	; (80005fc <MRCC_VidInit+0x60>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6053      	str	r3, [r2, #4]
		CLR_BIT( MRCC->CFGR , 1  );
 80005b2:	4b12      	ldr	r3, [pc, #72]	; (80005fc <MRCC_VidInit+0x60>)
 80005b4:	685b      	ldr	r3, [r3, #4]
 80005b6:	4a11      	ldr	r2, [pc, #68]	; (80005fc <MRCC_VidInit+0x60>)
 80005b8:	f023 0302 	bic.w	r3, r3, #2
 80005bc:	6053      	str	r3, [r2, #4]
		/* Bit 16 -> Enable The HSE Clock */
		SET_BIT( MRCC->CR   , 16 );
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <MRCC_VidInit+0x60>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <MRCC_VidInit+0x60>)
 80005c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005c8:	6013      	str	r3, [r2, #0]
		/* Bit 17 -> Checking While The HSE Clock Is Stable */
		while( ( ( GET_BIT( MRCC->CR , 17 ) ) == 0 ) && ( LOC_u32TimeOut < 100000 ) ){ LOC_u32TimeOut++; }
 80005ca:	e002      	b.n	80005d2 <MRCC_VidInit+0x36>
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	3301      	adds	r3, #1
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <MRCC_VidInit+0x60>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d103      	bne.n	80005e6 <MRCC_VidInit+0x4a>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a07      	ldr	r2, [pc, #28]	; (8000600 <MRCC_VidInit+0x64>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d9f2      	bls.n	80005cc <MRCC_VidInit+0x30>

		SET_BIT( MRCC->CR , 19 );

	#elif CLOCK_SECURITY_SYSTEM == DISABLE_CLOCK_SECURITY_SYSTEM

		CLR_BIT( MRCC->CR , 19 );
 80005e6:	4b05      	ldr	r3, [pc, #20]	; (80005fc <MRCC_VidInit+0x60>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a04      	ldr	r2, [pc, #16]	; (80005fc <MRCC_VidInit+0x60>)
 80005ec:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80005f0:	6013      	str	r3, [r2, #0]

		#warning " Wrong Clock Security System Configuration Choice "

	#endif

}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	40021000 	.word	0x40021000
 8000600:	0001869f 	.word	0x0001869f

08000604 <MRCC_VidEnablePeripheralClock>:

void MRCC_VidEnablePeripheralClock( u8 Copy_u8PeripheralBus , u8 Copy_u8Peripheral ){
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	460a      	mov	r2, r1
 800060e:	71fb      	strb	r3, [r7, #7]
 8000610:	4613      	mov	r3, r2
 8000612:	71bb      	strb	r3, [r7, #6]


		switch( Copy_u8PeripheralBus ){
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	2b02      	cmp	r3, #2
 8000618:	d01c      	beq.n	8000654 <MRCC_VidEnablePeripheralClock+0x50>
 800061a:	2b02      	cmp	r3, #2
 800061c:	dc25      	bgt.n	800066a <MRCC_VidEnablePeripheralClock+0x66>
 800061e:	2b00      	cmp	r3, #0
 8000620:	d002      	beq.n	8000628 <MRCC_VidEnablePeripheralClock+0x24>
 8000622:	2b01      	cmp	r3, #1
 8000624:	d00b      	beq.n	800063e <MRCC_VidEnablePeripheralClock+0x3a>
			case APB2_BUS : SET_BIT( MRCC->APB2ENR , Copy_u8Peripheral ); break;

		}


}
 8000626:	e020      	b.n	800066a <MRCC_VidEnablePeripheralClock+0x66>
			case AHB_BUS  : SET_BIT( MRCC->AHBENR  , Copy_u8Peripheral ); break;
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <MRCC_VidEnablePeripheralClock+0x70>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	79ba      	ldrb	r2, [r7, #6]
 800062e:	2101      	movs	r1, #1
 8000630:	fa01 f202 	lsl.w	r2, r1, r2
 8000634:	4611      	mov	r1, r2
 8000636:	4a0f      	ldr	r2, [pc, #60]	; (8000674 <MRCC_VidEnablePeripheralClock+0x70>)
 8000638:	430b      	orrs	r3, r1
 800063a:	6153      	str	r3, [r2, #20]
 800063c:	e015      	b.n	800066a <MRCC_VidEnablePeripheralClock+0x66>
			case APB1_BUS :	SET_BIT( MRCC->APB1ENR , Copy_u8Peripheral ); break;
 800063e:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <MRCC_VidEnablePeripheralClock+0x70>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	79ba      	ldrb	r2, [r7, #6]
 8000644:	2101      	movs	r1, #1
 8000646:	fa01 f202 	lsl.w	r2, r1, r2
 800064a:	4611      	mov	r1, r2
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <MRCC_VidEnablePeripheralClock+0x70>)
 800064e:	430b      	orrs	r3, r1
 8000650:	61d3      	str	r3, [r2, #28]
 8000652:	e00a      	b.n	800066a <MRCC_VidEnablePeripheralClock+0x66>
			case APB2_BUS : SET_BIT( MRCC->APB2ENR , Copy_u8Peripheral ); break;
 8000654:	4b07      	ldr	r3, [pc, #28]	; (8000674 <MRCC_VidEnablePeripheralClock+0x70>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	79ba      	ldrb	r2, [r7, #6]
 800065a:	2101      	movs	r1, #1
 800065c:	fa01 f202 	lsl.w	r2, r1, r2
 8000660:	4611      	mov	r1, r2
 8000662:	4a04      	ldr	r2, [pc, #16]	; (8000674 <MRCC_VidEnablePeripheralClock+0x70>)
 8000664:	430b      	orrs	r3, r1
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	bf00      	nop
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr
 8000674:	40021000 	.word	0x40021000

08000678 <SysTick_Handler>:
#include"SYSTICK_INTERFACE.h"
#include"SYSTICK_REG.h"

void ( * MSTK_CallBack ) ( void );

void SysTick_Handler(void){
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0

	MSTK_CallBack();
 800067c:	4b02      	ldr	r3, [pc, #8]	; (8000688 <SysTick_Handler+0x10>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4798      	blx	r3

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	2000001c 	.word	0x2000001c

0800068c <MSTK_VidInit>:
void MSTK_VidSetCallBack( void (*ptr)(void) ){

	MSTK_CallBack = ptr;
}

void MSTK_VidInit( void ){
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0

	// Enable Systick Interrupt  -  Clock = AHB / 8 - Stop Systic
	MSTK->CTRL = 0x00000002;
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <MSTK_VidInit+0x14>)
 8000692:	2202      	movs	r2, #2
 8000694:	601a      	str	r2, [r3, #0]

}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	e000e010 	.word	0xe000e010

080006a4 <MSTK_VidStart>:


void MSTK_VidStart( u32 Copy_PreloadValue ){
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]

	// AHB = EXT = 8MHZ & CLOCK OF MSTK = AHB / 8 = 8MHZ / 8 = 1MHZ = 1 Micro For Each Count
	//Load Reload Value
	MSTK->LOAD = Copy_PreloadValue - 1;
 80006ac:	4a08      	ldr	r2, [pc, #32]	; (80006d0 <MSTK_VidStart+0x2c>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	3b01      	subs	r3, #1
 80006b2:	6053      	str	r3, [r2, #4]
	//Clear Val Register
	MSTK->VAL  = 0 ;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MSTK_VidStart+0x2c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
	//Enable Systick
	SET_BIT( MSTK->CTRL , 0 );
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <MSTK_VidStart+0x2c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <MSTK_VidStart+0x2c>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6013      	str	r3, [r2, #0]

}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr
 80006d0:	e000e010 	.word	0xe000e010

080006d4 <MSTK_VidINTStatus>:

void MSTK_VidINTStatus( u8 Copy_u8Status ){
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]

	 MSTK->CTRL &= ~( 1 << 1 );
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MSTK_VidINTStatus+0x30>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a08      	ldr	r2, [pc, #32]	; (8000704 <MSTK_VidINTStatus+0x30>)
 80006e4:	f023 0302 	bic.w	r3, r3, #2
 80006e8:	6013      	str	r3, [r2, #0]
	 MSTK->CTRL |=  ( Copy_u8Status << 1 );
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MSTK_VidINTStatus+0x30>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	79fa      	ldrb	r2, [r7, #7]
 80006f0:	0052      	lsls	r2, r2, #1
 80006f2:	4611      	mov	r1, r2
 80006f4:	4a03      	ldr	r2, [pc, #12]	; (8000704 <MSTK_VidINTStatus+0x30>)
 80006f6:	430b      	orrs	r3, r1
 80006f8:	6013      	str	r3, [r2, #0]

}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr
 8000704:	e000e010 	.word	0xe000e010

08000708 <MSTK_u8ReadFlag>:

u8 MSTK_u8ReadFlag( void ){
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

	return ( GET_BIT( MSTK->CTRL , 16 ) );
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <MSTK_u8ReadFlag+0x1c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	0c1b      	lsrs	r3, r3, #16
 8000712:	b2db      	uxtb	r3, r3
 8000714:	f003 0301 	and.w	r3, r3, #1
 8000718:	b2db      	uxtb	r3, r3

}
 800071a:	4618      	mov	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000e010 	.word	0xe000e010

08000728 <TIMER2_VoidInitInputCapture>:

/*Global pointer to function to hold the callback function address*/
static void (*TIMER2_pvInputCaptureCallBackFunc)(void) = NULL;

void TIMER2_VoidInitInputCapture(u8 Copy_ChannleNumber)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]

	//prescaler for 8Mhz
	TIMER2_PSC=8-1;
 8000732:	4b2b      	ldr	r3, [pc, #172]	; (80007e0 <TIMER2_VoidInitInputCapture+0xb8>)
 8000734:	2207      	movs	r2, #7
 8000736:	601a      	str	r2, [r3, #0]

	TIMER2_CNT=0;
 8000738:	4b2a      	ldr	r3, [pc, #168]	; (80007e4 <TIMER2_VoidInitInputCapture+0xbc>)
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]

	//configure input capture for selected channle
	switch(Copy_ChannleNumber)
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d002      	beq.n	800074a <TIMER2_VoidInitInputCapture+0x22>
 8000744:	2b01      	cmp	r3, #1
 8000746:	d01f      	beq.n	8000788 <TIMER2_VoidInitInputCapture+0x60>
 8000748:	e03d      	b.n	80007c6 <TIMER2_VoidInitInputCapture+0x9e>
	{
	case Channle1:

		//CC1s channel is configured as input, IC1 is mapped on TI1
		SET_BIT(TIMER2_CCMR1,0);
 800074a:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <TIMER2_VoidInitInputCapture+0xc0>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a26      	ldr	r2, [pc, #152]	; (80007e8 <TIMER2_VoidInitInputCapture+0xc0>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6013      	str	r3, [r2, #0]
		CLR_BIT(TIMER2_CCMR1,1);
 8000756:	4b24      	ldr	r3, [pc, #144]	; (80007e8 <TIMER2_VoidInitInputCapture+0xc0>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a23      	ldr	r2, [pc, #140]	; (80007e8 <TIMER2_VoidInitInputCapture+0xc0>)
 800075c:	f023 0302 	bic.w	r3, r3, #2
 8000760:	6013      	str	r3, [r2, #0]
		// Enable capture on each channel
		SET_BIT(TIMER2_CCER,0);
 8000762:	4b22      	ldr	r3, [pc, #136]	; (80007ec <TIMER2_VoidInitInputCapture+0xc4>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a21      	ldr	r2, [pc, #132]	; (80007ec <TIMER2_VoidInitInputCapture+0xc4>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6013      	str	r3, [r2, #0]
		CLR_BIT(TIMER2_CCER,1);
 800076e:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <TIMER2_VoidInitInputCapture+0xc4>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a1e      	ldr	r2, [pc, #120]	; (80007ec <TIMER2_VoidInitInputCapture+0xc4>)
 8000774:	f023 0302 	bic.w	r3, r3, #2
 8000778:	6013      	str	r3, [r2, #0]


		// Enable capture interrupt on each channel
		SET_BIT(TIMER2_DIER,1);
 800077a:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <TIMER2_VoidInitInputCapture+0xc8>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a1c      	ldr	r2, [pc, #112]	; (80007f0 <TIMER2_VoidInitInputCapture+0xc8>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	6013      	str	r3, [r2, #0]
		break;
 8000786:	e01e      	b.n	80007c6 <TIMER2_VoidInitInputCapture+0x9e>
	case Channle2:

		//CC2 channel is configured as input, IC2 is mapped on TI2
		SET_BIT(TIMER2_CCMR1,8);
 8000788:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <TIMER2_VoidInitInputCapture+0xc0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a16      	ldr	r2, [pc, #88]	; (80007e8 <TIMER2_VoidInitInputCapture+0xc0>)
 800078e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000792:	6013      	str	r3, [r2, #0]
		CLR_BIT(TIMER2_CCMR1,9);
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <TIMER2_VoidInitInputCapture+0xc0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a13      	ldr	r2, [pc, #76]	; (80007e8 <TIMER2_VoidInitInputCapture+0xc0>)
 800079a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800079e:	6013      	str	r3, [r2, #0]
		// Enable capture on each channel,CC2E: Capture/Compare 2 output enable
		SET_BIT(TIMER2_CCER,4);
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <TIMER2_VoidInitInputCapture+0xc4>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a11      	ldr	r2, [pc, #68]	; (80007ec <TIMER2_VoidInitInputCapture+0xc4>)
 80007a6:	f043 0310 	orr.w	r3, r3, #16
 80007aa:	6013      	str	r3, [r2, #0]

		CLR_BIT(TIMER2_CCER,5);
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <TIMER2_VoidInitInputCapture+0xc4>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a0e      	ldr	r2, [pc, #56]	; (80007ec <TIMER2_VoidInitInputCapture+0xc4>)
 80007b2:	f023 0320 	bic.w	r3, r3, #32
 80007b6:	6013      	str	r3, [r2, #0]


		// Enable capture interrupt on each channel
		SET_BIT(TIMER2_DIER,2);
 80007b8:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <TIMER2_VoidInitInputCapture+0xc8>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a0c      	ldr	r2, [pc, #48]	; (80007f0 <TIMER2_VoidInitInputCapture+0xc8>)
 80007be:	f043 0304 	orr.w	r3, r3, #4
 80007c2:	6013      	str	r3, [r2, #0]
		break;
 80007c4:	bf00      	nop
	}

	// Enable Timer 3
	SET_BIT(TIMER2_CR1,0);
 80007c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6013      	str	r3, [r2, #0]

}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	40000028 	.word	0x40000028
 80007e4:	40000024 	.word	0x40000024
 80007e8:	40000018 	.word	0x40000018
 80007ec:	40000020 	.word	0x40000020
 80007f0:	4000000c 	.word	0x4000000c

080007f4 <Timer2_u8InputCaptureSetCallBack>:
u8 Timer2_u8InputCaptureSetCallBack(void (*Copy_pvCallBackFunc)(void))
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	u8 Local_u8ErrorState = OK;
 80007fc:	2300      	movs	r3, #0
 80007fe:	73fb      	strb	r3, [r7, #15]
	if(Copy_pvCallBackFunc != NULL)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d002      	beq.n	800080c <Timer2_u8InputCaptureSetCallBack+0x18>
	{
		TIMER2_pvInputCaptureCallBackFunc = Copy_pvCallBackFunc;
 8000806:	4a04      	ldr	r2, [pc, #16]	; (8000818 <Timer2_u8InputCaptureSetCallBack+0x24>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6013      	str	r3, [r2, #0]
	else
	{
		//		Local_u8ErrorState= NULL_POINTER;
	}

	return Local_u8ErrorState;
 800080c:	7bfb      	ldrb	r3, [r7, #15]

}
 800080e:	4618      	mov	r0, r3
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	20000020 	.word	0x20000020

0800081c <Timer2_VoidDisableIntOnEachChannle>:
		break;

	}
}
void Timer2_VoidDisableIntOnEachChannle(u8 Copy_ChannleNumber)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
	switch(Copy_ChannleNumber)
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d002      	beq.n	8000832 <Timer2_VoidDisableIntOnEachChannle+0x16>
 800082c:	2b01      	cmp	r3, #1
 800082e:	d007      	beq.n	8000840 <Timer2_VoidDisableIntOnEachChannle+0x24>
		CLR_BIT(TIMER2_DIER,2);
		break;

	}

}
 8000830:	e00d      	b.n	800084e <Timer2_VoidDisableIntOnEachChannle+0x32>
		CLR_BIT(TIMER2_DIER,1);
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <Timer2_VoidDisableIntOnEachChannle+0x3c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a08      	ldr	r2, [pc, #32]	; (8000858 <Timer2_VoidDisableIntOnEachChannle+0x3c>)
 8000838:	f023 0302 	bic.w	r3, r3, #2
 800083c:	6013      	str	r3, [r2, #0]
		break;
 800083e:	e006      	b.n	800084e <Timer2_VoidDisableIntOnEachChannle+0x32>
		CLR_BIT(TIMER2_DIER,2);
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <Timer2_VoidDisableIntOnEachChannle+0x3c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a04      	ldr	r2, [pc, #16]	; (8000858 <Timer2_VoidDisableIntOnEachChannle+0x3c>)
 8000846:	f023 0304 	bic.w	r3, r3, #4
 800084a:	6013      	str	r3, [r2, #0]
		break;
 800084c:	bf00      	nop
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	4000000c 	.word	0x4000000c

0800085c <Timer2_VoidChangePolarityOnEachChannle>:
void Timer2_VoidChangePolarityOnEachChannle(u8 Copy_ChannleNumber,u8 Copy_Edge)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	460a      	mov	r2, r1
 8000866:	71fb      	strb	r3, [r7, #7]
 8000868:	4613      	mov	r3, r2
 800086a:	71bb      	strb	r3, [r7, #6]
	switch(Copy_Edge)
 800086c:	79bb      	ldrb	r3, [r7, #6]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d002      	beq.n	8000878 <Timer2_VoidChangePolarityOnEachChannle+0x1c>
 8000872:	2b01      	cmp	r3, #1
 8000874:	d015      	beq.n	80008a2 <Timer2_VoidChangePolarityOnEachChannle+0x46>
				SET_BIT(TIMER2_CCER,5);
				break;
			}
			break;
	}
}
 8000876:	e029      	b.n	80008cc <Timer2_VoidChangePolarityOnEachChannle+0x70>
		switch(Copy_ChannleNumber)
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d002      	beq.n	8000884 <Timer2_VoidChangePolarityOnEachChannle+0x28>
 800087e:	2b01      	cmp	r3, #1
 8000880:	d007      	beq.n	8000892 <Timer2_VoidChangePolarityOnEachChannle+0x36>
		break;
 8000882:	e023      	b.n	80008cc <Timer2_VoidChangePolarityOnEachChannle+0x70>
			CLR_BIT(TIMER2_CCER,1);
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <Timer2_VoidChangePolarityOnEachChannle+0x7c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a13      	ldr	r2, [pc, #76]	; (80008d8 <Timer2_VoidChangePolarityOnEachChannle+0x7c>)
 800088a:	f023 0302 	bic.w	r3, r3, #2
 800088e:	6013      	str	r3, [r2, #0]
			break;
 8000890:	e006      	b.n	80008a0 <Timer2_VoidChangePolarityOnEachChannle+0x44>
			CLR_BIT(TIMER2_CCER,5);
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <Timer2_VoidChangePolarityOnEachChannle+0x7c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a10      	ldr	r2, [pc, #64]	; (80008d8 <Timer2_VoidChangePolarityOnEachChannle+0x7c>)
 8000898:	f023 0320 	bic.w	r3, r3, #32
 800089c:	6013      	str	r3, [r2, #0]
			break;
 800089e:	bf00      	nop
		break;
 80008a0:	e014      	b.n	80008cc <Timer2_VoidChangePolarityOnEachChannle+0x70>
			switch(Copy_ChannleNumber)
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d002      	beq.n	80008ae <Timer2_VoidChangePolarityOnEachChannle+0x52>
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d007      	beq.n	80008bc <Timer2_VoidChangePolarityOnEachChannle+0x60>
			break;
 80008ac:	e00d      	b.n	80008ca <Timer2_VoidChangePolarityOnEachChannle+0x6e>
				SET_BIT(TIMER2_CCER,1);
 80008ae:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <Timer2_VoidChangePolarityOnEachChannle+0x7c>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a09      	ldr	r2, [pc, #36]	; (80008d8 <Timer2_VoidChangePolarityOnEachChannle+0x7c>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	6013      	str	r3, [r2, #0]
				break;
 80008ba:	e006      	b.n	80008ca <Timer2_VoidChangePolarityOnEachChannle+0x6e>
				SET_BIT(TIMER2_CCER,5);
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <Timer2_VoidChangePolarityOnEachChannle+0x7c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <Timer2_VoidChangePolarityOnEachChannle+0x7c>)
 80008c2:	f043 0320 	orr.w	r3, r3, #32
 80008c6:	6013      	str	r3, [r2, #0]
				break;
 80008c8:	bf00      	nop
			break;
 80008ca:	bf00      	nop
}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40000020 	.word	0x40000020

080008dc <Timer2_VoidGetCapturedValue>:
u32  Timer2_VoidGetCapturedValue(u8 Copy_ChannleNumber)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
	u32 Value1,Value2;
	switch(Copy_ChannleNumber)
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d002      	beq.n	80008f2 <Timer2_VoidGetCapturedValue+0x16>
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d005      	beq.n	80008fc <Timer2_VoidGetCapturedValue+0x20>
 80008f0:	e009      	b.n	8000906 <Timer2_VoidGetCapturedValue+0x2a>
	{
	case Channle1:
		 Value1=TIMER2_CCR1;
 80008f2:	4b07      	ldr	r3, [pc, #28]	; (8000910 <Timer2_VoidGetCapturedValue+0x34>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	60bb      	str	r3, [r7, #8]
		return Value1;
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	e004      	b.n	8000906 <Timer2_VoidGetCapturedValue+0x2a>
		break;
	case Channle2:
		Value2=TIMER2_CCR2;
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <Timer2_VoidGetCapturedValue+0x38>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	60fb      	str	r3, [r7, #12]
		return Value2;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	e7ff      	b.n	8000906 <Timer2_VoidGetCapturedValue+0x2a>
		break;

	}

}
 8000906:	4618      	mov	r0, r3
 8000908:	3714      	adds	r7, #20
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	40000034 	.word	0x40000034
 8000914:	40000038 	.word	0x40000038

08000918 <TIM2_IRQHandler>:
/*Timer2 ISR*/
void TIM2_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	if(TIMER2_pvInputCaptureCallBackFunc != NULL)
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <TIM2_IRQHandler+0x18>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d002      	beq.n	800092a <TIM2_IRQHandler+0x12>
	{
		TIMER2_pvInputCaptureCallBackFunc();
 8000924:	4b02      	ldr	r3, [pc, #8]	; (8000930 <TIM2_IRQHandler+0x18>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4798      	blx	r3
	}
	else
	{
		/*Do nothing*/
	}
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000020 	.word	0x20000020

08000934 <TIMER3_VoidInitInputCapture>:

/*Global pointer to function to hold the callback function address*/
static void (*TIMER3_pvInputCaptureCallBackFunc)(void) = NULL;

void TIMER3_VoidInitInputCapture(u8 Copy_ChannleNumber)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]

	//prescaler for 8Mhz
	TIMER3_PSC=8-1;
 800093e:	4b4e      	ldr	r3, [pc, #312]	; (8000a78 <TIMER3_VoidInitInputCapture+0x144>)
 8000940:	2207      	movs	r2, #7
 8000942:	601a      	str	r2, [r3, #0]

	TIMER3_CNT=0;
 8000944:	4b4d      	ldr	r3, [pc, #308]	; (8000a7c <TIMER3_VoidInitInputCapture+0x148>)
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]

	//configure input capture for selected channle
	switch(Copy_ChannleNumber)
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	2b03      	cmp	r3, #3
 800094e:	f200 8087 	bhi.w	8000a60 <TIMER3_VoidInitInputCapture+0x12c>
 8000952:	a201      	add	r2, pc, #4	; (adr r2, 8000958 <TIMER3_VoidInitInputCapture+0x24>)
 8000954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000958:	08000969 	.word	0x08000969
 800095c:	080009a7 	.word	0x080009a7
 8000960:	080009e5 	.word	0x080009e5
 8000964:	08000a23 	.word	0x08000a23
	{
	case Channle1:

		//CC1s channel is configured as input, IC1 is mapped on TI1
		SET_BIT(TIMER3_CCMR1,0);
 8000968:	4b45      	ldr	r3, [pc, #276]	; (8000a80 <TIMER3_VoidInitInputCapture+0x14c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a44      	ldr	r2, [pc, #272]	; (8000a80 <TIMER3_VoidInitInputCapture+0x14c>)
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	6013      	str	r3, [r2, #0]
		CLR_BIT(TIMER3_CCMR1,1);
 8000974:	4b42      	ldr	r3, [pc, #264]	; (8000a80 <TIMER3_VoidInitInputCapture+0x14c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a41      	ldr	r2, [pc, #260]	; (8000a80 <TIMER3_VoidInitInputCapture+0x14c>)
 800097a:	f023 0302 	bic.w	r3, r3, #2
 800097e:	6013      	str	r3, [r2, #0]
		// Enable capture on each channel
		SET_BIT(TIMER3_CCER,0);
 8000980:	4b40      	ldr	r3, [pc, #256]	; (8000a84 <TIMER3_VoidInitInputCapture+0x150>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a3f      	ldr	r2, [pc, #252]	; (8000a84 <TIMER3_VoidInitInputCapture+0x150>)
 8000986:	f043 0301 	orr.w	r3, r3, #1
 800098a:	6013      	str	r3, [r2, #0]
		CLR_BIT(TIMER3_CCER,1);
 800098c:	4b3d      	ldr	r3, [pc, #244]	; (8000a84 <TIMER3_VoidInitInputCapture+0x150>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a3c      	ldr	r2, [pc, #240]	; (8000a84 <TIMER3_VoidInitInputCapture+0x150>)
 8000992:	f023 0302 	bic.w	r3, r3, #2
 8000996:	6013      	str	r3, [r2, #0]

		// Enable capture interrupt on each channel
		SET_BIT(TIMER3_DIER,1);
 8000998:	4b3b      	ldr	r3, [pc, #236]	; (8000a88 <TIMER3_VoidInitInputCapture+0x154>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a3a      	ldr	r2, [pc, #232]	; (8000a88 <TIMER3_VoidInitInputCapture+0x154>)
 800099e:	f043 0302 	orr.w	r3, r3, #2
 80009a2:	6013      	str	r3, [r2, #0]
		break;
 80009a4:	e05c      	b.n	8000a60 <TIMER3_VoidInitInputCapture+0x12c>

	case Channle2:

		//CC1s channel is configured as input, IC1 is mapped on TI1
		SET_BIT(TIMER3_CCMR1,8);
 80009a6:	4b36      	ldr	r3, [pc, #216]	; (8000a80 <TIMER3_VoidInitInputCapture+0x14c>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a35      	ldr	r2, [pc, #212]	; (8000a80 <TIMER3_VoidInitInputCapture+0x14c>)
 80009ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009b0:	6013      	str	r3, [r2, #0]
		CLR_BIT(TIMER3_CCMR1,9);
 80009b2:	4b33      	ldr	r3, [pc, #204]	; (8000a80 <TIMER3_VoidInitInputCapture+0x14c>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a32      	ldr	r2, [pc, #200]	; (8000a80 <TIMER3_VoidInitInputCapture+0x14c>)
 80009b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80009bc:	6013      	str	r3, [r2, #0]
		// Enable capture on each channel
		SET_BIT(TIMER3_CCER,4);
 80009be:	4b31      	ldr	r3, [pc, #196]	; (8000a84 <TIMER3_VoidInitInputCapture+0x150>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a30      	ldr	r2, [pc, #192]	; (8000a84 <TIMER3_VoidInitInputCapture+0x150>)
 80009c4:	f043 0310 	orr.w	r3, r3, #16
 80009c8:	6013      	str	r3, [r2, #0]
		CLR_BIT(TIMER3_CCER,5);
 80009ca:	4b2e      	ldr	r3, [pc, #184]	; (8000a84 <TIMER3_VoidInitInputCapture+0x150>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a2d      	ldr	r2, [pc, #180]	; (8000a84 <TIMER3_VoidInitInputCapture+0x150>)
 80009d0:	f023 0320 	bic.w	r3, r3, #32
 80009d4:	6013      	str	r3, [r2, #0]

		// Enable capture interrupt on each channel
		SET_BIT(TIMER3_DIER,2);
 80009d6:	4b2c      	ldr	r3, [pc, #176]	; (8000a88 <TIMER3_VoidInitInputCapture+0x154>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a2b      	ldr	r2, [pc, #172]	; (8000a88 <TIMER3_VoidInitInputCapture+0x154>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	6013      	str	r3, [r2, #0]
		break;
 80009e2:	e03d      	b.n	8000a60 <TIMER3_VoidInitInputCapture+0x12c>
	case Channle3:
		//CC1s channel is configured as input, IC1 is mapped on TI1
		SET_BIT(TIMER3_CCMR2,0);
 80009e4:	4b29      	ldr	r3, [pc, #164]	; (8000a8c <TIMER3_VoidInitInputCapture+0x158>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a28      	ldr	r2, [pc, #160]	; (8000a8c <TIMER3_VoidInitInputCapture+0x158>)
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	6013      	str	r3, [r2, #0]
		CLR_BIT(TIMER3_CCMR2,1);
 80009f0:	4b26      	ldr	r3, [pc, #152]	; (8000a8c <TIMER3_VoidInitInputCapture+0x158>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a25      	ldr	r2, [pc, #148]	; (8000a8c <TIMER3_VoidInitInputCapture+0x158>)
 80009f6:	f023 0302 	bic.w	r3, r3, #2
 80009fa:	6013      	str	r3, [r2, #0]
		// Enable capture on each channel
		SET_BIT(TIMER3_CCER,8);
 80009fc:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <TIMER3_VoidInitInputCapture+0x150>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a20      	ldr	r2, [pc, #128]	; (8000a84 <TIMER3_VoidInitInputCapture+0x150>)
 8000a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a06:	6013      	str	r3, [r2, #0]
		CLR_BIT(TIMER3_CCER,9);
 8000a08:	4b1e      	ldr	r3, [pc, #120]	; (8000a84 <TIMER3_VoidInitInputCapture+0x150>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a1d      	ldr	r2, [pc, #116]	; (8000a84 <TIMER3_VoidInitInputCapture+0x150>)
 8000a0e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000a12:	6013      	str	r3, [r2, #0]

		// Enable capture interrupt on each channel
		SET_BIT(TIMER3_DIER,3);
 8000a14:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <TIMER3_VoidInitInputCapture+0x154>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a1b      	ldr	r2, [pc, #108]	; (8000a88 <TIMER3_VoidInitInputCapture+0x154>)
 8000a1a:	f043 0308 	orr.w	r3, r3, #8
 8000a1e:	6013      	str	r3, [r2, #0]
		break;
 8000a20:	e01e      	b.n	8000a60 <TIMER3_VoidInitInputCapture+0x12c>
	case Channle4:
		//CC1s channel is configured as input, IC1 is mapped on TI1
		SET_BIT(TIMER3_CCMR2,8);
 8000a22:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <TIMER3_VoidInitInputCapture+0x158>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a19      	ldr	r2, [pc, #100]	; (8000a8c <TIMER3_VoidInitInputCapture+0x158>)
 8000a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a2c:	6013      	str	r3, [r2, #0]
		CLR_BIT(TIMER3_CCMR2,9);
 8000a2e:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <TIMER3_VoidInitInputCapture+0x158>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a16      	ldr	r2, [pc, #88]	; (8000a8c <TIMER3_VoidInitInputCapture+0x158>)
 8000a34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000a38:	6013      	str	r3, [r2, #0]
		// Enable capture on each channel
		SET_BIT(TIMER3_CCER,12);
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <TIMER3_VoidInitInputCapture+0x150>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a11      	ldr	r2, [pc, #68]	; (8000a84 <TIMER3_VoidInitInputCapture+0x150>)
 8000a40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a44:	6013      	str	r3, [r2, #0]
		CLR_BIT(TIMER3_CCER,13);
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <TIMER3_VoidInitInputCapture+0x150>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a0e      	ldr	r2, [pc, #56]	; (8000a84 <TIMER3_VoidInitInputCapture+0x150>)
 8000a4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a50:	6013      	str	r3, [r2, #0]

		// Enable capture interrupt on each channel
		SET_BIT(TIMER3_DIER,4);
 8000a52:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <TIMER3_VoidInitInputCapture+0x154>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a0c      	ldr	r2, [pc, #48]	; (8000a88 <TIMER3_VoidInitInputCapture+0x154>)
 8000a58:	f043 0310 	orr.w	r3, r3, #16
 8000a5c:	6013      	str	r3, [r2, #0]
		break;
 8000a5e:	bf00      	nop
		}
	// Enable Timer 3
	SET_BIT(TIMER3_CR1,0);
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <TIMER3_VoidInitInputCapture+0x15c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <TIMER3_VoidInitInputCapture+0x15c>)
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	6013      	str	r3, [r2, #0]

}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40000428 	.word	0x40000428
 8000a7c:	40000424 	.word	0x40000424
 8000a80:	40000418 	.word	0x40000418
 8000a84:	40000420 	.word	0x40000420
 8000a88:	4000040c 	.word	0x4000040c
 8000a8c:	4000041c 	.word	0x4000041c
 8000a90:	40000400 	.word	0x40000400

08000a94 <Timer3_u8InputCaptureSetCallBack>:
u8 Timer3_u8InputCaptureSetCallBack(void (*Copy_pvCallBackFunc)(void))
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	u8 Local_u8ErrorState = OK;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	73fb      	strb	r3, [r7, #15]
	if(Copy_pvCallBackFunc != NULL)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d002      	beq.n	8000aac <Timer3_u8InputCaptureSetCallBack+0x18>
	{
		TIMER3_pvInputCaptureCallBackFunc = Copy_pvCallBackFunc;
 8000aa6:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <Timer3_u8InputCaptureSetCallBack+0x24>)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6013      	str	r3, [r2, #0]
	else
	{
		//		Local_u8ErrorState= NULL_POINTER;
	}

	return Local_u8ErrorState;
 8000aac:	7bfb      	ldrb	r3, [r7, #15]

}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	20000024 	.word	0x20000024

08000abc <Timer3_VoidSetPreload>:

void Timer3_VoidSetPreload(u8 Copy_u8Preload)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
	TIMER3_CNT = Copy_u8Preload;
 8000ac6:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <Timer3_VoidSetPreload+0x1c>)
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	6013      	str	r3, [r2, #0]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	40000424 	.word	0x40000424

08000adc <Timer3_VoidEnableIntOnEachChannle>:


void Timer3_VoidEnableIntOnEachChannle(u8 Copy_ChannleNumber)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
	switch(Copy_ChannleNumber)
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	2b03      	cmp	r3, #3
 8000aea:	d827      	bhi.n	8000b3c <Timer3_VoidEnableIntOnEachChannle+0x60>
 8000aec:	a201      	add	r2, pc, #4	; (adr r2, 8000af4 <Timer3_VoidEnableIntOnEachChannle+0x18>)
 8000aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af2:	bf00      	nop
 8000af4:	08000b05 	.word	0x08000b05
 8000af8:	08000b13 	.word	0x08000b13
 8000afc:	08000b21 	.word	0x08000b21
 8000b00:	08000b2f 	.word	0x08000b2f
	{
	case Channle1:
		SET_BIT(TIMER3_DIER,1);
 8000b04:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <Timer3_VoidEnableIntOnEachChannle+0x6c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0f      	ldr	r2, [pc, #60]	; (8000b48 <Timer3_VoidEnableIntOnEachChannle+0x6c>)
 8000b0a:	f043 0302 	orr.w	r3, r3, #2
 8000b0e:	6013      	str	r3, [r2, #0]
		break;
 8000b10:	e014      	b.n	8000b3c <Timer3_VoidEnableIntOnEachChannle+0x60>
	case Channle2:
		SET_BIT(TIMER3_DIER,2);
 8000b12:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <Timer3_VoidEnableIntOnEachChannle+0x6c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a0c      	ldr	r2, [pc, #48]	; (8000b48 <Timer3_VoidEnableIntOnEachChannle+0x6c>)
 8000b18:	f043 0304 	orr.w	r3, r3, #4
 8000b1c:	6013      	str	r3, [r2, #0]
		break;
 8000b1e:	e00d      	b.n	8000b3c <Timer3_VoidEnableIntOnEachChannle+0x60>
	case Channle3:
		SET_BIT(TIMER3_DIER,3);
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <Timer3_VoidEnableIntOnEachChannle+0x6c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a08      	ldr	r2, [pc, #32]	; (8000b48 <Timer3_VoidEnableIntOnEachChannle+0x6c>)
 8000b26:	f043 0308 	orr.w	r3, r3, #8
 8000b2a:	6013      	str	r3, [r2, #0]
		break;
 8000b2c:	e006      	b.n	8000b3c <Timer3_VoidEnableIntOnEachChannle+0x60>
	case Channle4:
		SET_BIT(TIMER3_DIER,4);
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <Timer3_VoidEnableIntOnEachChannle+0x6c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <Timer3_VoidEnableIntOnEachChannle+0x6c>)
 8000b34:	f043 0310 	orr.w	r3, r3, #16
 8000b38:	6013      	str	r3, [r2, #0]
		break;
 8000b3a:	bf00      	nop
	}
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	4000040c 	.word	0x4000040c

08000b4c <Timer3_VoidDisableIntOnEachChannle>:
void Timer3_VoidDisableIntOnEachChannle(u8 Copy_ChannleNumber)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
		switch(Copy_ChannleNumber)
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	2b03      	cmp	r3, #3
 8000b5a:	d827      	bhi.n	8000bac <Timer3_VoidDisableIntOnEachChannle+0x60>
 8000b5c:	a201      	add	r2, pc, #4	; (adr r2, 8000b64 <Timer3_VoidDisableIntOnEachChannle+0x18>)
 8000b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b62:	bf00      	nop
 8000b64:	08000b75 	.word	0x08000b75
 8000b68:	08000b83 	.word	0x08000b83
 8000b6c:	08000b91 	.word	0x08000b91
 8000b70:	08000b9f 	.word	0x08000b9f
		{
		case Channle1:
			CLR_BIT(TIMER3_DIER,1);
 8000b74:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <Timer3_VoidDisableIntOnEachChannle+0x6c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a0f      	ldr	r2, [pc, #60]	; (8000bb8 <Timer3_VoidDisableIntOnEachChannle+0x6c>)
 8000b7a:	f023 0302 	bic.w	r3, r3, #2
 8000b7e:	6013      	str	r3, [r2, #0]
			break;
 8000b80:	e014      	b.n	8000bac <Timer3_VoidDisableIntOnEachChannle+0x60>
		case Channle2:
			CLR_BIT(TIMER3_DIER,2);
 8000b82:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <Timer3_VoidDisableIntOnEachChannle+0x6c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a0c      	ldr	r2, [pc, #48]	; (8000bb8 <Timer3_VoidDisableIntOnEachChannle+0x6c>)
 8000b88:	f023 0304 	bic.w	r3, r3, #4
 8000b8c:	6013      	str	r3, [r2, #0]
			break;
 8000b8e:	e00d      	b.n	8000bac <Timer3_VoidDisableIntOnEachChannle+0x60>
		case Channle3:
			CLR_BIT(TIMER3_DIER,3);
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <Timer3_VoidDisableIntOnEachChannle+0x6c>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <Timer3_VoidDisableIntOnEachChannle+0x6c>)
 8000b96:	f023 0308 	bic.w	r3, r3, #8
 8000b9a:	6013      	str	r3, [r2, #0]
			break;
 8000b9c:	e006      	b.n	8000bac <Timer3_VoidDisableIntOnEachChannle+0x60>
		case Channle4:
			CLR_BIT(TIMER3_DIER,4);
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <Timer3_VoidDisableIntOnEachChannle+0x6c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <Timer3_VoidDisableIntOnEachChannle+0x6c>)
 8000ba4:	f023 0310 	bic.w	r3, r3, #16
 8000ba8:	6013      	str	r3, [r2, #0]
			break;
 8000baa:	bf00      	nop
		}
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	4000040c 	.word	0x4000040c

08000bbc <Timer3_VoidChangePolarityOnEachChannle>:

void Timer3_VoidChangePolarityOnEachChannle(u8 Copy_ChannleNumber,u8 Copy_Edge)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	460a      	mov	r2, r1
 8000bc6:	71fb      	strb	r3, [r7, #7]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	71bb      	strb	r3, [r7, #6]
	switch(Copy_Edge)
 8000bcc:	79bb      	ldrb	r3, [r7, #6]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d002      	beq.n	8000bd8 <Timer3_VoidChangePolarityOnEachChannle+0x1c>
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d02b      	beq.n	8000c2e <Timer3_VoidChangePolarityOnEachChannle+0x72>
				SET_BIT(TIMER3_CCER,13);
				break;
			}
			break;
	   }
}
 8000bd6:	e059      	b.n	8000c8c <Timer3_VoidChangePolarityOnEachChannle+0xd0>
		switch(Copy_ChannleNumber)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	2b03      	cmp	r3, #3
 8000bdc:	d853      	bhi.n	8000c86 <Timer3_VoidChangePolarityOnEachChannle+0xca>
 8000bde:	a201      	add	r2, pc, #4	; (adr r2, 8000be4 <Timer3_VoidChangePolarityOnEachChannle+0x28>)
 8000be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be4:	08000bf5 	.word	0x08000bf5
 8000be8:	08000c03 	.word	0x08000c03
 8000bec:	08000c11 	.word	0x08000c11
 8000bf0:	08000c1f 	.word	0x08000c1f
			CLR_BIT(TIMER3_CCER,1);
 8000bf4:	4b28      	ldr	r3, [pc, #160]	; (8000c98 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a27      	ldr	r2, [pc, #156]	; (8000c98 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000bfa:	f023 0302 	bic.w	r3, r3, #2
 8000bfe:	6013      	str	r3, [r2, #0]
			break;
 8000c00:	e014      	b.n	8000c2c <Timer3_VoidChangePolarityOnEachChannle+0x70>
			CLR_BIT(TIMER3_CCER,5);
 8000c02:	4b25      	ldr	r3, [pc, #148]	; (8000c98 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a24      	ldr	r2, [pc, #144]	; (8000c98 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000c08:	f023 0320 	bic.w	r3, r3, #32
 8000c0c:	6013      	str	r3, [r2, #0]
			break;
 8000c0e:	e00d      	b.n	8000c2c <Timer3_VoidChangePolarityOnEachChannle+0x70>
			CLR_BIT(TIMER3_CCER,9);
 8000c10:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a20      	ldr	r2, [pc, #128]	; (8000c98 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000c16:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000c1a:	6013      	str	r3, [r2, #0]
			break;
 8000c1c:	e006      	b.n	8000c2c <Timer3_VoidChangePolarityOnEachChannle+0x70>
			CLR_BIT(TIMER3_CCER,13);
 8000c1e:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a1d      	ldr	r2, [pc, #116]	; (8000c98 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000c24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c28:	6013      	str	r3, [r2, #0]
			break;
 8000c2a:	bf00      	nop
		break;
 8000c2c:	e02b      	b.n	8000c86 <Timer3_VoidChangePolarityOnEachChannle+0xca>
			switch(Copy_ChannleNumber)
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2b03      	cmp	r3, #3
 8000c32:	d82a      	bhi.n	8000c8a <Timer3_VoidChangePolarityOnEachChannle+0xce>
 8000c34:	a201      	add	r2, pc, #4	; (adr r2, 8000c3c <Timer3_VoidChangePolarityOnEachChannle+0x80>)
 8000c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3a:	bf00      	nop
 8000c3c:	08000c4d 	.word	0x08000c4d
 8000c40:	08000c5b 	.word	0x08000c5b
 8000c44:	08000c69 	.word	0x08000c69
 8000c48:	08000c77 	.word	0x08000c77
				SET_BIT(TIMER3_CCER,1);
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a11      	ldr	r2, [pc, #68]	; (8000c98 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000c52:	f043 0302 	orr.w	r3, r3, #2
 8000c56:	6013      	str	r3, [r2, #0]
				break;
 8000c58:	e014      	b.n	8000c84 <Timer3_VoidChangePolarityOnEachChannle+0xc8>
				SET_BIT(TIMER3_CCER,5);
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000c60:	f043 0320 	orr.w	r3, r3, #32
 8000c64:	6013      	str	r3, [r2, #0]
				break;
 8000c66:	e00d      	b.n	8000c84 <Timer3_VoidChangePolarityOnEachChannle+0xc8>
				SET_BIT(TIMER3_CCER,9);
 8000c68:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000c6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c72:	6013      	str	r3, [r2, #0]
				break;
 8000c74:	e006      	b.n	8000c84 <Timer3_VoidChangePolarityOnEachChannle+0xc8>
				SET_BIT(TIMER3_CCER,13);
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a07      	ldr	r2, [pc, #28]	; (8000c98 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000c7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c80:	6013      	str	r3, [r2, #0]
				break;
 8000c82:	bf00      	nop
			break;
 8000c84:	e001      	b.n	8000c8a <Timer3_VoidChangePolarityOnEachChannle+0xce>
		break;
 8000c86:	bf00      	nop
 8000c88:	e000      	b.n	8000c8c <Timer3_VoidChangePolarityOnEachChannle+0xd0>
			break;
 8000c8a:	bf00      	nop
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40000420 	.word	0x40000420

08000c9c <Timer3_VoidGetCapturedValue>:

u32  Timer3_VoidGetCapturedValue(u8 Copy_ChannleNumber)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b087      	sub	sp, #28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
u32 Value1,Value2,Value3,Value4;
	switch(Copy_ChannleNumber)
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	2b03      	cmp	r3, #3
 8000caa:	d81f      	bhi.n	8000cec <Timer3_VoidGetCapturedValue+0x50>
 8000cac:	a201      	add	r2, pc, #4	; (adr r2, 8000cb4 <Timer3_VoidGetCapturedValue+0x18>)
 8000cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb2:	bf00      	nop
 8000cb4:	08000cc5 	.word	0x08000cc5
 8000cb8:	08000ccf 	.word	0x08000ccf
 8000cbc:	08000cd9 	.word	0x08000cd9
 8000cc0:	08000ce3 	.word	0x08000ce3
	{
	case Channle1:
		Value1=TIMER3_CCR1;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <Timer3_VoidGetCapturedValue+0x5c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	60bb      	str	r3, [r7, #8]
		return Value1;
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	e00e      	b.n	8000cec <Timer3_VoidGetCapturedValue+0x50>
		break;
	case Channle2:
	    Value2=TIMER3_CCR2;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <Timer3_VoidGetCapturedValue+0x60>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	60fb      	str	r3, [r7, #12]
	    return Value2;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	e009      	b.n	8000cec <Timer3_VoidGetCapturedValue+0x50>
		break;
	case Channle3:
	    Value3=TIMER3_CCR3;
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <Timer3_VoidGetCapturedValue+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	613b      	str	r3, [r7, #16]
	    return Value3;
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	e004      	b.n	8000cec <Timer3_VoidGetCapturedValue+0x50>
		break;
	case Channle4:
	    Value4=TIMER3_CCR4;
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <Timer3_VoidGetCapturedValue+0x68>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	617b      	str	r3, [r7, #20]
	    return Value4;
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	e7ff      	b.n	8000cec <Timer3_VoidGetCapturedValue+0x50>
		break;
	}
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	371c      	adds	r7, #28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	40000434 	.word	0x40000434
 8000cfc:	40000438 	.word	0x40000438
 8000d00:	4000043c 	.word	0x4000043c
 8000d04:	40000440 	.word	0x40000440

08000d08 <TIM3_IRQHandler>:


/*Timer3 ISR*/
void TIM3_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	if(TIMER3_pvInputCaptureCallBackFunc != NULL)
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <TIM3_IRQHandler+0x18>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d002      	beq.n	8000d1a <TIM3_IRQHandler+0x12>
	{
		TIMER3_pvInputCaptureCallBackFunc();
 8000d14:	4b02      	ldr	r3, [pc, #8]	; (8000d20 <TIM3_IRQHandler+0x18>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4798      	blx	r3
	}
	else
	{
		/*Do nothing*/
	}
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000024 	.word	0x20000024

08000d24 <TIMER4_Void_PwmInit>:




void TIMER4_Void_PwmInit(u8 Copy_U8_Channel)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
	/* To disable timer , Enable auto Preload ARR */
	TIMER4_PSC = 2000;
 8000d2e:	4b5b      	ldr	r3, [pc, #364]	; (8000e9c <TIMER4_Void_PwmInit+0x178>)
 8000d30:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d34:	601a      	str	r2, [r3, #0]
//	TIMER4_CR1 = 0x0080;
	//Auto-reload preload enable
	SET_BIT(TIMER4_CR1,7);
 8000d36:	4b5a      	ldr	r3, [pc, #360]	; (8000ea0 <TIMER4_Void_PwmInit+0x17c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a59      	ldr	r2, [pc, #356]	; (8000ea0 <TIMER4_Void_PwmInit+0x17c>)
 8000d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d40:	6013      	str	r3, [r2, #0]
	TIMER4_ARR = 255;
 8000d42:	4b58      	ldr	r3, [pc, #352]	; (8000ea4 <TIMER4_Void_PwmInit+0x180>)
 8000d44:	22ff      	movs	r2, #255	; 0xff
 8000d46:	601a      	str	r2, [r3, #0]
	switch(Copy_U8_Channel)
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	2b03      	cmp	r3, #3
 8000d4e:	f200 8087 	bhi.w	8000e60 <TIMER4_Void_PwmInit+0x13c>
 8000d52:	a201      	add	r2, pc, #4	; (adr r2, 8000d58 <TIMER4_Void_PwmInit+0x34>)
 8000d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d58:	08000d69 	.word	0x08000d69
 8000d5c:	08000da7 	.word	0x08000da7
 8000d60:	08000de5 	.word	0x08000de5
 8000d64:	08000e23 	.word	0x08000e23
	{

	case TIMER4_CHANNEL1  :
		/* To Enable Preload register on CCR1 */
		SET_BIT(TIMER4_CCMR1,3);
 8000d68:	4b4f      	ldr	r3, [pc, #316]	; (8000ea8 <TIMER4_Void_PwmInit+0x184>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a4e      	ldr	r2, [pc, #312]	; (8000ea8 <TIMER4_Void_PwmInit+0x184>)
 8000d6e:	f043 0308 	orr.w	r3, r3, #8
 8000d72:	6013      	str	r3, [r2, #0]
		/* To Select PWM MODE 2 */
		CLR_BIT(TIMER4_CCMR1,4);
 8000d74:	4b4c      	ldr	r3, [pc, #304]	; (8000ea8 <TIMER4_Void_PwmInit+0x184>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a4b      	ldr	r2, [pc, #300]	; (8000ea8 <TIMER4_Void_PwmInit+0x184>)
 8000d7a:	f023 0310 	bic.w	r3, r3, #16
 8000d7e:	6013      	str	r3, [r2, #0]
		SET_BIT(TIMER4_CCMR1,5);
 8000d80:	4b49      	ldr	r3, [pc, #292]	; (8000ea8 <TIMER4_Void_PwmInit+0x184>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a48      	ldr	r2, [pc, #288]	; (8000ea8 <TIMER4_Void_PwmInit+0x184>)
 8000d86:	f043 0320 	orr.w	r3, r3, #32
 8000d8a:	6013      	str	r3, [r2, #0]
		SET_BIT(TIMER4_CCMR1,6);
 8000d8c:	4b46      	ldr	r3, [pc, #280]	; (8000ea8 <TIMER4_Void_PwmInit+0x184>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a45      	ldr	r2, [pc, #276]	; (8000ea8 <TIMER4_Void_PwmInit+0x184>)
 8000d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d96:	6013      	str	r3, [r2, #0]
		/* To Enable Capture compare to channel 1 */
		SET_BIT(TIMER4_CCER,0);                                 break;
 8000d98:	4b44      	ldr	r3, [pc, #272]	; (8000eac <TIMER4_Void_PwmInit+0x188>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a43      	ldr	r2, [pc, #268]	; (8000eac <TIMER4_Void_PwmInit+0x188>)
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	6013      	str	r3, [r2, #0]
 8000da4:	e05d      	b.n	8000e62 <TIMER4_Void_PwmInit+0x13e>
	case TIMER4_CHANNEL2  :
		/* To Enable Preload register on CCR2 */
		SET_BIT(TIMER4_CCMR1,11);
 8000da6:	4b40      	ldr	r3, [pc, #256]	; (8000ea8 <TIMER4_Void_PwmInit+0x184>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a3f      	ldr	r2, [pc, #252]	; (8000ea8 <TIMER4_Void_PwmInit+0x184>)
 8000dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000db0:	6013      	str	r3, [r2, #0]
		/* To Select PWM MODE 2 */
		CLR_BIT(TIMER4_CCMR1,12);
 8000db2:	4b3d      	ldr	r3, [pc, #244]	; (8000ea8 <TIMER4_Void_PwmInit+0x184>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a3c      	ldr	r2, [pc, #240]	; (8000ea8 <TIMER4_Void_PwmInit+0x184>)
 8000db8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000dbc:	6013      	str	r3, [r2, #0]
		SET_BIT(TIMER4_CCMR1,13);
 8000dbe:	4b3a      	ldr	r3, [pc, #232]	; (8000ea8 <TIMER4_Void_PwmInit+0x184>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a39      	ldr	r2, [pc, #228]	; (8000ea8 <TIMER4_Void_PwmInit+0x184>)
 8000dc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dc8:	6013      	str	r3, [r2, #0]
		SET_BIT(TIMER4_CCMR1,14);
 8000dca:	4b37      	ldr	r3, [pc, #220]	; (8000ea8 <TIMER4_Void_PwmInit+0x184>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a36      	ldr	r2, [pc, #216]	; (8000ea8 <TIMER4_Void_PwmInit+0x184>)
 8000dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd4:	6013      	str	r3, [r2, #0]
		/* To Enable Capture compare to channel 2 */
		SET_BIT(TIMER4_CCER,4);                                 break;
 8000dd6:	4b35      	ldr	r3, [pc, #212]	; (8000eac <TIMER4_Void_PwmInit+0x188>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a34      	ldr	r2, [pc, #208]	; (8000eac <TIMER4_Void_PwmInit+0x188>)
 8000ddc:	f043 0310 	orr.w	r3, r3, #16
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	e03e      	b.n	8000e62 <TIMER4_Void_PwmInit+0x13e>

	case TIMER4_CHANNEL3 :
		/* To Enable Preload register on CCR3 */
		SET_BIT(TIMER4_CCMR2,3);
 8000de4:	4b32      	ldr	r3, [pc, #200]	; (8000eb0 <TIMER4_Void_PwmInit+0x18c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a31      	ldr	r2, [pc, #196]	; (8000eb0 <TIMER4_Void_PwmInit+0x18c>)
 8000dea:	f043 0308 	orr.w	r3, r3, #8
 8000dee:	6013      	str	r3, [r2, #0]
		/* To Select PWM MODE 2 */
		CLR_BIT(TIMER4_CCMR2,4);
 8000df0:	4b2f      	ldr	r3, [pc, #188]	; (8000eb0 <TIMER4_Void_PwmInit+0x18c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a2e      	ldr	r2, [pc, #184]	; (8000eb0 <TIMER4_Void_PwmInit+0x18c>)
 8000df6:	f023 0310 	bic.w	r3, r3, #16
 8000dfa:	6013      	str	r3, [r2, #0]
		SET_BIT(TIMER4_CCMR2,5);
 8000dfc:	4b2c      	ldr	r3, [pc, #176]	; (8000eb0 <TIMER4_Void_PwmInit+0x18c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a2b      	ldr	r2, [pc, #172]	; (8000eb0 <TIMER4_Void_PwmInit+0x18c>)
 8000e02:	f043 0320 	orr.w	r3, r3, #32
 8000e06:	6013      	str	r3, [r2, #0]
		SET_BIT(TIMER4_CCMR2,6);
 8000e08:	4b29      	ldr	r3, [pc, #164]	; (8000eb0 <TIMER4_Void_PwmInit+0x18c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a28      	ldr	r2, [pc, #160]	; (8000eb0 <TIMER4_Void_PwmInit+0x18c>)
 8000e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e12:	6013      	str	r3, [r2, #0]
		/* To Enable Capture compare to channel 3 */
		SET_BIT(TIMER4_CCER,8);break;
 8000e14:	4b25      	ldr	r3, [pc, #148]	; (8000eac <TIMER4_Void_PwmInit+0x188>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a24      	ldr	r2, [pc, #144]	; (8000eac <TIMER4_Void_PwmInit+0x188>)
 8000e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e1e:	6013      	str	r3, [r2, #0]
 8000e20:	e01f      	b.n	8000e62 <TIMER4_Void_PwmInit+0x13e>
	case TIMER4_CHANNEL4 :
		/* To Enable Preload register on CCR4 */
		SET_BIT(TIMER4_CCMR2,11);
 8000e22:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <TIMER4_Void_PwmInit+0x18c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a22      	ldr	r2, [pc, #136]	; (8000eb0 <TIMER4_Void_PwmInit+0x18c>)
 8000e28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e2c:	6013      	str	r3, [r2, #0]
		/* To Select PWM MODE 2 */
		CLR_BIT(TIMER4_CCMR2,12);
 8000e2e:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <TIMER4_Void_PwmInit+0x18c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a1f      	ldr	r2, [pc, #124]	; (8000eb0 <TIMER4_Void_PwmInit+0x18c>)
 8000e34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e38:	6013      	str	r3, [r2, #0]
		SET_BIT(TIMER4_CCMR2,13);
 8000e3a:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <TIMER4_Void_PwmInit+0x18c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a1c      	ldr	r2, [pc, #112]	; (8000eb0 <TIMER4_Void_PwmInit+0x18c>)
 8000e40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e44:	6013      	str	r3, [r2, #0]
		SET_BIT(TIMER4_CCMR2,14);
 8000e46:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <TIMER4_Void_PwmInit+0x18c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a19      	ldr	r2, [pc, #100]	; (8000eb0 <TIMER4_Void_PwmInit+0x18c>)
 8000e4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e50:	6013      	str	r3, [r2, #0]
		/* To Enable Capture compare to channel 3 */
		SET_BIT(TIMER4_CCER,12);
 8000e52:	4b16      	ldr	r3, [pc, #88]	; (8000eac <TIMER4_Void_PwmInit+0x188>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a15      	ldr	r2, [pc, #84]	; (8000eac <TIMER4_Void_PwmInit+0x188>)
 8000e58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e5c:	6013      	str	r3, [r2, #0]
		break;
 8000e5e:	e000      	b.n	8000e62 <TIMER4_Void_PwmInit+0x13e>
	default:
		break;
 8000e60:	bf00      	nop

//	TIMER4_CCR1=0;
//	TIMER4_CCR2=0;
//	TIMER4_CCR3=0;
//	TIMER4_CCR4=0;
	SET_BIT(TIMER4_CCMR2,10);
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <TIMER4_Void_PwmInit+0x18c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a12      	ldr	r2, [pc, #72]	; (8000eb0 <TIMER4_Void_PwmInit+0x18c>)
 8000e68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e6c:	6013      	str	r3, [r2, #0]
	SET_BIT(TIMER4_CCMR2,2);
 8000e6e:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <TIMER4_Void_PwmInit+0x18c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a0f      	ldr	r2, [pc, #60]	; (8000eb0 <TIMER4_Void_PwmInit+0x18c>)
 8000e74:	f043 0304 	orr.w	r3, r3, #4
 8000e78:	6013      	str	r3, [r2, #0]
	SET_BIT(TIMER4_CCMR2,3);
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <TIMER4_Void_PwmInit+0x18c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a0c      	ldr	r2, [pc, #48]	; (8000eb0 <TIMER4_Void_PwmInit+0x18c>)
 8000e80:	f043 0308 	orr.w	r3, r3, #8
 8000e84:	6013      	str	r3, [r2, #0]
	// Enable Timer4 peripheral
	SET_BIT(TIMER4_CR1,0);
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <TIMER4_Void_PwmInit+0x17c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <TIMER4_Void_PwmInit+0x17c>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6013      	str	r3, [r2, #0]
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	40000828 	.word	0x40000828
 8000ea0:	40000800 	.word	0x40000800
 8000ea4:	4000082c 	.word	0x4000082c
 8000ea8:	40000818 	.word	0x40000818
 8000eac:	40000820 	.word	0x40000820
 8000eb0:	4000081c 	.word	0x4000081c

08000eb4 <TIMER4_Void_PwmSetDutyCycle>:
void TIMER4_Void_PwmSetDutyCycle(u8 Copy_U8_Channel ,u32 Copy_U32_DutyCycle)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	71fb      	strb	r3, [r7, #7]
	switch(Copy_U8_Channel)
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	2b03      	cmp	r3, #3
 8000ec6:	d81b      	bhi.n	8000f00 <TIMER4_Void_PwmSetDutyCycle+0x4c>
 8000ec8:	a201      	add	r2, pc, #4	; (adr r2, 8000ed0 <TIMER4_Void_PwmSetDutyCycle+0x1c>)
 8000eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ece:	bf00      	nop
 8000ed0:	08000ee1 	.word	0x08000ee1
 8000ed4:	08000ee9 	.word	0x08000ee9
 8000ed8:	08000ef1 	.word	0x08000ef1
 8000edc:	08000ef9 	.word	0x08000ef9
	{
	case TIMER4_CHANNEL1 :  TIMER4_CCR1 = Copy_U32_DutyCycle;           break;
 8000ee0:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <TIMER4_Void_PwmSetDutyCycle+0x58>)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	e00c      	b.n	8000f02 <TIMER4_Void_PwmSetDutyCycle+0x4e>
	case TIMER4_CHANNEL2 :  TIMER4_CCR2 = Copy_U32_DutyCycle;           break;
 8000ee8:	4a09      	ldr	r2, [pc, #36]	; (8000f10 <TIMER4_Void_PwmSetDutyCycle+0x5c>)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	e008      	b.n	8000f02 <TIMER4_Void_PwmSetDutyCycle+0x4e>
	case TIMER4_CHANNEL3 :  TIMER4_CCR3 = Copy_U32_DutyCycle;           break;
 8000ef0:	4a08      	ldr	r2, [pc, #32]	; (8000f14 <TIMER4_Void_PwmSetDutyCycle+0x60>)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	e004      	b.n	8000f02 <TIMER4_Void_PwmSetDutyCycle+0x4e>
	case TIMER4_CHANNEL4 :  TIMER4_CCR4 = Copy_U32_DutyCycle;           break;
 8000ef8:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <TIMER4_Void_PwmSetDutyCycle+0x64>)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	e000      	b.n	8000f02 <TIMER4_Void_PwmSetDutyCycle+0x4e>
	default              :                                             break;
 8000f00:	bf00      	nop
	}
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	40000834 	.word	0x40000834
 8000f10:	40000838 	.word	0x40000838
 8000f14:	4000083c 	.word	0x4000083c
 8000f18:	40000840 	.word	0x40000840

08000f1c <MUSART_VidInit>:

#define THRESHOLD_VALUE  9000000UL

void (*MUSART1_CallBack)(void);

void MUSART_VidInit ( void ){
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0

	u32 LOC_u64Mantissa = ( F_CPU ) / ( 16 * USART1_BAUD_RATE ) ;
 8000f22:	2334      	movs	r3, #52	; 0x34
 8000f24:	607b      	str	r3, [r7, #4]

	u32 LOC_u64Fraction = ( ( ( F_CPU * 100 ) / ( 16 * USART1_BAUD_RATE )  ) % 100 ) * 16 ;
 8000f26:	2380      	movs	r3, #128	; 0x80
 8000f28:	603b      	str	r3, [r7, #0]

	if( LOC_u64Fraction > 1500 ){ LOC_u64Mantissa += 1 ; LOC_u64Fraction  = 0 ; }
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d904      	bls.n	8000f3e <MUSART_VidInit+0x22>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3301      	adds	r3, #1
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	603b      	str	r3, [r7, #0]

	#if USART1_STATUS == USART1_ENABLE

		MUSART1 -> SR = 0 ;
 8000f3e:	4b27      	ldr	r3, [pc, #156]	; (8000fdc <MUSART_VidInit+0xc0>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]

		#if   USART1_WORD_LENGTH == _8BIT_WORD_LENGTH

					CLR_BIT( MUSART1 -> CR1 , 12 );
 8000f44:	4b25      	ldr	r3, [pc, #148]	; (8000fdc <MUSART_VidInit+0xc0>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	4a24      	ldr	r2, [pc, #144]	; (8000fdc <MUSART_VidInit+0xc0>)
 8000f4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f4e:	60d3      	str	r3, [r2, #12]

		#endif

		#if   USART1_PARITY == PARITY_DISABLE

					CLR_BIT( MUSART1 -> CR1 , 10 );
 8000f50:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <MUSART_VidInit+0xc0>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	4a21      	ldr	r2, [pc, #132]	; (8000fdc <MUSART_VidInit+0xc0>)
 8000f56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f5a:	60d3      	str	r3, [r2, #12]

		#endif

		#if  USART1_INTERRUPT == INT_DISABLE

					CLR_BIT( MUSART1 -> CR1 , 5 );
 8000f5c:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <MUSART_VidInit+0xc0>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	4a1e      	ldr	r2, [pc, #120]	; (8000fdc <MUSART_VidInit+0xc0>)
 8000f62:	f023 0320 	bic.w	r3, r3, #32
 8000f66:	60d3      	str	r3, [r2, #12]
					CLR_BIT( MUSART1 -> CR1 , 6 );
 8000f68:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <MUSART_VidInit+0xc0>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	4a1b      	ldr	r2, [pc, #108]	; (8000fdc <MUSART_VidInit+0xc0>)
 8000f6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f72:	60d3      	str	r3, [r2, #12]
					CLR_BIT( MUSART1 -> CR1 , 7 );
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <MUSART_VidInit+0xc0>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	4a18      	ldr	r2, [pc, #96]	; (8000fdc <MUSART_VidInit+0xc0>)
 8000f7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f7e:	60d3      	str	r3, [r2, #12]

		#endif

		#if   USART1_TRANSMITTER == TRANSMITTER_ENABLE

					SET_BIT( MUSART1 -> CR1 , 3 );
 8000f80:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <MUSART_VidInit+0xc0>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	4a15      	ldr	r2, [pc, #84]	; (8000fdc <MUSART_VidInit+0xc0>)
 8000f86:	f043 0308 	orr.w	r3, r3, #8
 8000f8a:	60d3      	str	r3, [r2, #12]

		#endif

		#if   USART1_RECEIVER == RECEIVER_ENABLE

					SET_BIT( MUSART1 -> CR1 , 2 );
 8000f8c:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <MUSART_VidInit+0xc0>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <MUSART_VidInit+0xc0>)
 8000f92:	f043 0304 	orr.w	r3, r3, #4
 8000f96:	60d3      	str	r3, [r2, #12]

		#endif

		#if   USART1_STOP_BITS == ONE_STOP_BIT

					CLR_BIT( MUSART1 -> CR2 , 12 ); CLR_BIT( MUSART1 -> CR2 , 13 );
 8000f98:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <MUSART_VidInit+0xc0>)
 8000f9a:	691b      	ldr	r3, [r3, #16]
 8000f9c:	4a0f      	ldr	r2, [pc, #60]	; (8000fdc <MUSART_VidInit+0xc0>)
 8000f9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fa2:	6113      	str	r3, [r2, #16]
 8000fa4:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <MUSART_VidInit+0xc0>)
 8000fa6:	691b      	ldr	r3, [r3, #16]
 8000fa8:	4a0c      	ldr	r2, [pc, #48]	; (8000fdc <MUSART_VidInit+0xc0>)
 8000faa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000fae:	6113      	str	r3, [r2, #16]
					SET_BIT( MUSART1 -> CR2 , 12 ); SET_BIT( MUSART1 -> CR2 , 13 );


		#endif

		MUSART1 -> BRR = ( LOC_u64Mantissa << 4  ) | ( LOC_u64Fraction / 100 ) ;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	011a      	lsls	r2, r3, #4
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	490a      	ldr	r1, [pc, #40]	; (8000fe0 <MUSART_VidInit+0xc4>)
 8000fb8:	fba1 1303 	umull	r1, r3, r1, r3
 8000fbc:	095b      	lsrs	r3, r3, #5
 8000fbe:	4907      	ldr	r1, [pc, #28]	; (8000fdc <MUSART_VidInit+0xc0>)
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	608b      	str	r3, [r1, #8]
		SET_BIT( MUSART1 -> CR1 , 13 );
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <MUSART_VidInit+0xc0>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <MUSART_VidInit+0xc0>)
 8000fca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fce:	60d3      	str	r3, [r2, #12]
	#elif USART1_STATUS == USART1_DISABLE
		CLR_BIT( MUSART1 -> CR1 , 0 );

	#endif

}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40013800 	.word	0x40013800
 8000fe0:	51eb851f 	.word	0x51eb851f

08000fe4 <USART1_IRQHandler>:

	MUSART1_CallBack = ptr ;

}

void USART1_IRQHandler(void){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0

	MUSART1 -> SR = 0 ;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <USART1_IRQHandler+0x14>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
	MUSART1_CallBack();
 8000fee:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <USART1_IRQHandler+0x18>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4798      	blx	r3

}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40013800 	.word	0x40013800
 8000ffc:	20000028 	.word	0x20000028

08001000 <TIM2>:

u8 Received_distanceOne=0,Received_distanceTwo=0;
u8 Received_distanceThree=0,Received_distanceFour=0, Received_distanceFive = 0;

void TIM2(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	Is_First_Captured2++;
 8001004:	4b36      	ldr	r3, [pc, #216]	; (80010e0 <TIM2+0xe0>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	3301      	adds	r3, #1
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4b34      	ldr	r3, [pc, #208]	; (80010e0 <TIM2+0xe0>)
 8001010:	701a      	strb	r2, [r3, #0]
	Is_First_Captured1++;
 8001012:	4b34      	ldr	r3, [pc, #208]	; (80010e4 <TIM2+0xe4>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	3301      	adds	r3, #1
 800101a:	b2da      	uxtb	r2, r3
 800101c:	4b31      	ldr	r3, [pc, #196]	; (80010e4 <TIM2+0xe4>)
 800101e:	701a      	strb	r2, [r3, #0]
	if(GET_BIT(TIMER2_SR,1)==1)
 8001020:	4b31      	ldr	r3, [pc, #196]	; (80010e8 <TIM2+0xe8>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	085b      	lsrs	r3, r3, #1
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	2b01      	cmp	r3, #1
 800102c:	d127      	bne.n	800107e <TIM2+0x7e>
	{
		SET_BIT(TIMER2_SR,1);
 800102e:	4b2e      	ldr	r3, [pc, #184]	; (80010e8 <TIM2+0xe8>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a2d      	ldr	r2, [pc, #180]	; (80010e8 <TIM2+0xe8>)
 8001034:	f043 0302 	orr.w	r3, r3, #2
 8001038:	6013      	str	r3, [r2, #0]
		if(Is_First_Captured1==1)
 800103a:	4b2a      	ldr	r3, [pc, #168]	; (80010e4 <TIM2+0xe4>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b01      	cmp	r3, #1
 8001042:	d10a      	bne.n	800105a <TIM2+0x5a>
		{

			IC1_Val1=Timer2_VoidGetCapturedValue(Channle1);
 8001044:	2000      	movs	r0, #0
 8001046:	f7ff fc49 	bl	80008dc <Timer2_VoidGetCapturedValue>
 800104a:	4603      	mov	r3, r0
 800104c:	4a27      	ldr	r2, [pc, #156]	; (80010ec <TIM2+0xec>)
 800104e:	6013      	str	r3, [r2, #0]
			//Is_First_Captured = 1;  // set the first captured as true
			// Now change the polarity to falling edge

			Timer2_VoidChangePolarityOnEachChannle(Channle1,TIMER2_FALLING_EDGE);
 8001050:	2101      	movs	r1, #1
 8001052:	2000      	movs	r0, #0
 8001054:	f7ff fc02 	bl	800085c <Timer2_VoidChangePolarityOnEachChannle>
 8001058:	e011      	b.n	800107e <TIM2+0x7e>
		}
		else if (Is_First_Captured1==2)   // if the first is already captured
 800105a:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <TIM2+0xe4>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b02      	cmp	r3, #2
 8001062:	d10c      	bne.n	800107e <TIM2+0x7e>
		{
			IC1_Val2 = Timer2_VoidGetCapturedValue(Channle1) ; // read second value
 8001064:	2000      	movs	r0, #0
 8001066:	f7ff fc39 	bl	80008dc <Timer2_VoidGetCapturedValue>
 800106a:	4603      	mov	r3, r0
 800106c:	4a20      	ldr	r2, [pc, #128]	; (80010f0 <TIM2+0xf0>)
 800106e:	6013      	str	r3, [r2, #0]

			// Now change the polarity to rising edge

			Timer2_VoidChangePolarityOnEachChannle(Channle1,TIMER2_RISING_EDGE);
 8001070:	2100      	movs	r1, #0
 8001072:	2000      	movs	r0, #0
 8001074:	f7ff fbf2 	bl	800085c <Timer2_VoidChangePolarityOnEachChannle>
			// disable capture interrupt on each channel
			Timer2_VoidDisableIntOnEachChannle(Channle1);
 8001078:	2000      	movs	r0, #0
 800107a:	f7ff fbcf 	bl	800081c <Timer2_VoidDisableIntOnEachChannle>
		}
	}
	if(GET_BIT(TIMER2_SR,2)==1)
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <TIM2+0xe8>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	089b      	lsrs	r3, r3, #2
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b01      	cmp	r3, #1
 800108a:	d127      	bne.n	80010dc <TIM2+0xdc>
	{

		SET_BIT(TIMER2_SR,2);
 800108c:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <TIM2+0xe8>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a15      	ldr	r2, [pc, #84]	; (80010e8 <TIM2+0xe8>)
 8001092:	f043 0304 	orr.w	r3, r3, #4
 8001096:	6013      	str	r3, [r2, #0]

		if(Is_First_Captured2==1)
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <TIM2+0xe0>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d10a      	bne.n	80010b8 <TIM2+0xb8>
		{

			IC2_Val1=Timer2_VoidGetCapturedValue(Channle2);
 80010a2:	2001      	movs	r0, #1
 80010a4:	f7ff fc1a 	bl	80008dc <Timer2_VoidGetCapturedValue>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <TIM2+0xf4>)
 80010ac:	6013      	str	r3, [r2, #0]
			//Is_First_Captured = 1;  // set the first captured as true
			// Now change the polarity to falling edge

			Timer2_VoidChangePolarityOnEachChannle(Channle2,TIMER2_FALLING_EDGE);
 80010ae:	2101      	movs	r1, #1
 80010b0:	2001      	movs	r0, #1
 80010b2:	f7ff fbd3 	bl	800085c <Timer2_VoidChangePolarityOnEachChannle>
			Timer2_VoidChangePolarityOnEachChannle(Channle2,TIMER2_RISING_EDGE);
			// disable capture interrupt on each channel
			Timer2_VoidDisableIntOnEachChannle(Channle2);
		}
	}
}
 80010b6:	e011      	b.n	80010dc <TIM2+0xdc>
		else if (Is_First_Captured2==2)   // if the first is already captured
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <TIM2+0xe0>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d10c      	bne.n	80010dc <TIM2+0xdc>
			IC2_Val2 = Timer2_VoidGetCapturedValue(Channle2) ; // read second value
 80010c2:	2001      	movs	r0, #1
 80010c4:	f7ff fc0a 	bl	80008dc <Timer2_VoidGetCapturedValue>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <TIM2+0xf8>)
 80010cc:	6013      	str	r3, [r2, #0]
			Timer2_VoidChangePolarityOnEachChannle(Channle2,TIMER2_RISING_EDGE);
 80010ce:	2100      	movs	r1, #0
 80010d0:	2001      	movs	r0, #1
 80010d2:	f7ff fbc3 	bl	800085c <Timer2_VoidChangePolarityOnEachChannle>
			Timer2_VoidDisableIntOnEachChannle(Channle2);
 80010d6:	2001      	movs	r0, #1
 80010d8:	f7ff fba0 	bl	800081c <Timer2_VoidDisableIntOnEachChannle>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000040 	.word	0x20000040
 80010e4:	20000034 	.word	0x20000034
 80010e8:	40000010 	.word	0x40000010
 80010ec:	2000002c 	.word	0x2000002c
 80010f0:	20000030 	.word	0x20000030
 80010f4:	20000038 	.word	0x20000038
 80010f8:	2000003c 	.word	0x2000003c

080010fc <TIM3>:


void TIM3(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	Is_First_Captured3++;
 8001100:	4b69      	ldr	r3, [pc, #420]	; (80012a8 <TIM3+0x1ac>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	3301      	adds	r3, #1
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4b67      	ldr	r3, [pc, #412]	; (80012a8 <TIM3+0x1ac>)
 800110c:	701a      	strb	r2, [r3, #0]
	Is_First_Captured4++;
 800110e:	4b67      	ldr	r3, [pc, #412]	; (80012ac <TIM3+0x1b0>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	3301      	adds	r3, #1
 8001116:	b2da      	uxtb	r2, r3
 8001118:	4b64      	ldr	r3, [pc, #400]	; (80012ac <TIM3+0x1b0>)
 800111a:	701a      	strb	r2, [r3, #0]
	Is_First_Captured5++;
 800111c:	4b64      	ldr	r3, [pc, #400]	; (80012b0 <TIM3+0x1b4>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	3301      	adds	r3, #1
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4b62      	ldr	r3, [pc, #392]	; (80012b0 <TIM3+0x1b4>)
 8001128:	701a      	strb	r2, [r3, #0]
	if(GET_BIT(TIMER3_SR,1)==1)
 800112a:	4b62      	ldr	r3, [pc, #392]	; (80012b4 <TIM3+0x1b8>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	085b      	lsrs	r3, r3, #1
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	2b01      	cmp	r3, #1
 8001136:	d127      	bne.n	8001188 <TIM3+0x8c>
	{

		SET_BIT(TIMER3_SR,1);
 8001138:	4b5e      	ldr	r3, [pc, #376]	; (80012b4 <TIM3+0x1b8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a5d      	ldr	r2, [pc, #372]	; (80012b4 <TIM3+0x1b8>)
 800113e:	f043 0302 	orr.w	r3, r3, #2
 8001142:	6013      	str	r3, [r2, #0]

		if(Is_First_Captured3==1)
 8001144:	4b58      	ldr	r3, [pc, #352]	; (80012a8 <TIM3+0x1ac>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b01      	cmp	r3, #1
 800114c:	d10a      	bne.n	8001164 <TIM3+0x68>
		{

			IC3_Val1=Timer3_VoidGetCapturedValue(Channle1);
 800114e:	2000      	movs	r0, #0
 8001150:	f7ff fda4 	bl	8000c9c <Timer3_VoidGetCapturedValue>
 8001154:	4603      	mov	r3, r0
 8001156:	4a58      	ldr	r2, [pc, #352]	; (80012b8 <TIM3+0x1bc>)
 8001158:	6013      	str	r3, [r2, #0]
			//Is_First_Captured = 1;  // set the first captured as true
			// Now change the polarity to falling edge
			Timer3_VoidChangePolarityOnEachChannle(Channle1,TIMER3_FALLING_EDGE);
 800115a:	2101      	movs	r1, #1
 800115c:	2000      	movs	r0, #0
 800115e:	f7ff fd2d 	bl	8000bbc <Timer3_VoidChangePolarityOnEachChannle>
 8001162:	e011      	b.n	8001188 <TIM3+0x8c>
		}
		else if (Is_First_Captured3==2)   // if the first is already captured
 8001164:	4b50      	ldr	r3, [pc, #320]	; (80012a8 <TIM3+0x1ac>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d10c      	bne.n	8001188 <TIM3+0x8c>
		{
			IC3_Val2 = Timer3_VoidGetCapturedValue(Channle1) ; // read second value
 800116e:	2000      	movs	r0, #0
 8001170:	f7ff fd94 	bl	8000c9c <Timer3_VoidGetCapturedValue>
 8001174:	4603      	mov	r3, r0
 8001176:	4a51      	ldr	r2, [pc, #324]	; (80012bc <TIM3+0x1c0>)
 8001178:	6013      	str	r3, [r2, #0]

			// Now change the polarity to rising edge

			Timer3_VoidChangePolarityOnEachChannle(Channle1,TIMER3_RISING_EDGE);
 800117a:	2100      	movs	r1, #0
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff fd1d 	bl	8000bbc <Timer3_VoidChangePolarityOnEachChannle>
			// disable capture interrupt on each channel
			Timer3_VoidDisableIntOnEachChannle(Channle1);
 8001182:	2000      	movs	r0, #0
 8001184:	f7ff fce2 	bl	8000b4c <Timer3_VoidDisableIntOnEachChannle>


		}
	}
	if(GET_BIT(TIMER3_SR,2)==1)
 8001188:	4b4a      	ldr	r3, [pc, #296]	; (80012b4 <TIM3+0x1b8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	089b      	lsrs	r3, r3, #2
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	2b01      	cmp	r3, #1
 8001194:	d127      	bne.n	80011e6 <TIM3+0xea>
	{

		SET_BIT(TIMER3_SR,2);
 8001196:	4b47      	ldr	r3, [pc, #284]	; (80012b4 <TIM3+0x1b8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a46      	ldr	r2, [pc, #280]	; (80012b4 <TIM3+0x1b8>)
 800119c:	f043 0304 	orr.w	r3, r3, #4
 80011a0:	6013      	str	r3, [r2, #0]

		if(Is_First_Captured4==1)
 80011a2:	4b42      	ldr	r3, [pc, #264]	; (80012ac <TIM3+0x1b0>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d10a      	bne.n	80011c2 <TIM3+0xc6>
		{

			IC4_Val1=Timer3_VoidGetCapturedValue(Channle2);
 80011ac:	2001      	movs	r0, #1
 80011ae:	f7ff fd75 	bl	8000c9c <Timer3_VoidGetCapturedValue>
 80011b2:	4603      	mov	r3, r0
 80011b4:	4a42      	ldr	r2, [pc, #264]	; (80012c0 <TIM3+0x1c4>)
 80011b6:	6013      	str	r3, [r2, #0]
			//Is_First_Captured = 1;  // set the first captured as true
			// Now change the polarity to falling edge

			Timer3_VoidChangePolarityOnEachChannle(Channle2,TIMER3_FALLING_EDGE);
 80011b8:	2101      	movs	r1, #1
 80011ba:	2001      	movs	r0, #1
 80011bc:	f7ff fcfe 	bl	8000bbc <Timer3_VoidChangePolarityOnEachChannle>
 80011c0:	e011      	b.n	80011e6 <TIM3+0xea>
		}
		else if (Is_First_Captured4==2)   // if the first is already captured
 80011c2:	4b3a      	ldr	r3, [pc, #232]	; (80012ac <TIM3+0x1b0>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d10c      	bne.n	80011e6 <TIM3+0xea>
		{
			IC4_Val2 = Timer3_VoidGetCapturedValue(Channle2) ; // read second value
 80011cc:	2001      	movs	r0, #1
 80011ce:	f7ff fd65 	bl	8000c9c <Timer3_VoidGetCapturedValue>
 80011d2:	4603      	mov	r3, r0
 80011d4:	4a3b      	ldr	r2, [pc, #236]	; (80012c4 <TIM3+0x1c8>)
 80011d6:	6013      	str	r3, [r2, #0]

			// Now change the polarity to rising edge

			Timer3_VoidChangePolarityOnEachChannle(Channle2,TIMER3_RISING_EDGE);
 80011d8:	2100      	movs	r1, #0
 80011da:	2001      	movs	r0, #1
 80011dc:	f7ff fcee 	bl	8000bbc <Timer3_VoidChangePolarityOnEachChannle>
			// disable capture interrupt on each channel
			Timer3_VoidDisableIntOnEachChannle(Channle2);
 80011e0:	2001      	movs	r0, #1
 80011e2:	f7ff fcb3 	bl	8000b4c <Timer3_VoidDisableIntOnEachChannle>
		}
	}
	if(GET_BIT(TIMER3_SR,3)==1)
 80011e6:	4b33      	ldr	r3, [pc, #204]	; (80012b4 <TIM3+0x1b8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	08db      	lsrs	r3, r3, #3
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d127      	bne.n	8001244 <TIM3+0x148>
	{
		SET_BIT(TIMER3_SR,3);
 80011f4:	4b2f      	ldr	r3, [pc, #188]	; (80012b4 <TIM3+0x1b8>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a2e      	ldr	r2, [pc, #184]	; (80012b4 <TIM3+0x1b8>)
 80011fa:	f043 0308 	orr.w	r3, r3, #8
 80011fe:	6013      	str	r3, [r2, #0]

		if(Is_First_Captured5==1)
 8001200:	4b2b      	ldr	r3, [pc, #172]	; (80012b0 <TIM3+0x1b4>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b01      	cmp	r3, #1
 8001208:	d10a      	bne.n	8001220 <TIM3+0x124>
		{

			IC5_Val1=Timer3_VoidGetCapturedValue(Channle3);
 800120a:	2002      	movs	r0, #2
 800120c:	f7ff fd46 	bl	8000c9c <Timer3_VoidGetCapturedValue>
 8001210:	4603      	mov	r3, r0
 8001212:	4a2d      	ldr	r2, [pc, #180]	; (80012c8 <TIM3+0x1cc>)
 8001214:	6013      	str	r3, [r2, #0]
			//Is_First_Captured = 1;  // set the first captured as true
			// Now change the polarity to falling edge

			Timer3_VoidChangePolarityOnEachChannle(Channle3,TIMER3_FALLING_EDGE);
 8001216:	2101      	movs	r1, #1
 8001218:	2002      	movs	r0, #2
 800121a:	f7ff fccf 	bl	8000bbc <Timer3_VoidChangePolarityOnEachChannle>
 800121e:	e011      	b.n	8001244 <TIM3+0x148>
		}
		else if (Is_First_Captured5==2)   // if the first is already captured
 8001220:	4b23      	ldr	r3, [pc, #140]	; (80012b0 <TIM3+0x1b4>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d10c      	bne.n	8001244 <TIM3+0x148>
		{
			IC5_Val2 = Timer3_VoidGetCapturedValue(Channle3) ; // read second value
 800122a:	2002      	movs	r0, #2
 800122c:	f7ff fd36 	bl	8000c9c <Timer3_VoidGetCapturedValue>
 8001230:	4603      	mov	r3, r0
 8001232:	4a26      	ldr	r2, [pc, #152]	; (80012cc <TIM3+0x1d0>)
 8001234:	6013      	str	r3, [r2, #0]

			// Now change the polarity to rising edge

			Timer3_VoidChangePolarityOnEachChannle(Channle3,TIMER3_RISING_EDGE);
 8001236:	2100      	movs	r1, #0
 8001238:	2002      	movs	r0, #2
 800123a:	f7ff fcbf 	bl	8000bbc <Timer3_VoidChangePolarityOnEachChannle>
			// disable capture interrupt on each channel
			Timer3_VoidDisableIntOnEachChannle(Channle3);
 800123e:	2002      	movs	r0, #2
 8001240:	f7ff fc84 	bl	8000b4c <Timer3_VoidDisableIntOnEachChannle>
		}
	}
	if(GET_BIT(TIMER3_SR,4)==1)
 8001244:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <TIM3+0x1b8>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	091b      	lsrs	r3, r3, #4
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b01      	cmp	r3, #1
 8001250:	d127      	bne.n	80012a2 <TIM3+0x1a6>
	{
		SET_BIT(TIMER3_SR,4);
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <TIM3+0x1b8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a17      	ldr	r2, [pc, #92]	; (80012b4 <TIM3+0x1b8>)
 8001258:	f043 0310 	orr.w	r3, r3, #16
 800125c:	6013      	str	r3, [r2, #0]

		if(Is_First_Captured5==1)
 800125e:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <TIM3+0x1b4>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b01      	cmp	r3, #1
 8001266:	d10a      	bne.n	800127e <TIM3+0x182>
		{

			IC5_Val1=Timer3_VoidGetCapturedValue(Channle4);
 8001268:	2003      	movs	r0, #3
 800126a:	f7ff fd17 	bl	8000c9c <Timer3_VoidGetCapturedValue>
 800126e:	4603      	mov	r3, r0
 8001270:	4a15      	ldr	r2, [pc, #84]	; (80012c8 <TIM3+0x1cc>)
 8001272:	6013      	str	r3, [r2, #0]
			//Is_First_Captured = 1;  // set the first captured as true
			// Now change the polarity to falling edge

			Timer3_VoidChangePolarityOnEachChannle(Channle4,TIMER3_FALLING_EDGE);
 8001274:	2101      	movs	r1, #1
 8001276:	2003      	movs	r0, #3
 8001278:	f7ff fca0 	bl	8000bbc <Timer3_VoidChangePolarityOnEachChannle>
			Timer3_VoidChangePolarityOnEachChannle(Channle4,TIMER3_RISING_EDGE);
			// disable capture interrupt on each channel
			Timer3_VoidDisableIntOnEachChannle(Channle4);
		}
	}
}
 800127c:	e011      	b.n	80012a2 <TIM3+0x1a6>
		else if (Is_First_Captured5==2)   // if the first is already captured
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <TIM3+0x1b4>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d10c      	bne.n	80012a2 <TIM3+0x1a6>
			IC5_Val2 = Timer3_VoidGetCapturedValue(Channle4) ; // read second value
 8001288:	2003      	movs	r0, #3
 800128a:	f7ff fd07 	bl	8000c9c <Timer3_VoidGetCapturedValue>
 800128e:	4603      	mov	r3, r0
 8001290:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <TIM3+0x1d0>)
 8001292:	6013      	str	r3, [r2, #0]
			Timer3_VoidChangePolarityOnEachChannle(Channle4,TIMER3_RISING_EDGE);
 8001294:	2100      	movs	r1, #0
 8001296:	2003      	movs	r0, #3
 8001298:	f7ff fc90 	bl	8000bbc <Timer3_VoidChangePolarityOnEachChannle>
			Timer3_VoidDisableIntOnEachChannle(Channle4);
 800129c:	2003      	movs	r0, #3
 800129e:	f7ff fc55 	bl	8000b4c <Timer3_VoidDisableIntOnEachChannle>
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	2000004c 	.word	0x2000004c
 80012ac:	2000005c 	.word	0x2000005c
 80012b0:	20000068 	.word	0x20000068
 80012b4:	40000410 	.word	0x40000410
 80012b8:	20000044 	.word	0x20000044
 80012bc:	20000048 	.word	0x20000048
 80012c0:	20000050 	.word	0x20000050
 80012c4:	20000054 	.word	0x20000054
 80012c8:	20000060 	.word	0x20000060
 80012cc:	20000064 	.word	0x20000064

080012d0 <Ultrasonic_TrigFour>:
	MGPIO_VidSetPinValue(GPIOB, PIN0, HIGH);  // pull the TRIG pin HIGH
	_delay_us(10);  // wait for 10 us
	MGPIO_VidSetPinValue(GPIOB, PIN0, LOW);  // pull the TRIG pin low
}
void Ultrasonic_TrigFour (void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	MGPIO_VidSetPinValue(GPIOB, PIN10, HIGH);  // pull the TRIG pin HIGH
 80012d4:	2201      	movs	r2, #1
 80012d6:	210a      	movs	r1, #10
 80012d8:	2001      	movs	r0, #1
 80012da:	f7ff f84f 	bl	800037c <MGPIO_VidSetPinValue>
	_delay_us(10);  // wait for 10 us
 80012de:	200a      	movs	r0, #10
 80012e0:	f7fe ff62 	bl	80001a8 <_delay_us>
	MGPIO_VidSetPinValue(GPIOB, PIN10, LOW);  // pull the TRIG pin low
 80012e4:	2200      	movs	r2, #0
 80012e6:	210a      	movs	r1, #10
 80012e8:	2001      	movs	r0, #1
 80012ea:	f7ff f847 	bl	800037c <MGPIO_VidSetPinValue>
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <Ultrasonic_ReadFour>:
	Is_First_Captured3=0;
	Timer3_VoidEnableIntOnEachChannle(Channle1);
	return Distance3;
}
u8 Ultrasonic_ReadFour (void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	Timer3_VoidSetPreload(0);
 80012f8:	2000      	movs	r0, #0
 80012fa:	f7ff fbdf 	bl	8000abc <Timer3_VoidSetPreload>
	Ultrasonic_TrigFour();
 80012fe:	f7ff ffe7 	bl	80012d0 <Ultrasonic_TrigFour>
	while(Is_First_Captured4<2);
 8001302:	bf00      	nop
 8001304:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <Ultrasonic_ReadFour+0x50>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b01      	cmp	r3, #1
 800130c:	d9fa      	bls.n	8001304 <Ultrasonic_ReadFour+0x10>
	Difference4 = IC4_Val2-IC4_Val1;
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <Ultrasonic_ReadFour+0x54>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <Ultrasonic_ReadFour+0x58>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	4a0d      	ldr	r2, [pc, #52]	; (8001350 <Ultrasonic_ReadFour+0x5c>)
 800131a:	6013      	str	r3, [r2, #0]
	Distance4 = (Difference4 /58);
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <Ultrasonic_ReadFour+0x5c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0c      	ldr	r2, [pc, #48]	; (8001354 <Ultrasonic_ReadFour+0x60>)
 8001322:	fba2 2303 	umull	r2, r3, r2, r3
 8001326:	095b      	lsrs	r3, r3, #5
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <Ultrasonic_ReadFour+0x64>)
 800132c:	701a      	strb	r2, [r3, #0]
	Is_First_Captured4=0;
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <Ultrasonic_ReadFour+0x50>)
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
	Timer3_VoidEnableIntOnEachChannle(Channle2);
 8001334:	2001      	movs	r0, #1
 8001336:	f7ff fbd1 	bl	8000adc <Timer3_VoidEnableIntOnEachChannle>
	return Distance4;
 800133a:	4b07      	ldr	r3, [pc, #28]	; (8001358 <Ultrasonic_ReadFour+0x64>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	b2db      	uxtb	r3, r3
}
 8001340:	4618      	mov	r0, r3
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2000005c 	.word	0x2000005c
 8001348:	20000054 	.word	0x20000054
 800134c:	20000050 	.word	0x20000050
 8001350:	20000058 	.word	0x20000058
 8001354:	8d3dcb09 	.word	0x8d3dcb09
 8001358:	2000005d 	.word	0x2000005d

0800135c <APP_voidUltrasonicUnitTest>:
}



void APP_voidUltrasonicUnitTest(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0

	u16 LOC_u16ReadDistance;

	LOC_u16ReadDistance = Ultrasonic_ReadFour();
 8001362:	f7ff ffc7 	bl	80012f4 <Ultrasonic_ReadFour>
 8001366:	4603      	mov	r3, r0
 8001368:	80fb      	strh	r3, [r7, #6]
	_delay_ms(100);
 800136a:	2064      	movs	r0, #100	; 0x64
 800136c:	f7fe ff00 	bl	8000170 <_delay_ms>

	if(LOC_u16ReadDistance < 10)
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	2b09      	cmp	r3, #9
 8001374:	d804      	bhi.n	8001380 <APP_voidUltrasonicUnitTest+0x24>
	{
//		MOTOR_RF_STOP();
		MOTOR_LF_STOP();
 8001376:	f7ff f8eb 	bl	8000550 <MOTOR_LF_STOP>
		//MOTOR_LF_GO_BACKWARD();
		//MOTOR_RF_GO_BACKWARD();
		MOTOR_RF_GO_FORWARD();
 800137a:	f7ff f8b3 	bl	80004e4 <MOTOR_RF_GO_FORWARD>

		MOTOR_LF_GO_FORWARD();
		MOTOR_RF_STOP();
	}

}
 800137e:	e006      	b.n	800138e <APP_voidUltrasonicUnitTest+0x32>
	else if(LOC_u16ReadDistance > 10)
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	2b0a      	cmp	r3, #10
 8001384:	d903      	bls.n	800138e <APP_voidUltrasonicUnitTest+0x32>
		MOTOR_LF_GO_FORWARD();
 8001386:	f7ff f8d5 	bl	8000534 <MOTOR_LF_GO_FORWARD>
		MOTOR_RF_STOP();
 800138a:	f7ff f8b9 	bl	8000500 <MOTOR_RF_STOP>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <main>:

int main(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0

	MRCC_VidInit();
 800139c:	f7ff f8fe 	bl	800059c <MRCC_VidInit>
	MRCC_VidEnablePeripheralClock(APB1_BUS, TIM2_RCC);
 80013a0:	2100      	movs	r1, #0
 80013a2:	2001      	movs	r0, #1
 80013a4:	f7ff f92e 	bl	8000604 <MRCC_VidEnablePeripheralClock>
	MRCC_VidEnablePeripheralClock(APB1_BUS, TIM3_RCC);
 80013a8:	2101      	movs	r1, #1
 80013aa:	2001      	movs	r0, #1
 80013ac:	f7ff f92a 	bl	8000604 <MRCC_VidEnablePeripheralClock>
	MRCC_VidEnablePeripheralClock(APB2_BUS, GPIOA_RCC);
 80013b0:	2102      	movs	r1, #2
 80013b2:	2002      	movs	r0, #2
 80013b4:	f7ff f926 	bl	8000604 <MRCC_VidEnablePeripheralClock>
	MRCC_VidEnablePeripheralClock(APB2_BUS, GPIOB_RCC);
 80013b8:	2103      	movs	r1, #3
 80013ba:	2002      	movs	r0, #2
 80013bc:	f7ff f922 	bl	8000604 <MRCC_VidEnablePeripheralClock>
	MRCC_VidEnablePeripheralClock(APB1_BUS, TIM4_RCC);
 80013c0:	2102      	movs	r1, #2
 80013c2:	2001      	movs	r0, #1
 80013c4:	f7ff f91e 	bl	8000604 <MRCC_VidEnablePeripheralClock>

	/*Enable Interupt for each timer*/
	MNVIC_VidEnablePeripheral(TIM2_C);
 80013c8:	201c      	movs	r0, #28
 80013ca:	f7ff f8cf 	bl	800056c <MNVIC_VidEnablePeripheral>
	MNVIC_VidEnablePeripheral(TIM3_C);
 80013ce:	201d      	movs	r0, #29
 80013d0:	f7ff f8cc 	bl	800056c <MNVIC_VidEnablePeripheral>
	//timer2
	/*Echo1*/
	MGPIO_VidSetPinDirection(GPIOA,PIN0,INPUT_FLOATING);
 80013d4:	2204      	movs	r2, #4
 80013d6:	2100      	movs	r1, #0
 80013d8:	2000      	movs	r0, #0
 80013da:	f7fe fefd 	bl	80001d8 <MGPIO_VidSetPinDirection>
	/*Echo2*/
	MGPIO_VidSetPinDirection(GPIOA,PIN1,INPUT_FLOATING);
 80013de:	2204      	movs	r2, #4
 80013e0:	2101      	movs	r1, #1
 80013e2:	2000      	movs	r0, #0
 80013e4:	f7fe fef8 	bl	80001d8 <MGPIO_VidSetPinDirection>
	/*Echo3*/
	MGPIO_VidSetPinDirection(GPIOA,PIN6,INPUT_FLOATING);
 80013e8:	2204      	movs	r2, #4
 80013ea:	2106      	movs	r1, #6
 80013ec:	2000      	movs	r0, #0
 80013ee:	f7fe fef3 	bl	80001d8 <MGPIO_VidSetPinDirection>
	/*Echo4*/
	MGPIO_VidSetPinDirection(GPIOA,PIN7,INPUT_FLOATING);
 80013f2:	2204      	movs	r2, #4
 80013f4:	2107      	movs	r1, #7
 80013f6:	2000      	movs	r0, #0
 80013f8:	f7fe feee 	bl	80001d8 <MGPIO_VidSetPinDirection>
	/*Echo5*/
	MGPIO_VidSetPinDirection(GPIOB,PIN1,INPUT_FLOATING);
 80013fc:	2204      	movs	r2, #4
 80013fe:	2101      	movs	r1, #1
 8001400:	2001      	movs	r0, #1
 8001402:	f7fe fee9 	bl	80001d8 <MGPIO_VidSetPinDirection>

	/*TIRG1*/
	MGPIO_VidSetPinDirection(GPIOB, PIN5, OUTPUT_SPEED_10MHZ_PP);
 8001406:	2201      	movs	r2, #1
 8001408:	2105      	movs	r1, #5
 800140a:	2001      	movs	r0, #1
 800140c:	f7fe fee4 	bl	80001d8 <MGPIO_VidSetPinDirection>
	/*TIRG2*/
	MGPIO_VidSetPinDirection(GPIOA, PIN2, OUTPUT_SPEED_10MHZ_PP);
 8001410:	2201      	movs	r2, #1
 8001412:	2102      	movs	r1, #2
 8001414:	2000      	movs	r0, #0
 8001416:	f7fe fedf 	bl	80001d8 <MGPIO_VidSetPinDirection>
	/*TIRG3*/
	MGPIO_VidSetPinDirection(GPIOB, PIN0, OUTPUT_SPEED_10MHZ_PP);
 800141a:	2201      	movs	r2, #1
 800141c:	2100      	movs	r1, #0
 800141e:	2001      	movs	r0, #1
 8001420:	f7fe feda 	bl	80001d8 <MGPIO_VidSetPinDirection>
	/*TIRG4*/
	MGPIO_VidSetPinDirection(GPIOB, PIN10, OUTPUT_SPEED_10MHZ_PP);
 8001424:	2201      	movs	r2, #1
 8001426:	210a      	movs	r1, #10
 8001428:	2001      	movs	r0, #1
 800142a:	f7fe fed5 	bl	80001d8 <MGPIO_VidSetPinDirection>
	/*TIRG5*/
	MGPIO_VidSetPinDirection(GPIOA, PIN3, OUTPUT_SPEED_10MHZ_PP);
 800142e:	2201      	movs	r2, #1
 8001430:	2103      	movs	r1, #3
 8001432:	2000      	movs	r0, #0
 8001434:	f7fe fed0 	bl	80001d8 <MGPIO_VidSetPinDirection>

	/*SetCallBack*/
	Timer2_u8InputCaptureSetCallBack(&TIM2);
 8001438:	4810      	ldr	r0, [pc, #64]	; (800147c <main+0xe4>)
 800143a:	f7ff f9db 	bl	80007f4 <Timer2_u8InputCaptureSetCallBack>
	Timer3_u8InputCaptureSetCallBack(&TIM3);
 800143e:	4810      	ldr	r0, [pc, #64]	; (8001480 <main+0xe8>)
 8001440:	f7ff fb28 	bl	8000a94 <Timer3_u8InputCaptureSetCallBack>
	/*Inizailize channle*/
	TIMER2_VoidInitInputCapture(Channle1);
 8001444:	2000      	movs	r0, #0
 8001446:	f7ff f96f 	bl	8000728 <TIMER2_VoidInitInputCapture>
	TIMER2_VoidInitInputCapture(Channle2);
 800144a:	2001      	movs	r0, #1
 800144c:	f7ff f96c 	bl	8000728 <TIMER2_VoidInitInputCapture>
	TIMER3_VoidInitInputCapture(Channle1);
 8001450:	2000      	movs	r0, #0
 8001452:	f7ff fa6f 	bl	8000934 <TIMER3_VoidInitInputCapture>
	TIMER3_VoidInitInputCapture(Channle2);
 8001456:	2001      	movs	r0, #1
 8001458:	f7ff fa6c 	bl	8000934 <TIMER3_VoidInitInputCapture>
	TIMER3_VoidInitInputCapture(Channle4);
 800145c:	2003      	movs	r0, #3
 800145e:	f7ff fa69 	bl	8000934 <TIMER3_VoidInitInputCapture>


	MOTORS_Void_MotorInit();
 8001462:	f7ff f805 	bl	8000470 <MOTORS_Void_MotorInit>
	//	MGPIO_VidSetPinDirection(GPIOA, PIN7, OUTPUT_SPEED_2MHZ_PP);




	MUSART_VidInit();
 8001466:	f7ff fd59 	bl	8000f1c <MUSART_VidInit>


	MOTOR_RF_Void_MotorSetSpeed(100);
 800146a:	2064      	movs	r0, #100	; 0x64
 800146c:	f7ff f82e 	bl	80004cc <MOTOR_RF_Void_MotorSetSpeed>
	MOTOR_LF_Void_MotorSetSpeed(100);
 8001470:	2064      	movs	r0, #100	; 0x64
 8001472:	f7ff f853 	bl	800051c <MOTOR_LF_Void_MotorSetSpeed>
//	MOTOR_LF_Void_MotorSetSpeed(75);

	/* Loop forever */
	for(;;)
	{
		APP_voidUltrasonicUnitTest();
 8001476:	f7ff ff71 	bl	800135c <APP_voidUltrasonicUnitTest>
 800147a:	e7fc      	b.n	8001476 <main+0xde>
 800147c:	08001001 	.word	0x08001001
 8001480:	080010fd 	.word	0x080010fd

08001484 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001484:	480d      	ldr	r0, [pc, #52]	; (80014bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001486:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001488:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800148c:	480c      	ldr	r0, [pc, #48]	; (80014c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800148e:	490d      	ldr	r1, [pc, #52]	; (80014c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001490:	4a0d      	ldr	r2, [pc, #52]	; (80014c8 <LoopForever+0xe>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001494:	e002      	b.n	800149c <LoopCopyDataInit>

08001496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149a:	3304      	adds	r3, #4

0800149c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800149c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a0:	d3f9      	bcc.n	8001496 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a2:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80014a4:	4c0a      	ldr	r4, [pc, #40]	; (80014d0 <LoopForever+0x16>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a8:	e001      	b.n	80014ae <LoopFillZerobss>

080014aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ac:	3204      	adds	r2, #4

080014ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b0:	d3fb      	bcc.n	80014aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80014b2:	f000 f811 	bl	80014d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014b6:	f7ff ff6f 	bl	8001398 <main>

080014ba <LoopForever>:

LoopForever:
  b LoopForever
 80014ba:	e7fe      	b.n	80014ba <LoopForever>
  ldr   r0, =_estack
 80014bc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80014c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80014c8:	08001540 	.word	0x08001540
  ldr r2, =_sbss
 80014cc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80014d0:	2000006c 	.word	0x2000006c

080014d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014d4:	e7fe      	b.n	80014d4 <ADC1_2_IRQHandler>
	...

080014d8 <__libc_init_array>:
 80014d8:	b570      	push	{r4, r5, r6, lr}
 80014da:	2600      	movs	r6, #0
 80014dc:	4d0c      	ldr	r5, [pc, #48]	; (8001510 <__libc_init_array+0x38>)
 80014de:	4c0d      	ldr	r4, [pc, #52]	; (8001514 <__libc_init_array+0x3c>)
 80014e0:	1b64      	subs	r4, r4, r5
 80014e2:	10a4      	asrs	r4, r4, #2
 80014e4:	42a6      	cmp	r6, r4
 80014e6:	d109      	bne.n	80014fc <__libc_init_array+0x24>
 80014e8:	f000 f81a 	bl	8001520 <_init>
 80014ec:	2600      	movs	r6, #0
 80014ee:	4d0a      	ldr	r5, [pc, #40]	; (8001518 <__libc_init_array+0x40>)
 80014f0:	4c0a      	ldr	r4, [pc, #40]	; (800151c <__libc_init_array+0x44>)
 80014f2:	1b64      	subs	r4, r4, r5
 80014f4:	10a4      	asrs	r4, r4, #2
 80014f6:	42a6      	cmp	r6, r4
 80014f8:	d105      	bne.n	8001506 <__libc_init_array+0x2e>
 80014fa:	bd70      	pop	{r4, r5, r6, pc}
 80014fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001500:	4798      	blx	r3
 8001502:	3601      	adds	r6, #1
 8001504:	e7ee      	b.n	80014e4 <__libc_init_array+0xc>
 8001506:	f855 3b04 	ldr.w	r3, [r5], #4
 800150a:	4798      	blx	r3
 800150c:	3601      	adds	r6, #1
 800150e:	e7f2      	b.n	80014f6 <__libc_init_array+0x1e>
 8001510:	08001538 	.word	0x08001538
 8001514:	08001538 	.word	0x08001538
 8001518:	08001538 	.word	0x08001538
 800151c:	0800153c 	.word	0x0800153c

08001520 <_init>:
 8001520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001522:	bf00      	nop
 8001524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001526:	bc08      	pop	{r3}
 8001528:	469e      	mov	lr, r3
 800152a:	4770      	bx	lr

0800152c <_fini>:
 800152c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800152e:	bf00      	nop
 8001530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001532:	bc08      	pop	{r3}
 8001534:	469e      	mov	lr, r3
 8001536:	4770      	bx	lr


AutoParkingVersion1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001770  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080018a0  080018a0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080018a0  080018a0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080018a0  080018a0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018a0  080018a0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018a0  080018a0  000118a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018a4  080018a4  000118a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080018a8  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000004  080018ac  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  080018ac  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000018df  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000aeb  00000000  00000000  0002194f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000378  00000000  00000000  00022440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000026f  00000000  00000000  000227b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001a0f  00000000  00000000  00022a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001cdf  00000000  00000000  00024436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000065f8  00000000  00000000  00026115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000ae0  00000000  00000000  0002c710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0002d1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08001888 	.word	0x08001888

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08001888 	.word	0x08001888

08000170 <_delay_ms>:
#include"SYSTICK_INTERFACE.h"

#include"DELAY_INTERFACE.h"


void _delay_ms( u32 Copy_u32Time ){
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]

	MSTK_VidInit();
 8000178:	f000 faa4 	bl	80006c4 <MSTK_VidInit>
	/* Disable INT */
	MSTK_VidINTStatus( MSTK_INT_DIS );
 800017c:	2000      	movs	r0, #0
 800017e:	f000 fac5 	bl	800070c <MSTK_VidINTStatus>
	MSTK_VidStart( Copy_u32Time * 1000 );
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000188:	fb02 f303 	mul.w	r3, r2, r3
 800018c:	4618      	mov	r0, r3
 800018e:	f000 faa5 	bl	80006dc <MSTK_VidStart>
	/* Wiat Flag Polling */
	while( MSTK_u8ReadFlag() == 0 );
 8000192:	bf00      	nop
 8000194:	f000 fad4 	bl	8000740 <MSTK_u8ReadFlag>
 8000198:	4603      	mov	r3, r0
 800019a:	2b00      	cmp	r3, #0
 800019c:	d0fa      	beq.n	8000194 <_delay_ms+0x24>

}
 800019e:	bf00      	nop
 80001a0:	bf00      	nop
 80001a2:	3708      	adds	r7, #8
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}

080001a8 <_delay_us>:


/* Suppose That The Clock System (AHB) = 8MHZ EXT & The Systick Clock Is = AHB/8 */
void _delay_us( u32 Copy_u32Time ){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]

	MSTK_VidInit();
 80001b0:	f000 fa88 	bl	80006c4 <MSTK_VidInit>
	/* Disable INT */
	MSTK_VidINTStatus( MSTK_INT_DIS );
 80001b4:	2000      	movs	r0, #0
 80001b6:	f000 faa9 	bl	800070c <MSTK_VidINTStatus>
	MSTK_VidStart( Copy_u32Time );
 80001ba:	6878      	ldr	r0, [r7, #4]
 80001bc:	f000 fa8e 	bl	80006dc <MSTK_VidStart>
	/* Wiat Flag Polling */
	while( MSTK_u8ReadFlag() == 0 );
 80001c0:	bf00      	nop
 80001c2:	f000 fabd 	bl	8000740 <MSTK_u8ReadFlag>
 80001c6:	4603      	mov	r3, r0
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d0fa      	beq.n	80001c2 <_delay_us+0x1a>

}
 80001cc:	bf00      	nop
 80001ce:	bf00      	nop
 80001d0:	3708      	adds	r7, #8
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}
	...

080001d8 <MGPIO_VidSetPinDirection>:

#include"GPIO_INTERFACE.h"
#include"GPIO_REG.h"


void MGPIO_VidSetPinDirection( u8 Copy_u8Port , u8 Copy_u8Pin , u8 u8Copy_u8Mode ){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
 80001e2:	460b      	mov	r3, r1
 80001e4:	71bb      	strb	r3, [r7, #6]
 80001e6:	4613      	mov	r3, r2
 80001e8:	717b      	strb	r3, [r7, #5]

	switch(Copy_u8Port){
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	2b02      	cmp	r3, #2
 80001ee:	d07a      	beq.n	80002e6 <MGPIO_VidSetPinDirection+0x10e>
 80001f0:	2b02      	cmp	r3, #2
 80001f2:	f300 80b1 	bgt.w	8000358 <MGPIO_VidSetPinDirection+0x180>
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d002      	beq.n	8000200 <MGPIO_VidSetPinDirection+0x28>
 80001fa:	2b01      	cmp	r3, #1
 80001fc:	d03a      	beq.n	8000274 <MGPIO_VidSetPinDirection+0x9c>
			MGPIOC->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
			MGPIOC->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
		}

		break;
	default :break;
 80001fe:	e0ab      	b.n	8000358 <MGPIO_VidSetPinDirection+0x180>
		if(Copy_u8Pin <= 7 ){//low
 8000200:	79bb      	ldrb	r3, [r7, #6]
 8000202:	2b07      	cmp	r3, #7
 8000204:	d817      	bhi.n	8000236 <MGPIO_VidSetPinDirection+0x5e>
			MGPIOA->CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ));// R M W
 8000206:	4b5a      	ldr	r3, [pc, #360]	; (8000370 <MGPIO_VidSetPinDirection+0x198>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	79ba      	ldrb	r2, [r7, #6]
 800020c:	0092      	lsls	r2, r2, #2
 800020e:	210f      	movs	r1, #15
 8000210:	fa01 f202 	lsl.w	r2, r1, r2
 8000214:	43d2      	mvns	r2, r2
 8000216:	4611      	mov	r1, r2
 8000218:	4a55      	ldr	r2, [pc, #340]	; (8000370 <MGPIO_VidSetPinDirection+0x198>)
 800021a:	400b      	ands	r3, r1
 800021c:	6013      	str	r3, [r2, #0]
			MGPIOA->CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 );
 800021e:	4b54      	ldr	r3, [pc, #336]	; (8000370 <MGPIO_VidSetPinDirection+0x198>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	7979      	ldrb	r1, [r7, #5]
 8000224:	79ba      	ldrb	r2, [r7, #6]
 8000226:	0092      	lsls	r2, r2, #2
 8000228:	fa01 f202 	lsl.w	r2, r1, r2
 800022c:	4611      	mov	r1, r2
 800022e:	4a50      	ldr	r2, [pc, #320]	; (8000370 <MGPIO_VidSetPinDirection+0x198>)
 8000230:	430b      	orrs	r3, r1
 8000232:	6013      	str	r3, [r2, #0]
		break;
 8000234:	e092      	b.n	800035c <MGPIO_VidSetPinDirection+0x184>
		}else if(Copy_u8Pin <=15 ){//high
 8000236:	79bb      	ldrb	r3, [r7, #6]
 8000238:	2b0f      	cmp	r3, #15
 800023a:	f200 808f 	bhi.w	800035c <MGPIO_VidSetPinDirection+0x184>
			Copy_u8Pin = Copy_u8Pin - 8;
 800023e:	79bb      	ldrb	r3, [r7, #6]
 8000240:	3b08      	subs	r3, #8
 8000242:	71bb      	strb	r3, [r7, #6]
			MGPIOA->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 8000244:	4b4a      	ldr	r3, [pc, #296]	; (8000370 <MGPIO_VidSetPinDirection+0x198>)
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	79ba      	ldrb	r2, [r7, #6]
 800024a:	0092      	lsls	r2, r2, #2
 800024c:	210f      	movs	r1, #15
 800024e:	fa01 f202 	lsl.w	r2, r1, r2
 8000252:	43d2      	mvns	r2, r2
 8000254:	4611      	mov	r1, r2
 8000256:	4a46      	ldr	r2, [pc, #280]	; (8000370 <MGPIO_VidSetPinDirection+0x198>)
 8000258:	400b      	ands	r3, r1
 800025a:	6053      	str	r3, [r2, #4]
			MGPIOA->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 );
 800025c:	4b44      	ldr	r3, [pc, #272]	; (8000370 <MGPIO_VidSetPinDirection+0x198>)
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	7979      	ldrb	r1, [r7, #5]
 8000262:	79ba      	ldrb	r2, [r7, #6]
 8000264:	0092      	lsls	r2, r2, #2
 8000266:	fa01 f202 	lsl.w	r2, r1, r2
 800026a:	4611      	mov	r1, r2
 800026c:	4a40      	ldr	r2, [pc, #256]	; (8000370 <MGPIO_VidSetPinDirection+0x198>)
 800026e:	430b      	orrs	r3, r1
 8000270:	6053      	str	r3, [r2, #4]
		break;
 8000272:	e073      	b.n	800035c <MGPIO_VidSetPinDirection+0x184>
		if(Copy_u8Pin <= 7 ){//low
 8000274:	79bb      	ldrb	r3, [r7, #6]
 8000276:	2b07      	cmp	r3, #7
 8000278:	d817      	bhi.n	80002aa <MGPIO_VidSetPinDirection+0xd2>
			MGPIOB->CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );// R M W
 800027a:	4b3e      	ldr	r3, [pc, #248]	; (8000374 <MGPIO_VidSetPinDirection+0x19c>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	79ba      	ldrb	r2, [r7, #6]
 8000280:	0092      	lsls	r2, r2, #2
 8000282:	210f      	movs	r1, #15
 8000284:	fa01 f202 	lsl.w	r2, r1, r2
 8000288:	43d2      	mvns	r2, r2
 800028a:	4611      	mov	r1, r2
 800028c:	4a39      	ldr	r2, [pc, #228]	; (8000374 <MGPIO_VidSetPinDirection+0x19c>)
 800028e:	400b      	ands	r3, r1
 8000290:	6013      	str	r3, [r2, #0]
			MGPIOB->CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 8000292:	4b38      	ldr	r3, [pc, #224]	; (8000374 <MGPIO_VidSetPinDirection+0x19c>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	7979      	ldrb	r1, [r7, #5]
 8000298:	79ba      	ldrb	r2, [r7, #6]
 800029a:	0092      	lsls	r2, r2, #2
 800029c:	fa01 f202 	lsl.w	r2, r1, r2
 80002a0:	4611      	mov	r1, r2
 80002a2:	4a34      	ldr	r2, [pc, #208]	; (8000374 <MGPIO_VidSetPinDirection+0x19c>)
 80002a4:	430b      	orrs	r3, r1
 80002a6:	6013      	str	r3, [r2, #0]
		break;
 80002a8:	e05a      	b.n	8000360 <MGPIO_VidSetPinDirection+0x188>
		}else if(Copy_u8Pin <=15 ){//high
 80002aa:	79bb      	ldrb	r3, [r7, #6]
 80002ac:	2b0f      	cmp	r3, #15
 80002ae:	d857      	bhi.n	8000360 <MGPIO_VidSetPinDirection+0x188>
			Copy_u8Pin = Copy_u8Pin - 8;
 80002b0:	79bb      	ldrb	r3, [r7, #6]
 80002b2:	3b08      	subs	r3, #8
 80002b4:	71bb      	strb	r3, [r7, #6]
			MGPIOB->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 80002b6:	4b2f      	ldr	r3, [pc, #188]	; (8000374 <MGPIO_VidSetPinDirection+0x19c>)
 80002b8:	685b      	ldr	r3, [r3, #4]
 80002ba:	79ba      	ldrb	r2, [r7, #6]
 80002bc:	0092      	lsls	r2, r2, #2
 80002be:	210f      	movs	r1, #15
 80002c0:	fa01 f202 	lsl.w	r2, r1, r2
 80002c4:	43d2      	mvns	r2, r2
 80002c6:	4611      	mov	r1, r2
 80002c8:	4a2a      	ldr	r2, [pc, #168]	; (8000374 <MGPIO_VidSetPinDirection+0x19c>)
 80002ca:	400b      	ands	r3, r1
 80002cc:	6053      	str	r3, [r2, #4]
			MGPIOB->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 80002ce:	4b29      	ldr	r3, [pc, #164]	; (8000374 <MGPIO_VidSetPinDirection+0x19c>)
 80002d0:	685b      	ldr	r3, [r3, #4]
 80002d2:	7979      	ldrb	r1, [r7, #5]
 80002d4:	79ba      	ldrb	r2, [r7, #6]
 80002d6:	0092      	lsls	r2, r2, #2
 80002d8:	fa01 f202 	lsl.w	r2, r1, r2
 80002dc:	4611      	mov	r1, r2
 80002de:	4a25      	ldr	r2, [pc, #148]	; (8000374 <MGPIO_VidSetPinDirection+0x19c>)
 80002e0:	430b      	orrs	r3, r1
 80002e2:	6053      	str	r3, [r2, #4]
		break;
 80002e4:	e03c      	b.n	8000360 <MGPIO_VidSetPinDirection+0x188>
		if(Copy_u8Pin <= 7 ){//low
 80002e6:	79bb      	ldrb	r3, [r7, #6]
 80002e8:	2b07      	cmp	r3, #7
 80002ea:	d817      	bhi.n	800031c <MGPIO_VidSetPinDirection+0x144>
			MGPIOC->CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );// R M W
 80002ec:	4b22      	ldr	r3, [pc, #136]	; (8000378 <MGPIO_VidSetPinDirection+0x1a0>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	79ba      	ldrb	r2, [r7, #6]
 80002f2:	0092      	lsls	r2, r2, #2
 80002f4:	210f      	movs	r1, #15
 80002f6:	fa01 f202 	lsl.w	r2, r1, r2
 80002fa:	43d2      	mvns	r2, r2
 80002fc:	4611      	mov	r1, r2
 80002fe:	4a1e      	ldr	r2, [pc, #120]	; (8000378 <MGPIO_VidSetPinDirection+0x1a0>)
 8000300:	400b      	ands	r3, r1
 8000302:	6013      	str	r3, [r2, #0]
			MGPIOC->CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 8000304:	4b1c      	ldr	r3, [pc, #112]	; (8000378 <MGPIO_VidSetPinDirection+0x1a0>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	7979      	ldrb	r1, [r7, #5]
 800030a:	79ba      	ldrb	r2, [r7, #6]
 800030c:	0092      	lsls	r2, r2, #2
 800030e:	fa01 f202 	lsl.w	r2, r1, r2
 8000312:	4611      	mov	r1, r2
 8000314:	4a18      	ldr	r2, [pc, #96]	; (8000378 <MGPIO_VidSetPinDirection+0x1a0>)
 8000316:	430b      	orrs	r3, r1
 8000318:	6013      	str	r3, [r2, #0]
		break;
 800031a:	e023      	b.n	8000364 <MGPIO_VidSetPinDirection+0x18c>
		}else if(Copy_u8Pin <=15 ){//high
 800031c:	79bb      	ldrb	r3, [r7, #6]
 800031e:	2b0f      	cmp	r3, #15
 8000320:	d820      	bhi.n	8000364 <MGPIO_VidSetPinDirection+0x18c>
			Copy_u8Pin = Copy_u8Pin - 8;
 8000322:	79bb      	ldrb	r3, [r7, #6]
 8000324:	3b08      	subs	r3, #8
 8000326:	71bb      	strb	r3, [r7, #6]
			MGPIOC->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 8000328:	4b13      	ldr	r3, [pc, #76]	; (8000378 <MGPIO_VidSetPinDirection+0x1a0>)
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	79ba      	ldrb	r2, [r7, #6]
 800032e:	0092      	lsls	r2, r2, #2
 8000330:	210f      	movs	r1, #15
 8000332:	fa01 f202 	lsl.w	r2, r1, r2
 8000336:	43d2      	mvns	r2, r2
 8000338:	4611      	mov	r1, r2
 800033a:	4a0f      	ldr	r2, [pc, #60]	; (8000378 <MGPIO_VidSetPinDirection+0x1a0>)
 800033c:	400b      	ands	r3, r1
 800033e:	6053      	str	r3, [r2, #4]
			MGPIOC->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 8000340:	4b0d      	ldr	r3, [pc, #52]	; (8000378 <MGPIO_VidSetPinDirection+0x1a0>)
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	7979      	ldrb	r1, [r7, #5]
 8000346:	79ba      	ldrb	r2, [r7, #6]
 8000348:	0092      	lsls	r2, r2, #2
 800034a:	fa01 f202 	lsl.w	r2, r1, r2
 800034e:	4611      	mov	r1, r2
 8000350:	4a09      	ldr	r2, [pc, #36]	; (8000378 <MGPIO_VidSetPinDirection+0x1a0>)
 8000352:	430b      	orrs	r3, r1
 8000354:	6053      	str	r3, [r2, #4]
		break;
 8000356:	e005      	b.n	8000364 <MGPIO_VidSetPinDirection+0x18c>
	default :break;
 8000358:	bf00      	nop
 800035a:	e004      	b.n	8000366 <MGPIO_VidSetPinDirection+0x18e>
		break;
 800035c:	bf00      	nop
 800035e:	e002      	b.n	8000366 <MGPIO_VidSetPinDirection+0x18e>
		break;
 8000360:	bf00      	nop
 8000362:	e000      	b.n	8000366 <MGPIO_VidSetPinDirection+0x18e>
		break;
 8000364:	bf00      	nop
	}

}
 8000366:	bf00      	nop
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr
 8000370:	40010800 	.word	0x40010800
 8000374:	40010c00 	.word	0x40010c00
 8000378:	40011000 	.word	0x40011000

0800037c <MGPIO_VidSetPinValue>:

void MGPIO_VidSetPinValue( u8 Copy_u8Port , u8 Copy_u8Pin , u8 u8Copy_u8Value ){
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	4603      	mov	r3, r0
 8000384:	71fb      	strb	r3, [r7, #7]
 8000386:	460b      	mov	r3, r1
 8000388:	71bb      	strb	r3, [r7, #6]
 800038a:	4613      	mov	r3, r2
 800038c:	717b      	strb	r3, [r7, #5]

	switch(Copy_u8Port){
 800038e:	79fb      	ldrb	r3, [r7, #7]
 8000390:	2b02      	cmp	r3, #2
 8000392:	d040      	beq.n	8000416 <MGPIO_VidSetPinValue+0x9a>
 8000394:	2b02      	cmp	r3, #2
 8000396:	dc60      	bgt.n	800045a <MGPIO_VidSetPinValue+0xde>
 8000398:	2b00      	cmp	r3, #0
 800039a:	d002      	beq.n	80003a2 <MGPIO_VidSetPinValue+0x26>
 800039c:	2b01      	cmp	r3, #1
 800039e:	d01d      	beq.n	80003dc <MGPIO_VidSetPinValue+0x60>

		break;

	}

}
 80003a0:	e05b      	b.n	800045a <MGPIO_VidSetPinValue+0xde>
		if( u8Copy_u8Value == HIGH ){
 80003a2:	797b      	ldrb	r3, [r7, #5]
 80003a4:	2b01      	cmp	r3, #1
 80003a6:	d10a      	bne.n	80003be <MGPIO_VidSetPinValue+0x42>
			SET_BIT( MGPIOA->ODR , Copy_u8Pin );
 80003a8:	4b2e      	ldr	r3, [pc, #184]	; (8000464 <MGPIO_VidSetPinValue+0xe8>)
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	79ba      	ldrb	r2, [r7, #6]
 80003ae:	2101      	movs	r1, #1
 80003b0:	fa01 f202 	lsl.w	r2, r1, r2
 80003b4:	4611      	mov	r1, r2
 80003b6:	4a2b      	ldr	r2, [pc, #172]	; (8000464 <MGPIO_VidSetPinValue+0xe8>)
 80003b8:	430b      	orrs	r3, r1
 80003ba:	60d3      	str	r3, [r2, #12]
		break;
 80003bc:	e048      	b.n	8000450 <MGPIO_VidSetPinValue+0xd4>
		}else if( u8Copy_u8Value == LOW ){
 80003be:	797b      	ldrb	r3, [r7, #5]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d145      	bne.n	8000450 <MGPIO_VidSetPinValue+0xd4>
			CLR_BIT( MGPIOA->ODR , Copy_u8Pin );
 80003c4:	4b27      	ldr	r3, [pc, #156]	; (8000464 <MGPIO_VidSetPinValue+0xe8>)
 80003c6:	68db      	ldr	r3, [r3, #12]
 80003c8:	79ba      	ldrb	r2, [r7, #6]
 80003ca:	2101      	movs	r1, #1
 80003cc:	fa01 f202 	lsl.w	r2, r1, r2
 80003d0:	43d2      	mvns	r2, r2
 80003d2:	4611      	mov	r1, r2
 80003d4:	4a23      	ldr	r2, [pc, #140]	; (8000464 <MGPIO_VidSetPinValue+0xe8>)
 80003d6:	400b      	ands	r3, r1
 80003d8:	60d3      	str	r3, [r2, #12]
		break;
 80003da:	e039      	b.n	8000450 <MGPIO_VidSetPinValue+0xd4>
		if( u8Copy_u8Value == HIGH ){
 80003dc:	797b      	ldrb	r3, [r7, #5]
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d10a      	bne.n	80003f8 <MGPIO_VidSetPinValue+0x7c>
			SET_BIT( MGPIOB->ODR , Copy_u8Pin );
 80003e2:	4b21      	ldr	r3, [pc, #132]	; (8000468 <MGPIO_VidSetPinValue+0xec>)
 80003e4:	68db      	ldr	r3, [r3, #12]
 80003e6:	79ba      	ldrb	r2, [r7, #6]
 80003e8:	2101      	movs	r1, #1
 80003ea:	fa01 f202 	lsl.w	r2, r1, r2
 80003ee:	4611      	mov	r1, r2
 80003f0:	4a1d      	ldr	r2, [pc, #116]	; (8000468 <MGPIO_VidSetPinValue+0xec>)
 80003f2:	430b      	orrs	r3, r1
 80003f4:	60d3      	str	r3, [r2, #12]
		break;
 80003f6:	e02d      	b.n	8000454 <MGPIO_VidSetPinValue+0xd8>
		}else if( u8Copy_u8Value == LOW ){
 80003f8:	797b      	ldrb	r3, [r7, #5]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d12a      	bne.n	8000454 <MGPIO_VidSetPinValue+0xd8>
			CLR_BIT( MGPIOB->ODR , Copy_u8Pin );
 80003fe:	4b1a      	ldr	r3, [pc, #104]	; (8000468 <MGPIO_VidSetPinValue+0xec>)
 8000400:	68db      	ldr	r3, [r3, #12]
 8000402:	79ba      	ldrb	r2, [r7, #6]
 8000404:	2101      	movs	r1, #1
 8000406:	fa01 f202 	lsl.w	r2, r1, r2
 800040a:	43d2      	mvns	r2, r2
 800040c:	4611      	mov	r1, r2
 800040e:	4a16      	ldr	r2, [pc, #88]	; (8000468 <MGPIO_VidSetPinValue+0xec>)
 8000410:	400b      	ands	r3, r1
 8000412:	60d3      	str	r3, [r2, #12]
		break;
 8000414:	e01e      	b.n	8000454 <MGPIO_VidSetPinValue+0xd8>
		if( u8Copy_u8Value == HIGH ){
 8000416:	797b      	ldrb	r3, [r7, #5]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d10a      	bne.n	8000432 <MGPIO_VidSetPinValue+0xb6>
			SET_BIT( MGPIOC->ODR , Copy_u8Pin );
 800041c:	4b13      	ldr	r3, [pc, #76]	; (800046c <MGPIO_VidSetPinValue+0xf0>)
 800041e:	68db      	ldr	r3, [r3, #12]
 8000420:	79ba      	ldrb	r2, [r7, #6]
 8000422:	2101      	movs	r1, #1
 8000424:	fa01 f202 	lsl.w	r2, r1, r2
 8000428:	4611      	mov	r1, r2
 800042a:	4a10      	ldr	r2, [pc, #64]	; (800046c <MGPIO_VidSetPinValue+0xf0>)
 800042c:	430b      	orrs	r3, r1
 800042e:	60d3      	str	r3, [r2, #12]
		break;
 8000430:	e012      	b.n	8000458 <MGPIO_VidSetPinValue+0xdc>
		}else if( u8Copy_u8Value == LOW ){
 8000432:	797b      	ldrb	r3, [r7, #5]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d10f      	bne.n	8000458 <MGPIO_VidSetPinValue+0xdc>
			CLR_BIT( MGPIOC->ODR , Copy_u8Pin );
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <MGPIO_VidSetPinValue+0xf0>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	79ba      	ldrb	r2, [r7, #6]
 800043e:	2101      	movs	r1, #1
 8000440:	fa01 f202 	lsl.w	r2, r1, r2
 8000444:	43d2      	mvns	r2, r2
 8000446:	4611      	mov	r1, r2
 8000448:	4a08      	ldr	r2, [pc, #32]	; (800046c <MGPIO_VidSetPinValue+0xf0>)
 800044a:	400b      	ands	r3, r1
 800044c:	60d3      	str	r3, [r2, #12]
		break;
 800044e:	e003      	b.n	8000458 <MGPIO_VidSetPinValue+0xdc>
		break;
 8000450:	bf00      	nop
 8000452:	e002      	b.n	800045a <MGPIO_VidSetPinValue+0xde>
		break;
 8000454:	bf00      	nop
 8000456:	e000      	b.n	800045a <MGPIO_VidSetPinValue+0xde>
		break;
 8000458:	bf00      	nop
}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr
 8000464:	40010800 	.word	0x40010800
 8000468:	40010c00 	.word	0x40010c00
 800046c:	40011000 	.word	0x40011000

08000470 <MOTORS_Void_MotorInit>:
#include "MOTOR_config.h"
#include "MOTOR_private.h"


void MOTORS_Void_MotorInit()
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	/**************** RF MOTOR PINS ****************************/
	MGPIO_VidSetPinDirection(MOTOR_RF_IN1_PORT , MOTOR_RF_IN1_PIN , OUTPUT_SPEED_10MHZ_PP);
 8000474:	2201      	movs	r2, #1
 8000476:	210e      	movs	r1, #14
 8000478:	2001      	movs	r0, #1
 800047a:	f7ff fead 	bl	80001d8 <MGPIO_VidSetPinDirection>
	MGPIO_VidSetPinDirection(MOTOR_RF_IN2_PORT , MOTOR_RF_IN2_PIN , OUTPUT_SPEED_10MHZ_PP);
 800047e:	2201      	movs	r2, #1
 8000480:	210f      	movs	r1, #15
 8000482:	2001      	movs	r0, #1
 8000484:	f7ff fea8 	bl	80001d8 <MGPIO_VidSetPinDirection>

	/********************** RF ENABLE PINS as alternating ******************/
	MGPIO_VidSetPinDirection(MOTOR_RF_ENA_PORT , MOTOR_RF_ENA_PIN , OUTPUT_SPEED_10MHZ_AFPP);
 8000488:	2209      	movs	r2, #9
 800048a:	2108      	movs	r1, #8
 800048c:	2001      	movs	r0, #1
 800048e:	f7ff fea3 	bl	80001d8 <MGPIO_VidSetPinDirection>
//	MGPIO_VidSetPinDirection(MOTOR_RF_ENA_PORT , MOTOR_RF_ENA_PIN , OUTPUT_SPEED_10MHZ_PP);



	/**************** LF MOTOR PINS ****************************/
	MGPIO_VidSetPinDirection(MOTOR_LF_IN1_PORT , MOTOR_LF_IN1_PIN , OUTPUT_SPEED_10MHZ_PP);
 8000492:	2201      	movs	r2, #1
 8000494:	210c      	movs	r1, #12
 8000496:	2001      	movs	r0, #1
 8000498:	f7ff fe9e 	bl	80001d8 <MGPIO_VidSetPinDirection>
	MGPIO_VidSetPinDirection(MOTOR_LF_IN2_PORT , MOTOR_LF_IN2_PIN , OUTPUT_SPEED_10MHZ_PP);
 800049c:	2201      	movs	r2, #1
 800049e:	210d      	movs	r1, #13
 80004a0:	2001      	movs	r0, #1
 80004a2:	f7ff fe99 	bl	80001d8 <MGPIO_VidSetPinDirection>

	/********************** LF ENABLE PINS as alternating ******************/
	MGPIO_VidSetPinDirection(MOTOR_LF_ENA_PORT , MOTOR_LF_ENA_PIN , OUTPUT_SPEED_10MHZ_AFPP);
 80004a6:	2209      	movs	r2, #9
 80004a8:	2109      	movs	r1, #9
 80004aa:	2001      	movs	r0, #1
 80004ac:	f7ff fe94 	bl	80001d8 <MGPIO_VidSetPinDirection>


	/*************************TIMERS INTIALZATION *****************/

	/* To Initiate PWM Channel 2 & 3 (TIMER2) */
	TIMER4_Void_PwmInit(TIMER4_CHANNEL3);
 80004b0:	2003      	movs	r0, #3
 80004b2:	f000 fc87 	bl	8000dc4 <TIMER4_Void_PwmInit>
	TIMER4_Void_PwmInit(TIMER4_CHANNEL4);
 80004b6:	2004      	movs	r0, #4
 80004b8:	f000 fc84 	bl	8000dc4 <TIMER4_Void_PwmInit>

//	TIMER4_Void_PwmStart();


	/* To Initiate PWM Channel 1 & 2 (TIMER4) */
	TIMER4_Void_PwmInit(TIMER4_CHANNEL1);
 80004bc:	2001      	movs	r0, #1
 80004be:	f000 fc81 	bl	8000dc4 <TIMER4_Void_PwmInit>
	TIMER4_Void_PwmInit(TIMER4_CHANNEL2);
 80004c2:	2002      	movs	r0, #2
 80004c4:	f000 fc7e 	bl	8000dc4 <TIMER4_Void_PwmInit>

//	TIMER4_Void_PwmStart();

}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}

080004cc <MOTOR_RF_Void_MotorSetSpeed>:




void MOTOR_RF_Void_MotorSetSpeed(u32 Copy_U32_Speed)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	TIMER4_Void_PwmSetDutyCycle(TIMER4_CHANNEL3,Copy_U32_Speed);
 80004d4:	6879      	ldr	r1, [r7, #4]
 80004d6:	2003      	movs	r0, #3
 80004d8:	f000 fd3c 	bl	8000f54 <TIMER4_Void_PwmSetDutyCycle>

}
 80004dc:	bf00      	nop
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <MOTOR_RF_GO_FORWARD>:
void MOTOR_RF_GO_FORWARD ()
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	MGPIO_VidSetPinValue(MOTOR_RF_IN1_PORT , MOTOR_RF_IN1_PIN , HIGH);
 80004e8:	2201      	movs	r2, #1
 80004ea:	210e      	movs	r1, #14
 80004ec:	2001      	movs	r0, #1
 80004ee:	f7ff ff45 	bl	800037c <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(MOTOR_RF_IN2_PORT , MOTOR_RF_IN2_PIN , LOW);
 80004f2:	2200      	movs	r2, #0
 80004f4:	210f      	movs	r1, #15
 80004f6:	2001      	movs	r0, #1
 80004f8:	f7ff ff40 	bl	800037c <MGPIO_VidSetPinValue>
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}

08000500 <MOTOR_RF_GO_BACKWARD>:
void MOTOR_RF_GO_BACKWARD ()
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	MGPIO_VidSetPinValue(MOTOR_RF_IN1_PORT , MOTOR_RF_IN1_PIN , LOW);
 8000504:	2200      	movs	r2, #0
 8000506:	210e      	movs	r1, #14
 8000508:	2001      	movs	r0, #1
 800050a:	f7ff ff37 	bl	800037c <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(MOTOR_RF_IN2_PORT , MOTOR_RF_IN2_PIN , HIGH);
 800050e:	2201      	movs	r2, #1
 8000510:	210f      	movs	r1, #15
 8000512:	2001      	movs	r0, #1
 8000514:	f7ff ff32 	bl	800037c <MGPIO_VidSetPinValue>
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}

0800051c <MOTOR_RF_STOP>:

void MOTOR_RF_STOP()
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	MGPIO_VidSetPinValue(MOTOR_RF_IN1_PORT , MOTOR_RF_IN1_PIN , HIGH);
 8000520:	2201      	movs	r2, #1
 8000522:	210e      	movs	r1, #14
 8000524:	2001      	movs	r0, #1
 8000526:	f7ff ff29 	bl	800037c <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(MOTOR_RF_IN2_PORT , MOTOR_RF_IN2_PIN , HIGH);
 800052a:	2201      	movs	r2, #1
 800052c:	210f      	movs	r1, #15
 800052e:	2001      	movs	r0, #1
 8000530:	f7ff ff24 	bl	800037c <MGPIO_VidSetPinValue>
}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}

08000538 <MOTOR_LF_Void_MotorSetSpeed>:




void MOTOR_LF_Void_MotorSetSpeed(u32 Copy_U32_Speed)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	TIMER4_Void_PwmSetDutyCycle(TIMER4_CHANNEL4,Copy_U32_Speed);
 8000540:	6879      	ldr	r1, [r7, #4]
 8000542:	2004      	movs	r0, #4
 8000544:	f000 fd06 	bl	8000f54 <TIMER4_Void_PwmSetDutyCycle>
}
 8000548:	bf00      	nop
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <MOTOR_LF_GO_FORWARD>:
void MOTOR_LF_GO_FORWARD ()
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	MGPIO_VidSetPinValue(MOTOR_LF_IN1_PORT , MOTOR_LF_IN1_PIN , HIGH);
 8000554:	2201      	movs	r2, #1
 8000556:	210c      	movs	r1, #12
 8000558:	2001      	movs	r0, #1
 800055a:	f7ff ff0f 	bl	800037c <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(MOTOR_LF_IN2_PORT , MOTOR_LF_IN2_PIN , LOW);
 800055e:	2200      	movs	r2, #0
 8000560:	210d      	movs	r1, #13
 8000562:	2001      	movs	r0, #1
 8000564:	f7ff ff0a 	bl	800037c <MGPIO_VidSetPinValue>
}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}

0800056c <MOTOR_LF_GO_BACKWARD>:
void MOTOR_LF_GO_BACKWARD ()
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0

	MGPIO_VidSetPinValue(MOTOR_LF_IN1_PORT , MOTOR_LF_IN1_PIN , LOW);
 8000570:	2200      	movs	r2, #0
 8000572:	210c      	movs	r1, #12
 8000574:	2001      	movs	r0, #1
 8000576:	f7ff ff01 	bl	800037c <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(MOTOR_LF_IN2_PORT , MOTOR_LF_IN2_PIN , HIGH);
 800057a:	2201      	movs	r2, #1
 800057c:	210d      	movs	r1, #13
 800057e:	2001      	movs	r0, #1
 8000580:	f7ff fefc 	bl	800037c <MGPIO_VidSetPinValue>
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}

08000588 <MOTOR_LF_STOP>:

void MOTOR_LF_STOP()
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0

	MGPIO_VidSetPinValue(MOTOR_LF_IN1_PORT , MOTOR_LF_IN1_PIN , LOW);
 800058c:	2200      	movs	r2, #0
 800058e:	210c      	movs	r1, #12
 8000590:	2001      	movs	r0, #1
 8000592:	f7ff fef3 	bl	800037c <MGPIO_VidSetPinValue>
	MGPIO_VidSetPinValue(MOTOR_LF_IN2_PORT , MOTOR_LF_IN2_PIN , LOW);
 8000596:	2200      	movs	r2, #0
 8000598:	210d      	movs	r1, #13
 800059a:	2001      	movs	r0, #1
 800059c:	f7ff feee 	bl	800037c <MGPIO_VidSetPinValue>
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <MNVIC_VidEnablePeripheral>:

#include"NVIC_INTERFACE.h"
#include"NVIC_REG.h"


void MNVIC_VidEnablePeripheral ( u8 Copy_u8INTID ){
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]

	MNVIC->ISER[ Copy_u8INTID / 32 ] = 1 << ( Copy_u8INTID % 32 ) ;
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	f003 031f 	and.w	r3, r3, #31
 80005b4:	2201      	movs	r2, #1
 80005b6:	fa02 f103 	lsl.w	r1, r2, r3
 80005ba:	4a05      	ldr	r2, [pc, #20]	; (80005d0 <MNVIC_VidEnablePeripheral+0x2c>)
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	095b      	lsrs	r3, r3, #5
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr
 80005d0:	e000e100 	.word	0xe000e100

080005d4 <MRCC_VidInit>:
#include"RCC_CONFG.h"
#include"ERROR_STATUS.h"
#include"RCC_PRIVATE.h"
#include"RCC_REG.h"

void MRCC_VidInit( void ){
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0

	u32 LOC_u32TimeOut = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	607b      	str	r3, [r7, #4]

	#elif CLOCK_TYPE == HSE

		/* BIT 1:0 -> Choose Between HSI OR HSE OR PLL */
		/* HSE Selected As A System Clock */
		SET_BIT( MRCC->CFGR , 0  );
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <MRCC_VidInit+0x60>)
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	4a14      	ldr	r2, [pc, #80]	; (8000634 <MRCC_VidInit+0x60>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6053      	str	r3, [r2, #4]
		CLR_BIT( MRCC->CFGR , 1  );
 80005ea:	4b12      	ldr	r3, [pc, #72]	; (8000634 <MRCC_VidInit+0x60>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	4a11      	ldr	r2, [pc, #68]	; (8000634 <MRCC_VidInit+0x60>)
 80005f0:	f023 0302 	bic.w	r3, r3, #2
 80005f4:	6053      	str	r3, [r2, #4]
		/* Bit 16 -> Enable The HSE Clock */
		SET_BIT( MRCC->CR   , 16 );
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MRCC_VidInit+0x60>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <MRCC_VidInit+0x60>)
 80005fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000600:	6013      	str	r3, [r2, #0]
		/* Bit 17 -> Checking While The HSE Clock Is Stable */
		while( ( ( GET_BIT( MRCC->CR , 17 ) ) == 0 ) && ( LOC_u32TimeOut < 100000 ) ){ LOC_u32TimeOut++; }
 8000602:	e002      	b.n	800060a <MRCC_VidInit+0x36>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3301      	adds	r3, #1
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <MRCC_VidInit+0x60>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000612:	2b00      	cmp	r3, #0
 8000614:	d103      	bne.n	800061e <MRCC_VidInit+0x4a>
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4a07      	ldr	r2, [pc, #28]	; (8000638 <MRCC_VidInit+0x64>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d9f2      	bls.n	8000604 <MRCC_VidInit+0x30>

		SET_BIT( MRCC->CR , 19 );

	#elif CLOCK_SECURITY_SYSTEM == DISABLE_CLOCK_SECURITY_SYSTEM

		CLR_BIT( MRCC->CR , 19 );
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <MRCC_VidInit+0x60>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <MRCC_VidInit+0x60>)
 8000624:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000628:	6013      	str	r3, [r2, #0]

		#warning " Wrong Clock Security System Configuration Choice "

	#endif

}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	40021000 	.word	0x40021000
 8000638:	0001869f 	.word	0x0001869f

0800063c <MRCC_VidEnablePeripheralClock>:

void MRCC_VidEnablePeripheralClock( u8 Copy_u8PeripheralBus , u8 Copy_u8Peripheral ){
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	460a      	mov	r2, r1
 8000646:	71fb      	strb	r3, [r7, #7]
 8000648:	4613      	mov	r3, r2
 800064a:	71bb      	strb	r3, [r7, #6]


		switch( Copy_u8PeripheralBus ){
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	2b02      	cmp	r3, #2
 8000650:	d01c      	beq.n	800068c <MRCC_VidEnablePeripheralClock+0x50>
 8000652:	2b02      	cmp	r3, #2
 8000654:	dc25      	bgt.n	80006a2 <MRCC_VidEnablePeripheralClock+0x66>
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <MRCC_VidEnablePeripheralClock+0x24>
 800065a:	2b01      	cmp	r3, #1
 800065c:	d00b      	beq.n	8000676 <MRCC_VidEnablePeripheralClock+0x3a>
			case APB2_BUS : SET_BIT( MRCC->APB2ENR , Copy_u8Peripheral ); break;

		}


}
 800065e:	e020      	b.n	80006a2 <MRCC_VidEnablePeripheralClock+0x66>
			case AHB_BUS  : SET_BIT( MRCC->AHBENR  , Copy_u8Peripheral ); break;
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MRCC_VidEnablePeripheralClock+0x70>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	79ba      	ldrb	r2, [r7, #6]
 8000666:	2101      	movs	r1, #1
 8000668:	fa01 f202 	lsl.w	r2, r1, r2
 800066c:	4611      	mov	r1, r2
 800066e:	4a0f      	ldr	r2, [pc, #60]	; (80006ac <MRCC_VidEnablePeripheralClock+0x70>)
 8000670:	430b      	orrs	r3, r1
 8000672:	6153      	str	r3, [r2, #20]
 8000674:	e015      	b.n	80006a2 <MRCC_VidEnablePeripheralClock+0x66>
			case APB1_BUS :	SET_BIT( MRCC->APB1ENR , Copy_u8Peripheral ); break;
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <MRCC_VidEnablePeripheralClock+0x70>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	79ba      	ldrb	r2, [r7, #6]
 800067c:	2101      	movs	r1, #1
 800067e:	fa01 f202 	lsl.w	r2, r1, r2
 8000682:	4611      	mov	r1, r2
 8000684:	4a09      	ldr	r2, [pc, #36]	; (80006ac <MRCC_VidEnablePeripheralClock+0x70>)
 8000686:	430b      	orrs	r3, r1
 8000688:	61d3      	str	r3, [r2, #28]
 800068a:	e00a      	b.n	80006a2 <MRCC_VidEnablePeripheralClock+0x66>
			case APB2_BUS : SET_BIT( MRCC->APB2ENR , Copy_u8Peripheral ); break;
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <MRCC_VidEnablePeripheralClock+0x70>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	79ba      	ldrb	r2, [r7, #6]
 8000692:	2101      	movs	r1, #1
 8000694:	fa01 f202 	lsl.w	r2, r1, r2
 8000698:	4611      	mov	r1, r2
 800069a:	4a04      	ldr	r2, [pc, #16]	; (80006ac <MRCC_VidEnablePeripheralClock+0x70>)
 800069c:	430b      	orrs	r3, r1
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	bf00      	nop
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr
 80006ac:	40021000 	.word	0x40021000

080006b0 <SysTick_Handler>:
#include"SYSTICK_INTERFACE.h"
#include"SYSTICK_REG.h"

void ( * MSTK_CallBack ) ( void );

void SysTick_Handler(void){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0

	MSTK_CallBack();
 80006b4:	4b02      	ldr	r3, [pc, #8]	; (80006c0 <SysTick_Handler+0x10>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4798      	blx	r3

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000020 	.word	0x20000020

080006c4 <MSTK_VidInit>:
void MSTK_VidSetCallBack( void (*ptr)(void) ){

	MSTK_CallBack = ptr;
}

void MSTK_VidInit( void ){
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0

	// Enable Systick Interrupt  -  Clock = AHB / 8 - Stop Systic
	MSTK->CTRL = 0x00000002;
 80006c8:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <MSTK_VidInit+0x14>)
 80006ca:	2202      	movs	r2, #2
 80006cc:	601a      	str	r2, [r3, #0]

}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	e000e010 	.word	0xe000e010

080006dc <MSTK_VidStart>:


void MSTK_VidStart( u32 Copy_PreloadValue ){
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]

	// AHB = EXT = 8MHZ & CLOCK OF MSTK = AHB / 8 = 8MHZ / 8 = 1MHZ = 1 Micro For Each Count
	//Load Reload Value
	MSTK->LOAD = Copy_PreloadValue - 1;
 80006e4:	4a08      	ldr	r2, [pc, #32]	; (8000708 <MSTK_VidStart+0x2c>)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3b01      	subs	r3, #1
 80006ea:	6053      	str	r3, [r2, #4]
	//Clear Val Register
	MSTK->VAL  = 0 ;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MSTK_VidStart+0x2c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
	//Enable Systick
	SET_BIT( MSTK->CTRL , 0 );
 80006f2:	4b05      	ldr	r3, [pc, #20]	; (8000708 <MSTK_VidStart+0x2c>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a04      	ldr	r2, [pc, #16]	; (8000708 <MSTK_VidStart+0x2c>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6013      	str	r3, [r2, #0]

}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr
 8000708:	e000e010 	.word	0xe000e010

0800070c <MSTK_VidINTStatus>:

void MSTK_VidINTStatus( u8 Copy_u8Status ){
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]

	 MSTK->CTRL &= ~( 1 << 1 );
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MSTK_VidINTStatus+0x30>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a08      	ldr	r2, [pc, #32]	; (800073c <MSTK_VidINTStatus+0x30>)
 800071c:	f023 0302 	bic.w	r3, r3, #2
 8000720:	6013      	str	r3, [r2, #0]
	 MSTK->CTRL |=  ( Copy_u8Status << 1 );
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MSTK_VidINTStatus+0x30>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	79fa      	ldrb	r2, [r7, #7]
 8000728:	0052      	lsls	r2, r2, #1
 800072a:	4611      	mov	r1, r2
 800072c:	4a03      	ldr	r2, [pc, #12]	; (800073c <MSTK_VidINTStatus+0x30>)
 800072e:	430b      	orrs	r3, r1
 8000730:	6013      	str	r3, [r2, #0]

}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr
 800073c:	e000e010 	.word	0xe000e010

08000740 <MSTK_u8ReadFlag>:

u8 MSTK_u8ReadFlag( void ){
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0

	return ( GET_BIT( MSTK->CTRL , 16 ) );
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <MSTK_u8ReadFlag+0x1c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	0c1b      	lsrs	r3, r3, #16
 800074a:	b2db      	uxtb	r3, r3
 800074c:	f003 0301 	and.w	r3, r3, #1
 8000750:	b2db      	uxtb	r3, r3

}
 8000752:	4618      	mov	r0, r3
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	e000e010 	.word	0xe000e010

08000760 <TIMER2_VoidInitInputCapture>:

/*Global pointer to function to hold the callback function address*/
static void (*TIMER2_pvInputCaptureCallBackFunc)(void) = NULL;

void TIMER2_VoidInitInputCapture(u8 Copy_ChannleNumber)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]

	//prescaler for 8Mhz
	TIMER2_PSC=8-1;
 800076a:	4b2b      	ldr	r3, [pc, #172]	; (8000818 <TIMER2_VoidInitInputCapture+0xb8>)
 800076c:	2207      	movs	r2, #7
 800076e:	601a      	str	r2, [r3, #0]

	TIMER2_CNT=0;
 8000770:	4b2a      	ldr	r3, [pc, #168]	; (800081c <TIMER2_VoidInitInputCapture+0xbc>)
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]

	//configure input capture for selected channle
	switch(Copy_ChannleNumber)
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d002      	beq.n	8000782 <TIMER2_VoidInitInputCapture+0x22>
 800077c:	2b01      	cmp	r3, #1
 800077e:	d01f      	beq.n	80007c0 <TIMER2_VoidInitInputCapture+0x60>
 8000780:	e03d      	b.n	80007fe <TIMER2_VoidInitInputCapture+0x9e>
	{
	case Channle1:

		//CC1s channel is configured as input, IC1 is mapped on TI1
		SET_BIT(TIMER2_CCMR1,0);
 8000782:	4b27      	ldr	r3, [pc, #156]	; (8000820 <TIMER2_VoidInitInputCapture+0xc0>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a26      	ldr	r2, [pc, #152]	; (8000820 <TIMER2_VoidInitInputCapture+0xc0>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6013      	str	r3, [r2, #0]
		CLR_BIT(TIMER2_CCMR1,1);
 800078e:	4b24      	ldr	r3, [pc, #144]	; (8000820 <TIMER2_VoidInitInputCapture+0xc0>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a23      	ldr	r2, [pc, #140]	; (8000820 <TIMER2_VoidInitInputCapture+0xc0>)
 8000794:	f023 0302 	bic.w	r3, r3, #2
 8000798:	6013      	str	r3, [r2, #0]
		// Enable capture on each channel
		SET_BIT(TIMER2_CCER,0);
 800079a:	4b22      	ldr	r3, [pc, #136]	; (8000824 <TIMER2_VoidInitInputCapture+0xc4>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a21      	ldr	r2, [pc, #132]	; (8000824 <TIMER2_VoidInitInputCapture+0xc4>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6013      	str	r3, [r2, #0]
		CLR_BIT(TIMER2_CCER,1);
 80007a6:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <TIMER2_VoidInitInputCapture+0xc4>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a1e      	ldr	r2, [pc, #120]	; (8000824 <TIMER2_VoidInitInputCapture+0xc4>)
 80007ac:	f023 0302 	bic.w	r3, r3, #2
 80007b0:	6013      	str	r3, [r2, #0]


		// Enable capture interrupt on each channel
		SET_BIT(TIMER2_DIER,1);
 80007b2:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <TIMER2_VoidInitInputCapture+0xc8>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a1c      	ldr	r2, [pc, #112]	; (8000828 <TIMER2_VoidInitInputCapture+0xc8>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	6013      	str	r3, [r2, #0]
		break;
 80007be:	e01e      	b.n	80007fe <TIMER2_VoidInitInputCapture+0x9e>
	case Channle2:

		//CC2 channel is configured as input, IC2 is mapped on TI2
		SET_BIT(TIMER2_CCMR1,8);
 80007c0:	4b17      	ldr	r3, [pc, #92]	; (8000820 <TIMER2_VoidInitInputCapture+0xc0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a16      	ldr	r2, [pc, #88]	; (8000820 <TIMER2_VoidInitInputCapture+0xc0>)
 80007c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ca:	6013      	str	r3, [r2, #0]
		CLR_BIT(TIMER2_CCMR1,9);
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <TIMER2_VoidInitInputCapture+0xc0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a13      	ldr	r2, [pc, #76]	; (8000820 <TIMER2_VoidInitInputCapture+0xc0>)
 80007d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80007d6:	6013      	str	r3, [r2, #0]
		// Enable capture on each channel,CC2E: Capture/Compare 2 output enable
		SET_BIT(TIMER2_CCER,4);
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <TIMER2_VoidInitInputCapture+0xc4>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a11      	ldr	r2, [pc, #68]	; (8000824 <TIMER2_VoidInitInputCapture+0xc4>)
 80007de:	f043 0310 	orr.w	r3, r3, #16
 80007e2:	6013      	str	r3, [r2, #0]

		CLR_BIT(TIMER2_CCER,5);
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <TIMER2_VoidInitInputCapture+0xc4>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a0e      	ldr	r2, [pc, #56]	; (8000824 <TIMER2_VoidInitInputCapture+0xc4>)
 80007ea:	f023 0320 	bic.w	r3, r3, #32
 80007ee:	6013      	str	r3, [r2, #0]


		// Enable capture interrupt on each channel
		SET_BIT(TIMER2_DIER,2);
 80007f0:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <TIMER2_VoidInitInputCapture+0xc8>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a0c      	ldr	r2, [pc, #48]	; (8000828 <TIMER2_VoidInitInputCapture+0xc8>)
 80007f6:	f043 0304 	orr.w	r3, r3, #4
 80007fa:	6013      	str	r3, [r2, #0]
		break;
 80007fc:	bf00      	nop
	}

	// Enable Timer 3
	SET_BIT(TIMER2_CR1,0);
 80007fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6013      	str	r3, [r2, #0]

}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	40000028 	.word	0x40000028
 800081c:	40000024 	.word	0x40000024
 8000820:	40000018 	.word	0x40000018
 8000824:	40000020 	.word	0x40000020
 8000828:	4000000c 	.word	0x4000000c

0800082c <Timer2_u8InputCaptureSetCallBack>:
u8 Timer2_u8InputCaptureSetCallBack(void (*Copy_pvCallBackFunc)(void))
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	u8 Local_u8ErrorState = OK;
 8000834:	2300      	movs	r3, #0
 8000836:	73fb      	strb	r3, [r7, #15]
	if(Copy_pvCallBackFunc != NULL)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d002      	beq.n	8000844 <Timer2_u8InputCaptureSetCallBack+0x18>
	{
		TIMER2_pvInputCaptureCallBackFunc = Copy_pvCallBackFunc;
 800083e:	4a04      	ldr	r2, [pc, #16]	; (8000850 <Timer2_u8InputCaptureSetCallBack+0x24>)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6013      	str	r3, [r2, #0]
	else
	{
		//		Local_u8ErrorState= NULL_POINTER;
	}

	return Local_u8ErrorState;
 8000844:	7bfb      	ldrb	r3, [r7, #15]

}
 8000846:	4618      	mov	r0, r3
 8000848:	3714      	adds	r7, #20
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr
 8000850:	20000024 	.word	0x20000024

08000854 <Timer2_VoidSetPreload>:

void Timer2_VoidSetPreload(u8 Copy_u8Preload)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
	TIMER2_CNT = Copy_u8Preload;
 800085e:	4a04      	ldr	r2, [pc, #16]	; (8000870 <Timer2_VoidSetPreload+0x1c>)
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	6013      	str	r3, [r2, #0]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40000024 	.word	0x40000024

08000874 <Timer2_VoidEnableIntOnEachChannle>:

void Timer2_VoidEnableIntOnEachChannle(u8 Copy_ChannleNumber)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
	switch(Copy_ChannleNumber)
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d002      	beq.n	800088a <Timer2_VoidEnableIntOnEachChannle+0x16>
 8000884:	2b01      	cmp	r3, #1
 8000886:	d007      	beq.n	8000898 <Timer2_VoidEnableIntOnEachChannle+0x24>
	case Channle2:
		SET_BIT(TIMER2_DIER,2);
		break;

	}
}
 8000888:	e00d      	b.n	80008a6 <Timer2_VoidEnableIntOnEachChannle+0x32>
		SET_BIT(TIMER2_DIER,1);
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <Timer2_VoidEnableIntOnEachChannle+0x3c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <Timer2_VoidEnableIntOnEachChannle+0x3c>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6013      	str	r3, [r2, #0]
		break;
 8000896:	e006      	b.n	80008a6 <Timer2_VoidEnableIntOnEachChannle+0x32>
		SET_BIT(TIMER2_DIER,2);
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <Timer2_VoidEnableIntOnEachChannle+0x3c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <Timer2_VoidEnableIntOnEachChannle+0x3c>)
 800089e:	f043 0304 	orr.w	r3, r3, #4
 80008a2:	6013      	str	r3, [r2, #0]
		break;
 80008a4:	bf00      	nop
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr
 80008b0:	4000000c 	.word	0x4000000c

080008b4 <Timer2_VoidDisableIntOnEachChannle>:
void Timer2_VoidDisableIntOnEachChannle(u8 Copy_ChannleNumber)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
	switch(Copy_ChannleNumber)
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d002      	beq.n	80008ca <Timer2_VoidDisableIntOnEachChannle+0x16>
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d007      	beq.n	80008d8 <Timer2_VoidDisableIntOnEachChannle+0x24>
		CLR_BIT(TIMER2_DIER,2);
		break;

	}

}
 80008c8:	e00d      	b.n	80008e6 <Timer2_VoidDisableIntOnEachChannle+0x32>
		CLR_BIT(TIMER2_DIER,1);
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <Timer2_VoidDisableIntOnEachChannle+0x3c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a08      	ldr	r2, [pc, #32]	; (80008f0 <Timer2_VoidDisableIntOnEachChannle+0x3c>)
 80008d0:	f023 0302 	bic.w	r3, r3, #2
 80008d4:	6013      	str	r3, [r2, #0]
		break;
 80008d6:	e006      	b.n	80008e6 <Timer2_VoidDisableIntOnEachChannle+0x32>
		CLR_BIT(TIMER2_DIER,2);
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <Timer2_VoidDisableIntOnEachChannle+0x3c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a04      	ldr	r2, [pc, #16]	; (80008f0 <Timer2_VoidDisableIntOnEachChannle+0x3c>)
 80008de:	f023 0304 	bic.w	r3, r3, #4
 80008e2:	6013      	str	r3, [r2, #0]
		break;
 80008e4:	bf00      	nop
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	4000000c 	.word	0x4000000c

080008f4 <Timer2_VoidChangePolarityOnEachChannle>:
void Timer2_VoidChangePolarityOnEachChannle(u8 Copy_ChannleNumber,u8 Copy_Edge)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	460a      	mov	r2, r1
 80008fe:	71fb      	strb	r3, [r7, #7]
 8000900:	4613      	mov	r3, r2
 8000902:	71bb      	strb	r3, [r7, #6]
	switch(Copy_Edge)
 8000904:	79bb      	ldrb	r3, [r7, #6]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d002      	beq.n	8000910 <Timer2_VoidChangePolarityOnEachChannle+0x1c>
 800090a:	2b01      	cmp	r3, #1
 800090c:	d015      	beq.n	800093a <Timer2_VoidChangePolarityOnEachChannle+0x46>
				SET_BIT(TIMER2_CCER,5);
				break;
			}
			break;
	}
}
 800090e:	e029      	b.n	8000964 <Timer2_VoidChangePolarityOnEachChannle+0x70>
		switch(Copy_ChannleNumber)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d002      	beq.n	800091c <Timer2_VoidChangePolarityOnEachChannle+0x28>
 8000916:	2b01      	cmp	r3, #1
 8000918:	d007      	beq.n	800092a <Timer2_VoidChangePolarityOnEachChannle+0x36>
		break;
 800091a:	e023      	b.n	8000964 <Timer2_VoidChangePolarityOnEachChannle+0x70>
			CLR_BIT(TIMER2_CCER,1);
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <Timer2_VoidChangePolarityOnEachChannle+0x7c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a13      	ldr	r2, [pc, #76]	; (8000970 <Timer2_VoidChangePolarityOnEachChannle+0x7c>)
 8000922:	f023 0302 	bic.w	r3, r3, #2
 8000926:	6013      	str	r3, [r2, #0]
			break;
 8000928:	e006      	b.n	8000938 <Timer2_VoidChangePolarityOnEachChannle+0x44>
			CLR_BIT(TIMER2_CCER,5);
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <Timer2_VoidChangePolarityOnEachChannle+0x7c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a10      	ldr	r2, [pc, #64]	; (8000970 <Timer2_VoidChangePolarityOnEachChannle+0x7c>)
 8000930:	f023 0320 	bic.w	r3, r3, #32
 8000934:	6013      	str	r3, [r2, #0]
			break;
 8000936:	bf00      	nop
		break;
 8000938:	e014      	b.n	8000964 <Timer2_VoidChangePolarityOnEachChannle+0x70>
			switch(Copy_ChannleNumber)
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d002      	beq.n	8000946 <Timer2_VoidChangePolarityOnEachChannle+0x52>
 8000940:	2b01      	cmp	r3, #1
 8000942:	d007      	beq.n	8000954 <Timer2_VoidChangePolarityOnEachChannle+0x60>
			break;
 8000944:	e00d      	b.n	8000962 <Timer2_VoidChangePolarityOnEachChannle+0x6e>
				SET_BIT(TIMER2_CCER,1);
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <Timer2_VoidChangePolarityOnEachChannle+0x7c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a09      	ldr	r2, [pc, #36]	; (8000970 <Timer2_VoidChangePolarityOnEachChannle+0x7c>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	6013      	str	r3, [r2, #0]
				break;
 8000952:	e006      	b.n	8000962 <Timer2_VoidChangePolarityOnEachChannle+0x6e>
				SET_BIT(TIMER2_CCER,5);
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <Timer2_VoidChangePolarityOnEachChannle+0x7c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a05      	ldr	r2, [pc, #20]	; (8000970 <Timer2_VoidChangePolarityOnEachChannle+0x7c>)
 800095a:	f043 0320 	orr.w	r3, r3, #32
 800095e:	6013      	str	r3, [r2, #0]
				break;
 8000960:	bf00      	nop
			break;
 8000962:	bf00      	nop
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40000020 	.word	0x40000020

08000974 <Timer2_VoidGetCapturedValue>:
u32  Timer2_VoidGetCapturedValue(u8 Copy_ChannleNumber)
{
 8000974:	b480      	push	{r7}
 8000976:	b087      	sub	sp, #28
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
	u32 Value1,Value2, returnValue;
	switch(Copy_ChannleNumber)
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d002      	beq.n	800098a <Timer2_VoidGetCapturedValue+0x16>
 8000984:	2b01      	cmp	r3, #1
 8000986:	d006      	beq.n	8000996 <Timer2_VoidGetCapturedValue+0x22>
 8000988:	e00b      	b.n	80009a2 <Timer2_VoidGetCapturedValue+0x2e>
	{
		case Channle1:
			Value1=TIMER2_CCR1;
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <Timer2_VoidGetCapturedValue+0x3c>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	60fb      	str	r3, [r7, #12]
			returnValue = Value1;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	617b      	str	r3, [r7, #20]
			break;
 8000994:	e005      	b.n	80009a2 <Timer2_VoidGetCapturedValue+0x2e>
		case Channle2:
			Value2=TIMER2_CCR2;
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <Timer2_VoidGetCapturedValue+0x40>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	613b      	str	r3, [r7, #16]
			returnValue = Value2;
 800099c:	693b      	ldr	r3, [r7, #16]
 800099e:	617b      	str	r3, [r7, #20]
			break;
 80009a0:	bf00      	nop
	}
	return returnValue;
 80009a2:	697b      	ldr	r3, [r7, #20]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	371c      	adds	r7, #28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40000034 	.word	0x40000034
 80009b4:	40000038 	.word	0x40000038

080009b8 <TIM2_IRQHandler>:


/*Timer2 ISR*/
void TIM2_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	if(TIMER2_pvInputCaptureCallBackFunc != NULL)
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <TIM2_IRQHandler+0x18>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d002      	beq.n	80009ca <TIM2_IRQHandler+0x12>
	{
		TIMER2_pvInputCaptureCallBackFunc();
 80009c4:	4b02      	ldr	r3, [pc, #8]	; (80009d0 <TIM2_IRQHandler+0x18>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4798      	blx	r3
	}
	else
	{
		/*Do nothing*/
	}
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000024 	.word	0x20000024

080009d4 <TIMER3_VoidInitInputCapture>:

/*Global pointer to function to hold the callback function address*/
static void (*TIMER3_pvInputCaptureCallBackFunc)(void) = NULL;

void TIMER3_VoidInitInputCapture(u8 Copy_ChannleNumber)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]

	//prescaler for 8Mhz
	TIMER3_PSC=8-1;
 80009de:	4b4e      	ldr	r3, [pc, #312]	; (8000b18 <TIMER3_VoidInitInputCapture+0x144>)
 80009e0:	2207      	movs	r2, #7
 80009e2:	601a      	str	r2, [r3, #0]

	TIMER3_CNT=0;
 80009e4:	4b4d      	ldr	r3, [pc, #308]	; (8000b1c <TIMER3_VoidInitInputCapture+0x148>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]

	//configure input capture for selected channle
	switch(Copy_ChannleNumber)
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	2b03      	cmp	r3, #3
 80009ee:	f200 8087 	bhi.w	8000b00 <TIMER3_VoidInitInputCapture+0x12c>
 80009f2:	a201      	add	r2, pc, #4	; (adr r2, 80009f8 <TIMER3_VoidInitInputCapture+0x24>)
 80009f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f8:	08000a09 	.word	0x08000a09
 80009fc:	08000a47 	.word	0x08000a47
 8000a00:	08000a85 	.word	0x08000a85
 8000a04:	08000ac3 	.word	0x08000ac3
	{
	case Channle1:

		//CC1s channel is configured as input, IC1 is mapped on TI1
		SET_BIT(TIMER3_CCMR1,0);
 8000a08:	4b45      	ldr	r3, [pc, #276]	; (8000b20 <TIMER3_VoidInitInputCapture+0x14c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a44      	ldr	r2, [pc, #272]	; (8000b20 <TIMER3_VoidInitInputCapture+0x14c>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	6013      	str	r3, [r2, #0]
		CLR_BIT(TIMER3_CCMR1,1);
 8000a14:	4b42      	ldr	r3, [pc, #264]	; (8000b20 <TIMER3_VoidInitInputCapture+0x14c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a41      	ldr	r2, [pc, #260]	; (8000b20 <TIMER3_VoidInitInputCapture+0x14c>)
 8000a1a:	f023 0302 	bic.w	r3, r3, #2
 8000a1e:	6013      	str	r3, [r2, #0]
		// Enable capture on each channel
		SET_BIT(TIMER3_CCER,0);
 8000a20:	4b40      	ldr	r3, [pc, #256]	; (8000b24 <TIMER3_VoidInitInputCapture+0x150>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a3f      	ldr	r2, [pc, #252]	; (8000b24 <TIMER3_VoidInitInputCapture+0x150>)
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	6013      	str	r3, [r2, #0]
		CLR_BIT(TIMER3_CCER,1);
 8000a2c:	4b3d      	ldr	r3, [pc, #244]	; (8000b24 <TIMER3_VoidInitInputCapture+0x150>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a3c      	ldr	r2, [pc, #240]	; (8000b24 <TIMER3_VoidInitInputCapture+0x150>)
 8000a32:	f023 0302 	bic.w	r3, r3, #2
 8000a36:	6013      	str	r3, [r2, #0]

		// Enable capture interrupt on each channel
		SET_BIT(TIMER3_DIER,1);
 8000a38:	4b3b      	ldr	r3, [pc, #236]	; (8000b28 <TIMER3_VoidInitInputCapture+0x154>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a3a      	ldr	r2, [pc, #232]	; (8000b28 <TIMER3_VoidInitInputCapture+0x154>)
 8000a3e:	f043 0302 	orr.w	r3, r3, #2
 8000a42:	6013      	str	r3, [r2, #0]
		break;
 8000a44:	e05c      	b.n	8000b00 <TIMER3_VoidInitInputCapture+0x12c>

	case Channle2:

		//CC1s channel is configured as input, IC1 is mapped on TI1
		SET_BIT(TIMER3_CCMR1,8);
 8000a46:	4b36      	ldr	r3, [pc, #216]	; (8000b20 <TIMER3_VoidInitInputCapture+0x14c>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a35      	ldr	r2, [pc, #212]	; (8000b20 <TIMER3_VoidInitInputCapture+0x14c>)
 8000a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a50:	6013      	str	r3, [r2, #0]
		CLR_BIT(TIMER3_CCMR1,9);
 8000a52:	4b33      	ldr	r3, [pc, #204]	; (8000b20 <TIMER3_VoidInitInputCapture+0x14c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a32      	ldr	r2, [pc, #200]	; (8000b20 <TIMER3_VoidInitInputCapture+0x14c>)
 8000a58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000a5c:	6013      	str	r3, [r2, #0]
		// Enable capture on each channel
		SET_BIT(TIMER3_CCER,4);
 8000a5e:	4b31      	ldr	r3, [pc, #196]	; (8000b24 <TIMER3_VoidInitInputCapture+0x150>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a30      	ldr	r2, [pc, #192]	; (8000b24 <TIMER3_VoidInitInputCapture+0x150>)
 8000a64:	f043 0310 	orr.w	r3, r3, #16
 8000a68:	6013      	str	r3, [r2, #0]
		CLR_BIT(TIMER3_CCER,5);
 8000a6a:	4b2e      	ldr	r3, [pc, #184]	; (8000b24 <TIMER3_VoidInitInputCapture+0x150>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <TIMER3_VoidInitInputCapture+0x150>)
 8000a70:	f023 0320 	bic.w	r3, r3, #32
 8000a74:	6013      	str	r3, [r2, #0]

		// Enable capture interrupt on each channel
		SET_BIT(TIMER3_DIER,2);
 8000a76:	4b2c      	ldr	r3, [pc, #176]	; (8000b28 <TIMER3_VoidInitInputCapture+0x154>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a2b      	ldr	r2, [pc, #172]	; (8000b28 <TIMER3_VoidInitInputCapture+0x154>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	6013      	str	r3, [r2, #0]
		break;
 8000a82:	e03d      	b.n	8000b00 <TIMER3_VoidInitInputCapture+0x12c>
	case Channle3:
		//CC1s channel is configured as input, IC1 is mapped on TI1
		SET_BIT(TIMER3_CCMR2,0);
 8000a84:	4b29      	ldr	r3, [pc, #164]	; (8000b2c <TIMER3_VoidInitInputCapture+0x158>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a28      	ldr	r2, [pc, #160]	; (8000b2c <TIMER3_VoidInitInputCapture+0x158>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	6013      	str	r3, [r2, #0]
		CLR_BIT(TIMER3_CCMR2,1);
 8000a90:	4b26      	ldr	r3, [pc, #152]	; (8000b2c <TIMER3_VoidInitInputCapture+0x158>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a25      	ldr	r2, [pc, #148]	; (8000b2c <TIMER3_VoidInitInputCapture+0x158>)
 8000a96:	f023 0302 	bic.w	r3, r3, #2
 8000a9a:	6013      	str	r3, [r2, #0]
		// Enable capture on each channel
		SET_BIT(TIMER3_CCER,8);
 8000a9c:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <TIMER3_VoidInitInputCapture+0x150>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a20      	ldr	r2, [pc, #128]	; (8000b24 <TIMER3_VoidInitInputCapture+0x150>)
 8000aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa6:	6013      	str	r3, [r2, #0]
		CLR_BIT(TIMER3_CCER,9);
 8000aa8:	4b1e      	ldr	r3, [pc, #120]	; (8000b24 <TIMER3_VoidInitInputCapture+0x150>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a1d      	ldr	r2, [pc, #116]	; (8000b24 <TIMER3_VoidInitInputCapture+0x150>)
 8000aae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000ab2:	6013      	str	r3, [r2, #0]

		// Enable capture interrupt on each channel
		SET_BIT(TIMER3_DIER,3);
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <TIMER3_VoidInitInputCapture+0x154>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a1b      	ldr	r2, [pc, #108]	; (8000b28 <TIMER3_VoidInitInputCapture+0x154>)
 8000aba:	f043 0308 	orr.w	r3, r3, #8
 8000abe:	6013      	str	r3, [r2, #0]
		break;
 8000ac0:	e01e      	b.n	8000b00 <TIMER3_VoidInitInputCapture+0x12c>
	case Channle4:
		//CC1s channel is configured as input, IC1 is mapped on TI1
		SET_BIT(TIMER3_CCMR2,8);
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <TIMER3_VoidInitInputCapture+0x158>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a19      	ldr	r2, [pc, #100]	; (8000b2c <TIMER3_VoidInitInputCapture+0x158>)
 8000ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000acc:	6013      	str	r3, [r2, #0]
		CLR_BIT(TIMER3_CCMR2,9);
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <TIMER3_VoidInitInputCapture+0x158>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a16      	ldr	r2, [pc, #88]	; (8000b2c <TIMER3_VoidInitInputCapture+0x158>)
 8000ad4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000ad8:	6013      	str	r3, [r2, #0]
		// Enable capture on each channel
		SET_BIT(TIMER3_CCER,12);
 8000ada:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <TIMER3_VoidInitInputCapture+0x150>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a11      	ldr	r2, [pc, #68]	; (8000b24 <TIMER3_VoidInitInputCapture+0x150>)
 8000ae0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ae4:	6013      	str	r3, [r2, #0]
		CLR_BIT(TIMER3_CCER,13);
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <TIMER3_VoidInitInputCapture+0x150>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <TIMER3_VoidInitInputCapture+0x150>)
 8000aec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000af0:	6013      	str	r3, [r2, #0]

		// Enable capture interrupt on each channel
		SET_BIT(TIMER3_DIER,4);
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <TIMER3_VoidInitInputCapture+0x154>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a0c      	ldr	r2, [pc, #48]	; (8000b28 <TIMER3_VoidInitInputCapture+0x154>)
 8000af8:	f043 0310 	orr.w	r3, r3, #16
 8000afc:	6013      	str	r3, [r2, #0]
		break;
 8000afe:	bf00      	nop
		}
	// Enable Timer 3
	SET_BIT(TIMER3_CR1,0);
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <TIMER3_VoidInitInputCapture+0x15c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <TIMER3_VoidInitInputCapture+0x15c>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	6013      	str	r3, [r2, #0]

}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40000428 	.word	0x40000428
 8000b1c:	40000424 	.word	0x40000424
 8000b20:	40000418 	.word	0x40000418
 8000b24:	40000420 	.word	0x40000420
 8000b28:	4000040c 	.word	0x4000040c
 8000b2c:	4000041c 	.word	0x4000041c
 8000b30:	40000400 	.word	0x40000400

08000b34 <Timer3_u8InputCaptureSetCallBack>:
u8 Timer3_u8InputCaptureSetCallBack(void (*Copy_pvCallBackFunc)(void))
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	u8 Local_u8ErrorState = OK;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	73fb      	strb	r3, [r7, #15]
	if(Copy_pvCallBackFunc != NULL)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d002      	beq.n	8000b4c <Timer3_u8InputCaptureSetCallBack+0x18>
	{
		TIMER3_pvInputCaptureCallBackFunc = Copy_pvCallBackFunc;
 8000b46:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <Timer3_u8InputCaptureSetCallBack+0x24>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6013      	str	r3, [r2, #0]
	else
	{
		//		Local_u8ErrorState= NULL_POINTER;
	}

	return Local_u8ErrorState;
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]

}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	20000028 	.word	0x20000028

08000b5c <Timer3_VoidSetPreload>:

void Timer3_VoidSetPreload(u8 Copy_u8Preload)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
	TIMER3_CNT = Copy_u8Preload;
 8000b66:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <Timer3_VoidSetPreload+0x1c>)
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	6013      	str	r3, [r2, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40000424 	.word	0x40000424

08000b7c <Timer3_VoidEnableIntOnEachChannle>:


void Timer3_VoidEnableIntOnEachChannle(u8 Copy_ChannleNumber)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
	switch(Copy_ChannleNumber)
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	2b03      	cmp	r3, #3
 8000b8a:	d827      	bhi.n	8000bdc <Timer3_VoidEnableIntOnEachChannle+0x60>
 8000b8c:	a201      	add	r2, pc, #4	; (adr r2, 8000b94 <Timer3_VoidEnableIntOnEachChannle+0x18>)
 8000b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b92:	bf00      	nop
 8000b94:	08000ba5 	.word	0x08000ba5
 8000b98:	08000bb3 	.word	0x08000bb3
 8000b9c:	08000bc1 	.word	0x08000bc1
 8000ba0:	08000bcf 	.word	0x08000bcf
	{
	case Channle1:
		SET_BIT(TIMER3_DIER,1);
 8000ba4:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <Timer3_VoidEnableIntOnEachChannle+0x6c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0f      	ldr	r2, [pc, #60]	; (8000be8 <Timer3_VoidEnableIntOnEachChannle+0x6c>)
 8000baa:	f043 0302 	orr.w	r3, r3, #2
 8000bae:	6013      	str	r3, [r2, #0]
		break;
 8000bb0:	e014      	b.n	8000bdc <Timer3_VoidEnableIntOnEachChannle+0x60>
	case Channle2:
		SET_BIT(TIMER3_DIER,2);
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <Timer3_VoidEnableIntOnEachChannle+0x6c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a0c      	ldr	r2, [pc, #48]	; (8000be8 <Timer3_VoidEnableIntOnEachChannle+0x6c>)
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	6013      	str	r3, [r2, #0]
		break;
 8000bbe:	e00d      	b.n	8000bdc <Timer3_VoidEnableIntOnEachChannle+0x60>
	case Channle3:
		SET_BIT(TIMER3_DIER,3);
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <Timer3_VoidEnableIntOnEachChannle+0x6c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <Timer3_VoidEnableIntOnEachChannle+0x6c>)
 8000bc6:	f043 0308 	orr.w	r3, r3, #8
 8000bca:	6013      	str	r3, [r2, #0]
		break;
 8000bcc:	e006      	b.n	8000bdc <Timer3_VoidEnableIntOnEachChannle+0x60>
	case Channle4:
		SET_BIT(TIMER3_DIER,4);
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <Timer3_VoidEnableIntOnEachChannle+0x6c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <Timer3_VoidEnableIntOnEachChannle+0x6c>)
 8000bd4:	f043 0310 	orr.w	r3, r3, #16
 8000bd8:	6013      	str	r3, [r2, #0]
		break;
 8000bda:	bf00      	nop
	}
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	4000040c 	.word	0x4000040c

08000bec <Timer3_VoidDisableIntOnEachChannle>:
void Timer3_VoidDisableIntOnEachChannle(u8 Copy_ChannleNumber)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
		switch(Copy_ChannleNumber)
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	2b03      	cmp	r3, #3
 8000bfa:	d827      	bhi.n	8000c4c <Timer3_VoidDisableIntOnEachChannle+0x60>
 8000bfc:	a201      	add	r2, pc, #4	; (adr r2, 8000c04 <Timer3_VoidDisableIntOnEachChannle+0x18>)
 8000bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c02:	bf00      	nop
 8000c04:	08000c15 	.word	0x08000c15
 8000c08:	08000c23 	.word	0x08000c23
 8000c0c:	08000c31 	.word	0x08000c31
 8000c10:	08000c3f 	.word	0x08000c3f
		{
		case Channle1:
			CLR_BIT(TIMER3_DIER,1);
 8000c14:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <Timer3_VoidDisableIntOnEachChannle+0x6c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <Timer3_VoidDisableIntOnEachChannle+0x6c>)
 8000c1a:	f023 0302 	bic.w	r3, r3, #2
 8000c1e:	6013      	str	r3, [r2, #0]
			break;
 8000c20:	e014      	b.n	8000c4c <Timer3_VoidDisableIntOnEachChannle+0x60>
		case Channle2:
			CLR_BIT(TIMER3_DIER,2);
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <Timer3_VoidDisableIntOnEachChannle+0x6c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a0c      	ldr	r2, [pc, #48]	; (8000c58 <Timer3_VoidDisableIntOnEachChannle+0x6c>)
 8000c28:	f023 0304 	bic.w	r3, r3, #4
 8000c2c:	6013      	str	r3, [r2, #0]
			break;
 8000c2e:	e00d      	b.n	8000c4c <Timer3_VoidDisableIntOnEachChannle+0x60>
		case Channle3:
			CLR_BIT(TIMER3_DIER,3);
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <Timer3_VoidDisableIntOnEachChannle+0x6c>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <Timer3_VoidDisableIntOnEachChannle+0x6c>)
 8000c36:	f023 0308 	bic.w	r3, r3, #8
 8000c3a:	6013      	str	r3, [r2, #0]
			break;
 8000c3c:	e006      	b.n	8000c4c <Timer3_VoidDisableIntOnEachChannle+0x60>
		case Channle4:
			CLR_BIT(TIMER3_DIER,4);
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <Timer3_VoidDisableIntOnEachChannle+0x6c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <Timer3_VoidDisableIntOnEachChannle+0x6c>)
 8000c44:	f023 0310 	bic.w	r3, r3, #16
 8000c48:	6013      	str	r3, [r2, #0]
			break;
 8000c4a:	bf00      	nop
		}
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	4000040c 	.word	0x4000040c

08000c5c <Timer3_VoidChangePolarityOnEachChannle>:

void Timer3_VoidChangePolarityOnEachChannle(u8 Copy_ChannleNumber,u8 Copy_Edge)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	460a      	mov	r2, r1
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	71bb      	strb	r3, [r7, #6]
	switch(Copy_Edge)
 8000c6c:	79bb      	ldrb	r3, [r7, #6]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d002      	beq.n	8000c78 <Timer3_VoidChangePolarityOnEachChannle+0x1c>
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d02b      	beq.n	8000cce <Timer3_VoidChangePolarityOnEachChannle+0x72>
				SET_BIT(TIMER3_CCER,13);
				break;
			}
			break;
	   }
}
 8000c76:	e059      	b.n	8000d2c <Timer3_VoidChangePolarityOnEachChannle+0xd0>
		switch(Copy_ChannleNumber)
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	2b03      	cmp	r3, #3
 8000c7c:	d853      	bhi.n	8000d26 <Timer3_VoidChangePolarityOnEachChannle+0xca>
 8000c7e:	a201      	add	r2, pc, #4	; (adr r2, 8000c84 <Timer3_VoidChangePolarityOnEachChannle+0x28>)
 8000c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c84:	08000c95 	.word	0x08000c95
 8000c88:	08000ca3 	.word	0x08000ca3
 8000c8c:	08000cb1 	.word	0x08000cb1
 8000c90:	08000cbf 	.word	0x08000cbf
			CLR_BIT(TIMER3_CCER,1);
 8000c94:	4b28      	ldr	r3, [pc, #160]	; (8000d38 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a27      	ldr	r2, [pc, #156]	; (8000d38 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000c9a:	f023 0302 	bic.w	r3, r3, #2
 8000c9e:	6013      	str	r3, [r2, #0]
			break;
 8000ca0:	e014      	b.n	8000ccc <Timer3_VoidChangePolarityOnEachChannle+0x70>
			CLR_BIT(TIMER3_CCER,5);
 8000ca2:	4b25      	ldr	r3, [pc, #148]	; (8000d38 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a24      	ldr	r2, [pc, #144]	; (8000d38 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000ca8:	f023 0320 	bic.w	r3, r3, #32
 8000cac:	6013      	str	r3, [r2, #0]
			break;
 8000cae:	e00d      	b.n	8000ccc <Timer3_VoidChangePolarityOnEachChannle+0x70>
			CLR_BIT(TIMER3_CCER,9);
 8000cb0:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a20      	ldr	r2, [pc, #128]	; (8000d38 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000cb6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000cba:	6013      	str	r3, [r2, #0]
			break;
 8000cbc:	e006      	b.n	8000ccc <Timer3_VoidChangePolarityOnEachChannle+0x70>
			CLR_BIT(TIMER3_CCER,13);
 8000cbe:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a1d      	ldr	r2, [pc, #116]	; (8000d38 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000cc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000cc8:	6013      	str	r3, [r2, #0]
			break;
 8000cca:	bf00      	nop
		break;
 8000ccc:	e02b      	b.n	8000d26 <Timer3_VoidChangePolarityOnEachChannle+0xca>
			switch(Copy_ChannleNumber)
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	2b03      	cmp	r3, #3
 8000cd2:	d82a      	bhi.n	8000d2a <Timer3_VoidChangePolarityOnEachChannle+0xce>
 8000cd4:	a201      	add	r2, pc, #4	; (adr r2, 8000cdc <Timer3_VoidChangePolarityOnEachChannle+0x80>)
 8000cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cda:	bf00      	nop
 8000cdc:	08000ced 	.word	0x08000ced
 8000ce0:	08000cfb 	.word	0x08000cfb
 8000ce4:	08000d09 	.word	0x08000d09
 8000ce8:	08000d17 	.word	0x08000d17
				SET_BIT(TIMER3_CCER,1);
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a11      	ldr	r2, [pc, #68]	; (8000d38 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000cf2:	f043 0302 	orr.w	r3, r3, #2
 8000cf6:	6013      	str	r3, [r2, #0]
				break;
 8000cf8:	e014      	b.n	8000d24 <Timer3_VoidChangePolarityOnEachChannle+0xc8>
				SET_BIT(TIMER3_CCER,5);
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a0e      	ldr	r2, [pc, #56]	; (8000d38 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000d00:	f043 0320 	orr.w	r3, r3, #32
 8000d04:	6013      	str	r3, [r2, #0]
				break;
 8000d06:	e00d      	b.n	8000d24 <Timer3_VoidChangePolarityOnEachChannle+0xc8>
				SET_BIT(TIMER3_CCER,9);
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000d0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d12:	6013      	str	r3, [r2, #0]
				break;
 8000d14:	e006      	b.n	8000d24 <Timer3_VoidChangePolarityOnEachChannle+0xc8>
				SET_BIT(TIMER3_CCER,13);
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <Timer3_VoidChangePolarityOnEachChannle+0xdc>)
 8000d1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d20:	6013      	str	r3, [r2, #0]
				break;
 8000d22:	bf00      	nop
			break;
 8000d24:	e001      	b.n	8000d2a <Timer3_VoidChangePolarityOnEachChannle+0xce>
		break;
 8000d26:	bf00      	nop
 8000d28:	e000      	b.n	8000d2c <Timer3_VoidChangePolarityOnEachChannle+0xd0>
			break;
 8000d2a:	bf00      	nop
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	40000420 	.word	0x40000420

08000d3c <Timer3_VoidGetCapturedValue>:

u32  Timer3_VoidGetCapturedValue(u8 Copy_ChannleNumber)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b087      	sub	sp, #28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
u32 Value1,Value2,Value3,Value4;
	switch(Copy_ChannleNumber)
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	2b03      	cmp	r3, #3
 8000d4a:	d81f      	bhi.n	8000d8c <Timer3_VoidGetCapturedValue+0x50>
 8000d4c:	a201      	add	r2, pc, #4	; (adr r2, 8000d54 <Timer3_VoidGetCapturedValue+0x18>)
 8000d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d52:	bf00      	nop
 8000d54:	08000d65 	.word	0x08000d65
 8000d58:	08000d6f 	.word	0x08000d6f
 8000d5c:	08000d79 	.word	0x08000d79
 8000d60:	08000d83 	.word	0x08000d83
	{
	case Channle1:
		Value1=TIMER3_CCR1;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <Timer3_VoidGetCapturedValue+0x5c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	60bb      	str	r3, [r7, #8]
		return Value1;
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	e00e      	b.n	8000d8c <Timer3_VoidGetCapturedValue+0x50>
		break;
	case Channle2:
	    Value2=TIMER3_CCR2;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <Timer3_VoidGetCapturedValue+0x60>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	60fb      	str	r3, [r7, #12]
	    return Value2;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	e009      	b.n	8000d8c <Timer3_VoidGetCapturedValue+0x50>
		break;
	case Channle3:
	    Value3=TIMER3_CCR3;
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <Timer3_VoidGetCapturedValue+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	613b      	str	r3, [r7, #16]
	    return Value3;
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	e004      	b.n	8000d8c <Timer3_VoidGetCapturedValue+0x50>
		break;
	case Channle4:
	    Value4=TIMER3_CCR4;
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <Timer3_VoidGetCapturedValue+0x68>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	617b      	str	r3, [r7, #20]
	    return Value4;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	e7ff      	b.n	8000d8c <Timer3_VoidGetCapturedValue+0x50>
		break;
	}
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	371c      	adds	r7, #28
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	40000434 	.word	0x40000434
 8000d9c:	40000438 	.word	0x40000438
 8000da0:	4000043c 	.word	0x4000043c
 8000da4:	40000440 	.word	0x40000440

08000da8 <TIM3_IRQHandler>:


/*Timer3 ISR*/
void TIM3_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	if(TIMER3_pvInputCaptureCallBackFunc != NULL)
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <TIM3_IRQHandler+0x18>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d002      	beq.n	8000dba <TIM3_IRQHandler+0x12>
	{
		TIMER3_pvInputCaptureCallBackFunc();
 8000db4:	4b02      	ldr	r3, [pc, #8]	; (8000dc0 <TIM3_IRQHandler+0x18>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4798      	blx	r3
	}
	else
	{
		/*Do nothing*/
	}
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000028 	.word	0x20000028

08000dc4 <TIMER4_Void_PwmInit>:




void TIMER4_Void_PwmInit(u8 Copy_U8_Channel)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
	/* To disable timer , Enable auto Preload ARR */
	TIMER4_PSC = 2000;
 8000dce:	4b5b      	ldr	r3, [pc, #364]	; (8000f3c <TIMER4_Void_PwmInit+0x178>)
 8000dd0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000dd4:	601a      	str	r2, [r3, #0]
//	TIMER4_CR1 = 0x0080;
	//Auto-reload preload enable
	SET_BIT(TIMER4_CR1,7);
 8000dd6:	4b5a      	ldr	r3, [pc, #360]	; (8000f40 <TIMER4_Void_PwmInit+0x17c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a59      	ldr	r2, [pc, #356]	; (8000f40 <TIMER4_Void_PwmInit+0x17c>)
 8000ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000de0:	6013      	str	r3, [r2, #0]
	TIMER4_ARR = 255;
 8000de2:	4b58      	ldr	r3, [pc, #352]	; (8000f44 <TIMER4_Void_PwmInit+0x180>)
 8000de4:	22ff      	movs	r2, #255	; 0xff
 8000de6:	601a      	str	r2, [r3, #0]
	switch(Copy_U8_Channel)
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	2b03      	cmp	r3, #3
 8000dee:	f200 8087 	bhi.w	8000f00 <TIMER4_Void_PwmInit+0x13c>
 8000df2:	a201      	add	r2, pc, #4	; (adr r2, 8000df8 <TIMER4_Void_PwmInit+0x34>)
 8000df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df8:	08000e09 	.word	0x08000e09
 8000dfc:	08000e47 	.word	0x08000e47
 8000e00:	08000e85 	.word	0x08000e85
 8000e04:	08000ec3 	.word	0x08000ec3
	{

	case TIMER4_CHANNEL1  :
		/* To Enable Preload register on CCR1 */
		SET_BIT(TIMER4_CCMR1,3);
 8000e08:	4b4f      	ldr	r3, [pc, #316]	; (8000f48 <TIMER4_Void_PwmInit+0x184>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a4e      	ldr	r2, [pc, #312]	; (8000f48 <TIMER4_Void_PwmInit+0x184>)
 8000e0e:	f043 0308 	orr.w	r3, r3, #8
 8000e12:	6013      	str	r3, [r2, #0]
		/* To Select PWM MODE 2 */
		CLR_BIT(TIMER4_CCMR1,4);
 8000e14:	4b4c      	ldr	r3, [pc, #304]	; (8000f48 <TIMER4_Void_PwmInit+0x184>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a4b      	ldr	r2, [pc, #300]	; (8000f48 <TIMER4_Void_PwmInit+0x184>)
 8000e1a:	f023 0310 	bic.w	r3, r3, #16
 8000e1e:	6013      	str	r3, [r2, #0]
		SET_BIT(TIMER4_CCMR1,5);
 8000e20:	4b49      	ldr	r3, [pc, #292]	; (8000f48 <TIMER4_Void_PwmInit+0x184>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a48      	ldr	r2, [pc, #288]	; (8000f48 <TIMER4_Void_PwmInit+0x184>)
 8000e26:	f043 0320 	orr.w	r3, r3, #32
 8000e2a:	6013      	str	r3, [r2, #0]
		SET_BIT(TIMER4_CCMR1,6);
 8000e2c:	4b46      	ldr	r3, [pc, #280]	; (8000f48 <TIMER4_Void_PwmInit+0x184>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a45      	ldr	r2, [pc, #276]	; (8000f48 <TIMER4_Void_PwmInit+0x184>)
 8000e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e36:	6013      	str	r3, [r2, #0]
		/* To Enable Capture compare to channel 1 */
		SET_BIT(TIMER4_CCER,0);                                 break;
 8000e38:	4b44      	ldr	r3, [pc, #272]	; (8000f4c <TIMER4_Void_PwmInit+0x188>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a43      	ldr	r2, [pc, #268]	; (8000f4c <TIMER4_Void_PwmInit+0x188>)
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	6013      	str	r3, [r2, #0]
 8000e44:	e05d      	b.n	8000f02 <TIMER4_Void_PwmInit+0x13e>
	case TIMER4_CHANNEL2  :
		/* To Enable Preload register on CCR2 */
		SET_BIT(TIMER4_CCMR1,11);
 8000e46:	4b40      	ldr	r3, [pc, #256]	; (8000f48 <TIMER4_Void_PwmInit+0x184>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a3f      	ldr	r2, [pc, #252]	; (8000f48 <TIMER4_Void_PwmInit+0x184>)
 8000e4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e50:	6013      	str	r3, [r2, #0]
		/* To Select PWM MODE 2 */
		CLR_BIT(TIMER4_CCMR1,12);
 8000e52:	4b3d      	ldr	r3, [pc, #244]	; (8000f48 <TIMER4_Void_PwmInit+0x184>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a3c      	ldr	r2, [pc, #240]	; (8000f48 <TIMER4_Void_PwmInit+0x184>)
 8000e58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e5c:	6013      	str	r3, [r2, #0]
		SET_BIT(TIMER4_CCMR1,13);
 8000e5e:	4b3a      	ldr	r3, [pc, #232]	; (8000f48 <TIMER4_Void_PwmInit+0x184>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a39      	ldr	r2, [pc, #228]	; (8000f48 <TIMER4_Void_PwmInit+0x184>)
 8000e64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e68:	6013      	str	r3, [r2, #0]
		SET_BIT(TIMER4_CCMR1,14);
 8000e6a:	4b37      	ldr	r3, [pc, #220]	; (8000f48 <TIMER4_Void_PwmInit+0x184>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a36      	ldr	r2, [pc, #216]	; (8000f48 <TIMER4_Void_PwmInit+0x184>)
 8000e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e74:	6013      	str	r3, [r2, #0]
		/* To Enable Capture compare to channel 2 */
		SET_BIT(TIMER4_CCER,4);                                 break;
 8000e76:	4b35      	ldr	r3, [pc, #212]	; (8000f4c <TIMER4_Void_PwmInit+0x188>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a34      	ldr	r2, [pc, #208]	; (8000f4c <TIMER4_Void_PwmInit+0x188>)
 8000e7c:	f043 0310 	orr.w	r3, r3, #16
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	e03e      	b.n	8000f02 <TIMER4_Void_PwmInit+0x13e>

	case TIMER4_CHANNEL3 :
		/* To Enable Preload register on CCR3 */
		SET_BIT(TIMER4_CCMR2,3);
 8000e84:	4b32      	ldr	r3, [pc, #200]	; (8000f50 <TIMER4_Void_PwmInit+0x18c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a31      	ldr	r2, [pc, #196]	; (8000f50 <TIMER4_Void_PwmInit+0x18c>)
 8000e8a:	f043 0308 	orr.w	r3, r3, #8
 8000e8e:	6013      	str	r3, [r2, #0]
		/* To Select PWM MODE 2 */
		CLR_BIT(TIMER4_CCMR2,4);
 8000e90:	4b2f      	ldr	r3, [pc, #188]	; (8000f50 <TIMER4_Void_PwmInit+0x18c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a2e      	ldr	r2, [pc, #184]	; (8000f50 <TIMER4_Void_PwmInit+0x18c>)
 8000e96:	f023 0310 	bic.w	r3, r3, #16
 8000e9a:	6013      	str	r3, [r2, #0]
		SET_BIT(TIMER4_CCMR2,5);
 8000e9c:	4b2c      	ldr	r3, [pc, #176]	; (8000f50 <TIMER4_Void_PwmInit+0x18c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a2b      	ldr	r2, [pc, #172]	; (8000f50 <TIMER4_Void_PwmInit+0x18c>)
 8000ea2:	f043 0320 	orr.w	r3, r3, #32
 8000ea6:	6013      	str	r3, [r2, #0]
		SET_BIT(TIMER4_CCMR2,6);
 8000ea8:	4b29      	ldr	r3, [pc, #164]	; (8000f50 <TIMER4_Void_PwmInit+0x18c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a28      	ldr	r2, [pc, #160]	; (8000f50 <TIMER4_Void_PwmInit+0x18c>)
 8000eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eb2:	6013      	str	r3, [r2, #0]
		/* To Enable Capture compare to channel 3 */
		SET_BIT(TIMER4_CCER,8);break;
 8000eb4:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <TIMER4_Void_PwmInit+0x188>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a24      	ldr	r2, [pc, #144]	; (8000f4c <TIMER4_Void_PwmInit+0x188>)
 8000eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ebe:	6013      	str	r3, [r2, #0]
 8000ec0:	e01f      	b.n	8000f02 <TIMER4_Void_PwmInit+0x13e>
	case TIMER4_CHANNEL4 :
		/* To Enable Preload register on CCR4 */
		SET_BIT(TIMER4_CCMR2,11);
 8000ec2:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <TIMER4_Void_PwmInit+0x18c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a22      	ldr	r2, [pc, #136]	; (8000f50 <TIMER4_Void_PwmInit+0x18c>)
 8000ec8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ecc:	6013      	str	r3, [r2, #0]
		/* To Select PWM MODE 2 */
		CLR_BIT(TIMER4_CCMR2,12);
 8000ece:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <TIMER4_Void_PwmInit+0x18c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a1f      	ldr	r2, [pc, #124]	; (8000f50 <TIMER4_Void_PwmInit+0x18c>)
 8000ed4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ed8:	6013      	str	r3, [r2, #0]
		SET_BIT(TIMER4_CCMR2,13);
 8000eda:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <TIMER4_Void_PwmInit+0x18c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a1c      	ldr	r2, [pc, #112]	; (8000f50 <TIMER4_Void_PwmInit+0x18c>)
 8000ee0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ee4:	6013      	str	r3, [r2, #0]
		SET_BIT(TIMER4_CCMR2,14);
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <TIMER4_Void_PwmInit+0x18c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a19      	ldr	r2, [pc, #100]	; (8000f50 <TIMER4_Void_PwmInit+0x18c>)
 8000eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef0:	6013      	str	r3, [r2, #0]
		/* To Enable Capture compare to channel 3 */
		SET_BIT(TIMER4_CCER,12);
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <TIMER4_Void_PwmInit+0x188>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a15      	ldr	r2, [pc, #84]	; (8000f4c <TIMER4_Void_PwmInit+0x188>)
 8000ef8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000efc:	6013      	str	r3, [r2, #0]
		break;
 8000efe:	e000      	b.n	8000f02 <TIMER4_Void_PwmInit+0x13e>
	default:
		break;
 8000f00:	bf00      	nop

//	TIMER4_CCR1=0;
//	TIMER4_CCR2=0;
//	TIMER4_CCR3=0;
//	TIMER4_CCR4=0;
	SET_BIT(TIMER4_CCMR2,10);
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <TIMER4_Void_PwmInit+0x18c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a12      	ldr	r2, [pc, #72]	; (8000f50 <TIMER4_Void_PwmInit+0x18c>)
 8000f08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f0c:	6013      	str	r3, [r2, #0]
	SET_BIT(TIMER4_CCMR2,2);
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <TIMER4_Void_PwmInit+0x18c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a0f      	ldr	r2, [pc, #60]	; (8000f50 <TIMER4_Void_PwmInit+0x18c>)
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	6013      	str	r3, [r2, #0]
	SET_BIT(TIMER4_CCMR2,3);
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <TIMER4_Void_PwmInit+0x18c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a0c      	ldr	r2, [pc, #48]	; (8000f50 <TIMER4_Void_PwmInit+0x18c>)
 8000f20:	f043 0308 	orr.w	r3, r3, #8
 8000f24:	6013      	str	r3, [r2, #0]
	// Enable Timer4 peripheral
	SET_BIT(TIMER4_CR1,0);
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <TIMER4_Void_PwmInit+0x17c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <TIMER4_Void_PwmInit+0x17c>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6013      	str	r3, [r2, #0]
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr
 8000f3c:	40000828 	.word	0x40000828
 8000f40:	40000800 	.word	0x40000800
 8000f44:	4000082c 	.word	0x4000082c
 8000f48:	40000818 	.word	0x40000818
 8000f4c:	40000820 	.word	0x40000820
 8000f50:	4000081c 	.word	0x4000081c

08000f54 <TIMER4_Void_PwmSetDutyCycle>:
void TIMER4_Void_PwmSetDutyCycle(u8 Copy_U8_Channel ,u32 Copy_U32_DutyCycle)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
	switch(Copy_U8_Channel)
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	2b03      	cmp	r3, #3
 8000f66:	d81b      	bhi.n	8000fa0 <TIMER4_Void_PwmSetDutyCycle+0x4c>
 8000f68:	a201      	add	r2, pc, #4	; (adr r2, 8000f70 <TIMER4_Void_PwmSetDutyCycle+0x1c>)
 8000f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f6e:	bf00      	nop
 8000f70:	08000f81 	.word	0x08000f81
 8000f74:	08000f89 	.word	0x08000f89
 8000f78:	08000f91 	.word	0x08000f91
 8000f7c:	08000f99 	.word	0x08000f99
	{
	case TIMER4_CHANNEL1 :  TIMER4_CCR1 = Copy_U32_DutyCycle;           break;
 8000f80:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <TIMER4_Void_PwmSetDutyCycle+0x58>)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	e00c      	b.n	8000fa2 <TIMER4_Void_PwmSetDutyCycle+0x4e>
	case TIMER4_CHANNEL2 :  TIMER4_CCR2 = Copy_U32_DutyCycle;           break;
 8000f88:	4a09      	ldr	r2, [pc, #36]	; (8000fb0 <TIMER4_Void_PwmSetDutyCycle+0x5c>)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	e008      	b.n	8000fa2 <TIMER4_Void_PwmSetDutyCycle+0x4e>
	case TIMER4_CHANNEL3 :  TIMER4_CCR3 = Copy_U32_DutyCycle;           break;
 8000f90:	4a08      	ldr	r2, [pc, #32]	; (8000fb4 <TIMER4_Void_PwmSetDutyCycle+0x60>)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	e004      	b.n	8000fa2 <TIMER4_Void_PwmSetDutyCycle+0x4e>
	case TIMER4_CHANNEL4 :  TIMER4_CCR4 = Copy_U32_DutyCycle;           break;
 8000f98:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <TIMER4_Void_PwmSetDutyCycle+0x64>)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	e000      	b.n	8000fa2 <TIMER4_Void_PwmSetDutyCycle+0x4e>
	default              :                                             break;
 8000fa0:	bf00      	nop
	}
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	40000834 	.word	0x40000834
 8000fb0:	40000838 	.word	0x40000838
 8000fb4:	4000083c 	.word	0x4000083c
 8000fb8:	40000840 	.word	0x40000840

08000fbc <MUSART_VidInit>:

#define THRESHOLD_VALUE  9000000UL

void (*MUSART1_CallBack)(void);

void MUSART_VidInit ( void ){
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0

	u32 LOC_u64Mantissa = ( F_CPU ) / ( 16 * USART1_BAUD_RATE ) ;
 8000fc2:	2334      	movs	r3, #52	; 0x34
 8000fc4:	607b      	str	r3, [r7, #4]

	u32 LOC_u64Fraction = ( ( ( F_CPU * 100 ) / ( 16 * USART1_BAUD_RATE )  ) % 100 ) * 16 ;
 8000fc6:	2380      	movs	r3, #128	; 0x80
 8000fc8:	603b      	str	r3, [r7, #0]

	if( LOC_u64Fraction > 1500 ){ LOC_u64Mantissa += 1 ; LOC_u64Fraction  = 0 ; }
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d904      	bls.n	8000fde <MUSART_VidInit+0x22>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	2300      	movs	r3, #0
 8000fdc:	603b      	str	r3, [r7, #0]

	#if USART1_STATUS == USART1_ENABLE

		MUSART1 -> SR = 0 ;
 8000fde:	4b27      	ldr	r3, [pc, #156]	; (800107c <MUSART_VidInit+0xc0>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]

		#if   USART1_WORD_LENGTH == _8BIT_WORD_LENGTH

					CLR_BIT( MUSART1 -> CR1 , 12 );
 8000fe4:	4b25      	ldr	r3, [pc, #148]	; (800107c <MUSART_VidInit+0xc0>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	4a24      	ldr	r2, [pc, #144]	; (800107c <MUSART_VidInit+0xc0>)
 8000fea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fee:	60d3      	str	r3, [r2, #12]

		#endif

		#if   USART1_PARITY == PARITY_DISABLE

					CLR_BIT( MUSART1 -> CR1 , 10 );
 8000ff0:	4b22      	ldr	r3, [pc, #136]	; (800107c <MUSART_VidInit+0xc0>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	4a21      	ldr	r2, [pc, #132]	; (800107c <MUSART_VidInit+0xc0>)
 8000ff6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ffa:	60d3      	str	r3, [r2, #12]

		#endif

		#if  USART1_INTERRUPT == INT_DISABLE

					CLR_BIT( MUSART1 -> CR1 , 5 );
 8000ffc:	4b1f      	ldr	r3, [pc, #124]	; (800107c <MUSART_VidInit+0xc0>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	4a1e      	ldr	r2, [pc, #120]	; (800107c <MUSART_VidInit+0xc0>)
 8001002:	f023 0320 	bic.w	r3, r3, #32
 8001006:	60d3      	str	r3, [r2, #12]
					CLR_BIT( MUSART1 -> CR1 , 6 );
 8001008:	4b1c      	ldr	r3, [pc, #112]	; (800107c <MUSART_VidInit+0xc0>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	4a1b      	ldr	r2, [pc, #108]	; (800107c <MUSART_VidInit+0xc0>)
 800100e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001012:	60d3      	str	r3, [r2, #12]
					CLR_BIT( MUSART1 -> CR1 , 7 );
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <MUSART_VidInit+0xc0>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	4a18      	ldr	r2, [pc, #96]	; (800107c <MUSART_VidInit+0xc0>)
 800101a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800101e:	60d3      	str	r3, [r2, #12]

		#endif

		#if   USART1_TRANSMITTER == TRANSMITTER_ENABLE

					SET_BIT( MUSART1 -> CR1 , 3 );
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <MUSART_VidInit+0xc0>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	4a15      	ldr	r2, [pc, #84]	; (800107c <MUSART_VidInit+0xc0>)
 8001026:	f043 0308 	orr.w	r3, r3, #8
 800102a:	60d3      	str	r3, [r2, #12]

		#endif

		#if   USART1_RECEIVER == RECEIVER_ENABLE

					SET_BIT( MUSART1 -> CR1 , 2 );
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <MUSART_VidInit+0xc0>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	4a12      	ldr	r2, [pc, #72]	; (800107c <MUSART_VidInit+0xc0>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	60d3      	str	r3, [r2, #12]

		#endif

		#if   USART1_STOP_BITS == ONE_STOP_BIT

					CLR_BIT( MUSART1 -> CR2 , 12 ); CLR_BIT( MUSART1 -> CR2 , 13 );
 8001038:	4b10      	ldr	r3, [pc, #64]	; (800107c <MUSART_VidInit+0xc0>)
 800103a:	691b      	ldr	r3, [r3, #16]
 800103c:	4a0f      	ldr	r2, [pc, #60]	; (800107c <MUSART_VidInit+0xc0>)
 800103e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001042:	6113      	str	r3, [r2, #16]
 8001044:	4b0d      	ldr	r3, [pc, #52]	; (800107c <MUSART_VidInit+0xc0>)
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	4a0c      	ldr	r2, [pc, #48]	; (800107c <MUSART_VidInit+0xc0>)
 800104a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800104e:	6113      	str	r3, [r2, #16]
					SET_BIT( MUSART1 -> CR2 , 12 ); SET_BIT( MUSART1 -> CR2 , 13 );


		#endif

		MUSART1 -> BRR = ( LOC_u64Mantissa << 4  ) | ( LOC_u64Fraction / 100 ) ;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	011a      	lsls	r2, r3, #4
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	490a      	ldr	r1, [pc, #40]	; (8001080 <MUSART_VidInit+0xc4>)
 8001058:	fba1 1303 	umull	r1, r3, r1, r3
 800105c:	095b      	lsrs	r3, r3, #5
 800105e:	4907      	ldr	r1, [pc, #28]	; (800107c <MUSART_VidInit+0xc0>)
 8001060:	4313      	orrs	r3, r2
 8001062:	608b      	str	r3, [r1, #8]
		SET_BIT( MUSART1 -> CR1 , 13 );
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <MUSART_VidInit+0xc0>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <MUSART_VidInit+0xc0>)
 800106a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800106e:	60d3      	str	r3, [r2, #12]
	#elif USART1_STATUS == USART1_DISABLE
		CLR_BIT( MUSART1 -> CR1 , 0 );

	#endif

}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40013800 	.word	0x40013800
 8001080:	51eb851f 	.word	0x51eb851f

08001084 <USART1_IRQHandler>:

	MUSART1_CallBack = ptr ;

}

void USART1_IRQHandler(void){
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0

	MUSART1 -> SR = 0 ;
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <USART1_IRQHandler+0x14>)
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
	MUSART1_CallBack();
 800108e:	4b03      	ldr	r3, [pc, #12]	; (800109c <USART1_IRQHandler+0x18>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4798      	blx	r3

}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40013800 	.word	0x40013800
 800109c:	2000002c 	.word	0x2000002c

080010a0 <TIM2>:

u8 Received_distanceOne=0,Received_distanceTwo=0;
u8 Received_distanceThree=0,Received_distanceFour=0, Received_distanceFive = 0;

void TIM2(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	Is_First_Captured2++;
 80010a4:	4b36      	ldr	r3, [pc, #216]	; (8001180 <TIM2+0xe0>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	3301      	adds	r3, #1
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4b34      	ldr	r3, [pc, #208]	; (8001180 <TIM2+0xe0>)
 80010b0:	701a      	strb	r2, [r3, #0]
	Is_First_Captured1++;
 80010b2:	4b34      	ldr	r3, [pc, #208]	; (8001184 <TIM2+0xe4>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	3301      	adds	r3, #1
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	4b31      	ldr	r3, [pc, #196]	; (8001184 <TIM2+0xe4>)
 80010be:	701a      	strb	r2, [r3, #0]
	if(GET_BIT(TIMER2_SR,1)==1)
 80010c0:	4b31      	ldr	r3, [pc, #196]	; (8001188 <TIM2+0xe8>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	085b      	lsrs	r3, r3, #1
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d127      	bne.n	800111e <TIM2+0x7e>
	{
		SET_BIT(TIMER2_SR,1);
 80010ce:	4b2e      	ldr	r3, [pc, #184]	; (8001188 <TIM2+0xe8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a2d      	ldr	r2, [pc, #180]	; (8001188 <TIM2+0xe8>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	6013      	str	r3, [r2, #0]
		if(Is_First_Captured1==1)
 80010da:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <TIM2+0xe4>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d10a      	bne.n	80010fa <TIM2+0x5a>
		{

			IC1_Val1=Timer2_VoidGetCapturedValue(Channle1);
 80010e4:	2000      	movs	r0, #0
 80010e6:	f7ff fc45 	bl	8000974 <Timer2_VoidGetCapturedValue>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a27      	ldr	r2, [pc, #156]	; (800118c <TIM2+0xec>)
 80010ee:	6013      	str	r3, [r2, #0]
			//Is_First_Captured = 1;  // set the first captured as true
			// Now change the polarity to falling edge

			Timer2_VoidChangePolarityOnEachChannle(Channle1,TIMER2_FALLING_EDGE);
 80010f0:	2101      	movs	r1, #1
 80010f2:	2000      	movs	r0, #0
 80010f4:	f7ff fbfe 	bl	80008f4 <Timer2_VoidChangePolarityOnEachChannle>
 80010f8:	e011      	b.n	800111e <TIM2+0x7e>
		}
		else if (Is_First_Captured1==2)   // if the first is already captured
 80010fa:	4b22      	ldr	r3, [pc, #136]	; (8001184 <TIM2+0xe4>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d10c      	bne.n	800111e <TIM2+0x7e>
		{
			IC1_Val2 = Timer2_VoidGetCapturedValue(Channle1) ; // read second value
 8001104:	2000      	movs	r0, #0
 8001106:	f7ff fc35 	bl	8000974 <Timer2_VoidGetCapturedValue>
 800110a:	4603      	mov	r3, r0
 800110c:	4a20      	ldr	r2, [pc, #128]	; (8001190 <TIM2+0xf0>)
 800110e:	6013      	str	r3, [r2, #0]

			// Now change the polarity to rising edge

			Timer2_VoidChangePolarityOnEachChannle(Channle1,TIMER2_RISING_EDGE);
 8001110:	2100      	movs	r1, #0
 8001112:	2000      	movs	r0, #0
 8001114:	f7ff fbee 	bl	80008f4 <Timer2_VoidChangePolarityOnEachChannle>
			// disable capture interrupt on each channel
			Timer2_VoidDisableIntOnEachChannle(Channle1);
 8001118:	2000      	movs	r0, #0
 800111a:	f7ff fbcb 	bl	80008b4 <Timer2_VoidDisableIntOnEachChannle>
		}
	}
	if(GET_BIT(TIMER2_SR,2)==1)
 800111e:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <TIM2+0xe8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	089b      	lsrs	r3, r3, #2
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	2b01      	cmp	r3, #1
 800112a:	d127      	bne.n	800117c <TIM2+0xdc>
	{

		SET_BIT(TIMER2_SR,2);
 800112c:	4b16      	ldr	r3, [pc, #88]	; (8001188 <TIM2+0xe8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a15      	ldr	r2, [pc, #84]	; (8001188 <TIM2+0xe8>)
 8001132:	f043 0304 	orr.w	r3, r3, #4
 8001136:	6013      	str	r3, [r2, #0]

		if(Is_First_Captured2==1)
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <TIM2+0xe0>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b01      	cmp	r3, #1
 8001140:	d10a      	bne.n	8001158 <TIM2+0xb8>
		{

			IC2_Val1=Timer2_VoidGetCapturedValue(Channle2);
 8001142:	2001      	movs	r0, #1
 8001144:	f7ff fc16 	bl	8000974 <Timer2_VoidGetCapturedValue>
 8001148:	4603      	mov	r3, r0
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <TIM2+0xf4>)
 800114c:	6013      	str	r3, [r2, #0]
			//Is_First_Captured = 1;  // set the first captured as true
			// Now change the polarity to falling edge

			Timer2_VoidChangePolarityOnEachChannle(Channle2,TIMER2_FALLING_EDGE);
 800114e:	2101      	movs	r1, #1
 8001150:	2001      	movs	r0, #1
 8001152:	f7ff fbcf 	bl	80008f4 <Timer2_VoidChangePolarityOnEachChannle>
			Timer2_VoidChangePolarityOnEachChannle(Channle2,TIMER2_RISING_EDGE);
			// disable capture interrupt on each channel
			Timer2_VoidDisableIntOnEachChannle(Channle2);
		}
	}
}
 8001156:	e011      	b.n	800117c <TIM2+0xdc>
		else if (Is_First_Captured2==2)   // if the first is already captured
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <TIM2+0xe0>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d10c      	bne.n	800117c <TIM2+0xdc>
			IC2_Val2 = Timer2_VoidGetCapturedValue(Channle2) ; // read second value
 8001162:	2001      	movs	r0, #1
 8001164:	f7ff fc06 	bl	8000974 <Timer2_VoidGetCapturedValue>
 8001168:	4603      	mov	r3, r0
 800116a:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <TIM2+0xf8>)
 800116c:	6013      	str	r3, [r2, #0]
			Timer2_VoidChangePolarityOnEachChannle(Channle2,TIMER2_RISING_EDGE);
 800116e:	2100      	movs	r1, #0
 8001170:	2001      	movs	r0, #1
 8001172:	f7ff fbbf 	bl	80008f4 <Timer2_VoidChangePolarityOnEachChannle>
			Timer2_VoidDisableIntOnEachChannle(Channle2);
 8001176:	2001      	movs	r0, #1
 8001178:	f7ff fb9c 	bl	80008b4 <Timer2_VoidDisableIntOnEachChannle>
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	2000004c 	.word	0x2000004c
 8001184:	2000003c 	.word	0x2000003c
 8001188:	40000010 	.word	0x40000010
 800118c:	20000030 	.word	0x20000030
 8001190:	20000034 	.word	0x20000034
 8001194:	20000040 	.word	0x20000040
 8001198:	20000044 	.word	0x20000044

0800119c <TIM3>:


void TIM3(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	Is_First_Captured3++;
 80011a0:	4b69      	ldr	r3, [pc, #420]	; (8001348 <TIM3+0x1ac>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	3301      	adds	r3, #1
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4b67      	ldr	r3, [pc, #412]	; (8001348 <TIM3+0x1ac>)
 80011ac:	701a      	strb	r2, [r3, #0]
	Is_First_Captured4++;
 80011ae:	4b67      	ldr	r3, [pc, #412]	; (800134c <TIM3+0x1b0>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	3301      	adds	r3, #1
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	4b64      	ldr	r3, [pc, #400]	; (800134c <TIM3+0x1b0>)
 80011ba:	701a      	strb	r2, [r3, #0]
	Is_First_Captured5++;
 80011bc:	4b64      	ldr	r3, [pc, #400]	; (8001350 <TIM3+0x1b4>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	3301      	adds	r3, #1
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b62      	ldr	r3, [pc, #392]	; (8001350 <TIM3+0x1b4>)
 80011c8:	701a      	strb	r2, [r3, #0]
	if(GET_BIT(TIMER3_SR,1)==1)
 80011ca:	4b62      	ldr	r3, [pc, #392]	; (8001354 <TIM3+0x1b8>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	085b      	lsrs	r3, r3, #1
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d127      	bne.n	8001228 <TIM3+0x8c>
	{

		SET_BIT(TIMER3_SR,1);
 80011d8:	4b5e      	ldr	r3, [pc, #376]	; (8001354 <TIM3+0x1b8>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a5d      	ldr	r2, [pc, #372]	; (8001354 <TIM3+0x1b8>)
 80011de:	f043 0302 	orr.w	r3, r3, #2
 80011e2:	6013      	str	r3, [r2, #0]

		if(Is_First_Captured3==1)
 80011e4:	4b58      	ldr	r3, [pc, #352]	; (8001348 <TIM3+0x1ac>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d10a      	bne.n	8001204 <TIM3+0x68>
		{

			IC3_Val1=Timer3_VoidGetCapturedValue(Channle1);
 80011ee:	2000      	movs	r0, #0
 80011f0:	f7ff fda4 	bl	8000d3c <Timer3_VoidGetCapturedValue>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a58      	ldr	r2, [pc, #352]	; (8001358 <TIM3+0x1bc>)
 80011f8:	6013      	str	r3, [r2, #0]
			//Is_First_Captured = 1;  // set the first captured as true
			// Now change the polarity to falling edge
			Timer3_VoidChangePolarityOnEachChannle(Channle1,TIMER3_FALLING_EDGE);
 80011fa:	2101      	movs	r1, #1
 80011fc:	2000      	movs	r0, #0
 80011fe:	f7ff fd2d 	bl	8000c5c <Timer3_VoidChangePolarityOnEachChannle>
 8001202:	e011      	b.n	8001228 <TIM3+0x8c>
		}
		else if (Is_First_Captured3==2)   // if the first is already captured
 8001204:	4b50      	ldr	r3, [pc, #320]	; (8001348 <TIM3+0x1ac>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d10c      	bne.n	8001228 <TIM3+0x8c>
		{
			IC3_Val2 = Timer3_VoidGetCapturedValue(Channle1) ; // read second value
 800120e:	2000      	movs	r0, #0
 8001210:	f7ff fd94 	bl	8000d3c <Timer3_VoidGetCapturedValue>
 8001214:	4603      	mov	r3, r0
 8001216:	4a51      	ldr	r2, [pc, #324]	; (800135c <TIM3+0x1c0>)
 8001218:	6013      	str	r3, [r2, #0]

			// Now change the polarity to rising edge

			Timer3_VoidChangePolarityOnEachChannle(Channle1,TIMER3_RISING_EDGE);
 800121a:	2100      	movs	r1, #0
 800121c:	2000      	movs	r0, #0
 800121e:	f7ff fd1d 	bl	8000c5c <Timer3_VoidChangePolarityOnEachChannle>
			// disable capture interrupt on each channel
			Timer3_VoidDisableIntOnEachChannle(Channle1);
 8001222:	2000      	movs	r0, #0
 8001224:	f7ff fce2 	bl	8000bec <Timer3_VoidDisableIntOnEachChannle>


		}
	}
	if(GET_BIT(TIMER3_SR,2)==1)
 8001228:	4b4a      	ldr	r3, [pc, #296]	; (8001354 <TIM3+0x1b8>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	089b      	lsrs	r3, r3, #2
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b01      	cmp	r3, #1
 8001234:	d127      	bne.n	8001286 <TIM3+0xea>
	{

		SET_BIT(TIMER3_SR,2);
 8001236:	4b47      	ldr	r3, [pc, #284]	; (8001354 <TIM3+0x1b8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a46      	ldr	r2, [pc, #280]	; (8001354 <TIM3+0x1b8>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	6013      	str	r3, [r2, #0]

		if(Is_First_Captured4==1)
 8001242:	4b42      	ldr	r3, [pc, #264]	; (800134c <TIM3+0x1b0>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b01      	cmp	r3, #1
 800124a:	d10a      	bne.n	8001262 <TIM3+0xc6>
		{

			IC4_Val1=Timer3_VoidGetCapturedValue(Channle2);
 800124c:	2001      	movs	r0, #1
 800124e:	f7ff fd75 	bl	8000d3c <Timer3_VoidGetCapturedValue>
 8001252:	4603      	mov	r3, r0
 8001254:	4a42      	ldr	r2, [pc, #264]	; (8001360 <TIM3+0x1c4>)
 8001256:	6013      	str	r3, [r2, #0]
			//Is_First_Captured = 1;  // set the first captured as true
			// Now change the polarity to falling edge

			Timer3_VoidChangePolarityOnEachChannle(Channle2,TIMER3_FALLING_EDGE);
 8001258:	2101      	movs	r1, #1
 800125a:	2001      	movs	r0, #1
 800125c:	f7ff fcfe 	bl	8000c5c <Timer3_VoidChangePolarityOnEachChannle>
 8001260:	e011      	b.n	8001286 <TIM3+0xea>
		}
		else if (Is_First_Captured4==2)   // if the first is already captured
 8001262:	4b3a      	ldr	r3, [pc, #232]	; (800134c <TIM3+0x1b0>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d10c      	bne.n	8001286 <TIM3+0xea>
		{
			IC4_Val2 = Timer3_VoidGetCapturedValue(Channle2) ; // read second value
 800126c:	2001      	movs	r0, #1
 800126e:	f7ff fd65 	bl	8000d3c <Timer3_VoidGetCapturedValue>
 8001272:	4603      	mov	r3, r0
 8001274:	4a3b      	ldr	r2, [pc, #236]	; (8001364 <TIM3+0x1c8>)
 8001276:	6013      	str	r3, [r2, #0]

			// Now change the polarity to rising edge

			Timer3_VoidChangePolarityOnEachChannle(Channle2,TIMER3_RISING_EDGE);
 8001278:	2100      	movs	r1, #0
 800127a:	2001      	movs	r0, #1
 800127c:	f7ff fcee 	bl	8000c5c <Timer3_VoidChangePolarityOnEachChannle>
			// disable capture interrupt on each channel
			Timer3_VoidDisableIntOnEachChannle(Channle2);
 8001280:	2001      	movs	r0, #1
 8001282:	f7ff fcb3 	bl	8000bec <Timer3_VoidDisableIntOnEachChannle>
		}
	}
	if(GET_BIT(TIMER3_SR,3)==1)
 8001286:	4b33      	ldr	r3, [pc, #204]	; (8001354 <TIM3+0x1b8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	08db      	lsrs	r3, r3, #3
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	2b01      	cmp	r3, #1
 8001292:	d127      	bne.n	80012e4 <TIM3+0x148>
	{
		SET_BIT(TIMER3_SR,3);
 8001294:	4b2f      	ldr	r3, [pc, #188]	; (8001354 <TIM3+0x1b8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a2e      	ldr	r2, [pc, #184]	; (8001354 <TIM3+0x1b8>)
 800129a:	f043 0308 	orr.w	r3, r3, #8
 800129e:	6013      	str	r3, [r2, #0]

		if(Is_First_Captured5==1)
 80012a0:	4b2b      	ldr	r3, [pc, #172]	; (8001350 <TIM3+0x1b4>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d10a      	bne.n	80012c0 <TIM3+0x124>
		{

			IC5_Val1=Timer3_VoidGetCapturedValue(Channle3);
 80012aa:	2002      	movs	r0, #2
 80012ac:	f7ff fd46 	bl	8000d3c <Timer3_VoidGetCapturedValue>
 80012b0:	4603      	mov	r3, r0
 80012b2:	4a2d      	ldr	r2, [pc, #180]	; (8001368 <TIM3+0x1cc>)
 80012b4:	6013      	str	r3, [r2, #0]
			//Is_First_Captured = 1;  // set the first captured as true
			// Now change the polarity to falling edge

			Timer3_VoidChangePolarityOnEachChannle(Channle3,TIMER3_FALLING_EDGE);
 80012b6:	2101      	movs	r1, #1
 80012b8:	2002      	movs	r0, #2
 80012ba:	f7ff fccf 	bl	8000c5c <Timer3_VoidChangePolarityOnEachChannle>
 80012be:	e011      	b.n	80012e4 <TIM3+0x148>
		}
		else if (Is_First_Captured5==2)   // if the first is already captured
 80012c0:	4b23      	ldr	r3, [pc, #140]	; (8001350 <TIM3+0x1b4>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d10c      	bne.n	80012e4 <TIM3+0x148>
		{
			IC5_Val2 = Timer3_VoidGetCapturedValue(Channle3) ; // read second value
 80012ca:	2002      	movs	r0, #2
 80012cc:	f7ff fd36 	bl	8000d3c <Timer3_VoidGetCapturedValue>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4a26      	ldr	r2, [pc, #152]	; (800136c <TIM3+0x1d0>)
 80012d4:	6013      	str	r3, [r2, #0]

			// Now change the polarity to rising edge

			Timer3_VoidChangePolarityOnEachChannle(Channle3,TIMER3_RISING_EDGE);
 80012d6:	2100      	movs	r1, #0
 80012d8:	2002      	movs	r0, #2
 80012da:	f7ff fcbf 	bl	8000c5c <Timer3_VoidChangePolarityOnEachChannle>
			// disable capture interrupt on each channel
			Timer3_VoidDisableIntOnEachChannle(Channle3);
 80012de:	2002      	movs	r0, #2
 80012e0:	f7ff fc84 	bl	8000bec <Timer3_VoidDisableIntOnEachChannle>
		}
	}
	if(GET_BIT(TIMER3_SR,4)==1)
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <TIM3+0x1b8>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	091b      	lsrs	r3, r3, #4
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d127      	bne.n	8001342 <TIM3+0x1a6>
	{
		SET_BIT(TIMER3_SR,4);
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <TIM3+0x1b8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a17      	ldr	r2, [pc, #92]	; (8001354 <TIM3+0x1b8>)
 80012f8:	f043 0310 	orr.w	r3, r3, #16
 80012fc:	6013      	str	r3, [r2, #0]

		if(Is_First_Captured5==1)
 80012fe:	4b14      	ldr	r3, [pc, #80]	; (8001350 <TIM3+0x1b4>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b01      	cmp	r3, #1
 8001306:	d10a      	bne.n	800131e <TIM3+0x182>
		{

			IC5_Val1=Timer3_VoidGetCapturedValue(Channle4);
 8001308:	2003      	movs	r0, #3
 800130a:	f7ff fd17 	bl	8000d3c <Timer3_VoidGetCapturedValue>
 800130e:	4603      	mov	r3, r0
 8001310:	4a15      	ldr	r2, [pc, #84]	; (8001368 <TIM3+0x1cc>)
 8001312:	6013      	str	r3, [r2, #0]
			//Is_First_Captured = 1;  // set the first captured as true
			// Now change the polarity to falling edge

			Timer3_VoidChangePolarityOnEachChannle(Channle4,TIMER3_FALLING_EDGE);
 8001314:	2101      	movs	r1, #1
 8001316:	2003      	movs	r0, #3
 8001318:	f7ff fca0 	bl	8000c5c <Timer3_VoidChangePolarityOnEachChannle>
			Timer3_VoidChangePolarityOnEachChannle(Channle4,TIMER3_RISING_EDGE);
			// disable capture interrupt on each channel
			Timer3_VoidDisableIntOnEachChannle(Channle4);
		}
	}
}
 800131c:	e011      	b.n	8001342 <TIM3+0x1a6>
		else if (Is_First_Captured5==2)   // if the first is already captured
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <TIM3+0x1b4>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d10c      	bne.n	8001342 <TIM3+0x1a6>
			IC5_Val2 = Timer3_VoidGetCapturedValue(Channle4) ; // read second value
 8001328:	2003      	movs	r0, #3
 800132a:	f7ff fd07 	bl	8000d3c <Timer3_VoidGetCapturedValue>
 800132e:	4603      	mov	r3, r0
 8001330:	4a0e      	ldr	r2, [pc, #56]	; (800136c <TIM3+0x1d0>)
 8001332:	6013      	str	r3, [r2, #0]
			Timer3_VoidChangePolarityOnEachChannle(Channle4,TIMER3_RISING_EDGE);
 8001334:	2100      	movs	r1, #0
 8001336:	2003      	movs	r0, #3
 8001338:	f7ff fc90 	bl	8000c5c <Timer3_VoidChangePolarityOnEachChannle>
			Timer3_VoidDisableIntOnEachChannle(Channle4);
 800133c:	2003      	movs	r0, #3
 800133e:	f7ff fc55 	bl	8000bec <Timer3_VoidDisableIntOnEachChannle>
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2000005c 	.word	0x2000005c
 800134c:	20000068 	.word	0x20000068
 8001350:	20000078 	.word	0x20000078
 8001354:	40000410 	.word	0x40000410
 8001358:	20000050 	.word	0x20000050
 800135c:	20000054 	.word	0x20000054
 8001360:	20000060 	.word	0x20000060
 8001364:	20000064 	.word	0x20000064
 8001368:	2000006c 	.word	0x2000006c
 800136c:	20000070 	.word	0x20000070

08001370 <Ultrasonic_TrigOne>:



void Ultrasonic_TrigOne (void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	MGPIO_VidSetPinValue(GPIOB, PIN5, HIGH);  // pull the TRIG pin HIGH
 8001374:	2201      	movs	r2, #1
 8001376:	2105      	movs	r1, #5
 8001378:	2001      	movs	r0, #1
 800137a:	f7fe ffff 	bl	800037c <MGPIO_VidSetPinValue>
	_delay_us(10);  // wait for 10 us
 800137e:	200a      	movs	r0, #10
 8001380:	f7fe ff12 	bl	80001a8 <_delay_us>
	MGPIO_VidSetPinValue(GPIOB, PIN5, LOW);  // pull the TRIG pin low
 8001384:	2200      	movs	r2, #0
 8001386:	2105      	movs	r1, #5
 8001388:	2001      	movs	r0, #1
 800138a:	f7fe fff7 	bl	800037c <MGPIO_VidSetPinValue>
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}

08001392 <Ultrasonic_TrigTwo>:
void Ultrasonic_TrigTwo (void)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	af00      	add	r7, sp, #0
	MGPIO_VidSetPinValue(GPIOA, PIN2, HIGH);  // pull the TRIG pin HIGH
 8001396:	2201      	movs	r2, #1
 8001398:	2102      	movs	r1, #2
 800139a:	2000      	movs	r0, #0
 800139c:	f7fe ffee 	bl	800037c <MGPIO_VidSetPinValue>
	_delay_us(10);  // wait for 10 us
 80013a0:	200a      	movs	r0, #10
 80013a2:	f7fe ff01 	bl	80001a8 <_delay_us>
	MGPIO_VidSetPinValue(GPIOA, PIN2, LOW);  // pull the TRIG pin low
 80013a6:	2200      	movs	r2, #0
 80013a8:	2102      	movs	r1, #2
 80013aa:	2000      	movs	r0, #0
 80013ac:	f7fe ffe6 	bl	800037c <MGPIO_VidSetPinValue>
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <Ultrasonic_TrigThree>:
void Ultrasonic_TrigThree (void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
	MGPIO_VidSetPinValue(GPIOB, PIN0, HIGH);  // pull the TRIG pin HIGH
 80013b8:	2201      	movs	r2, #1
 80013ba:	2100      	movs	r1, #0
 80013bc:	2001      	movs	r0, #1
 80013be:	f7fe ffdd 	bl	800037c <MGPIO_VidSetPinValue>
	_delay_us(10);  // wait for 10 us
 80013c2:	200a      	movs	r0, #10
 80013c4:	f7fe fef0 	bl	80001a8 <_delay_us>
	MGPIO_VidSetPinValue(GPIOB, PIN0, LOW);  // pull the TRIG pin low
 80013c8:	2200      	movs	r2, #0
 80013ca:	2100      	movs	r1, #0
 80013cc:	2001      	movs	r0, #1
 80013ce:	f7fe ffd5 	bl	800037c <MGPIO_VidSetPinValue>
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <Ultrasonic_TrigFive>:
	MGPIO_VidSetPinValue(GPIOB, PIN10, HIGH);  // pull the TRIG pin HIGH
	_delay_us(10);  // wait for 10 us
	MGPIO_VidSetPinValue(GPIOB, PIN10, LOW);  // pull the TRIG pin low
}
void Ultrasonic_TrigFive (void)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	af00      	add	r7, sp, #0
	MGPIO_VidSetPinValue(GPIOA, PIN3, HIGH);  // pull the TRIG pin HIGH
 80013da:	2201      	movs	r2, #1
 80013dc:	2103      	movs	r1, #3
 80013de:	2000      	movs	r0, #0
 80013e0:	f7fe ffcc 	bl	800037c <MGPIO_VidSetPinValue>
	_delay_us(10);  // wait for 10 us
 80013e4:	200a      	movs	r0, #10
 80013e6:	f7fe fedf 	bl	80001a8 <_delay_us>
	MGPIO_VidSetPinValue(GPIOA, PIN3, LOW);  // pull the TRIG pin low
 80013ea:	2200      	movs	r2, #0
 80013ec:	2103      	movs	r1, #3
 80013ee:	2000      	movs	r0, #0
 80013f0:	f7fe ffc4 	bl	800037c <MGPIO_VidSetPinValue>
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <Ultrasonic_ReadOne>:
u8 Ultrasonic_ReadOne (void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	Timer2_VoidSetPreload(0);
 80013fc:	2000      	movs	r0, #0
 80013fe:	f7ff fa29 	bl	8000854 <Timer2_VoidSetPreload>
	Ultrasonic_TrigOne();
 8001402:	f7ff ffb5 	bl	8001370 <Ultrasonic_TrigOne>
	while(Is_First_Captured1<2);
 8001406:	bf00      	nop
 8001408:	4b10      	ldr	r3, [pc, #64]	; (800144c <Ultrasonic_ReadOne+0x54>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b01      	cmp	r3, #1
 8001410:	d9fa      	bls.n	8001408 <Ultrasonic_ReadOne+0x10>
	Difference1 = IC1_Val2-IC1_Val1;
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <Ultrasonic_ReadOne+0x58>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <Ultrasonic_ReadOne+0x5c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <Ultrasonic_ReadOne+0x60>)
 800141e:	6013      	str	r3, [r2, #0]
	Distance1 = (Difference1 /58);
 8001420:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <Ultrasonic_ReadOne+0x60>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0d      	ldr	r2, [pc, #52]	; (800145c <Ultrasonic_ReadOne+0x64>)
 8001426:	fba2 2303 	umull	r2, r3, r2, r3
 800142a:	095b      	lsrs	r3, r3, #5
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <Ultrasonic_ReadOne+0x68>)
 8001430:	701a      	strb	r2, [r3, #0]
	Is_First_Captured1=0;
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <Ultrasonic_ReadOne+0x54>)
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]
	Timer2_VoidEnableIntOnEachChannle(Channle1);
 8001438:	2000      	movs	r0, #0
 800143a:	f7ff fa1b 	bl	8000874 <Timer2_VoidEnableIntOnEachChannle>
	return Distance1+1;
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <Ultrasonic_ReadOne+0x68>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	3301      	adds	r3, #1
 8001446:	b2db      	uxtb	r3, r3

}
 8001448:	4618      	mov	r0, r3
 800144a:	bd80      	pop	{r7, pc}
 800144c:	2000003c 	.word	0x2000003c
 8001450:	20000034 	.word	0x20000034
 8001454:	20000030 	.word	0x20000030
 8001458:	20000038 	.word	0x20000038
 800145c:	8d3dcb09 	.word	0x8d3dcb09
 8001460:	2000003d 	.word	0x2000003d

08001464 <Ultrasonic_ReadTwo>:
u8 Ultrasonic_ReadTwo (void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	Timer2_VoidSetPreload(0);
 8001468:	2000      	movs	r0, #0
 800146a:	f7ff f9f3 	bl	8000854 <Timer2_VoidSetPreload>
	Ultrasonic_TrigTwo();
 800146e:	f7ff ff90 	bl	8001392 <Ultrasonic_TrigTwo>
	while(Is_First_Captured2<2);
 8001472:	bf00      	nop
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <Ultrasonic_ReadTwo+0x50>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b01      	cmp	r3, #1
 800147c:	d9fa      	bls.n	8001474 <Ultrasonic_ReadTwo+0x10>
	Difference2 = IC2_Val2-IC2_Val1;
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <Ultrasonic_ReadTwo+0x54>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <Ultrasonic_ReadTwo+0x58>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	4a0d      	ldr	r2, [pc, #52]	; (80014c0 <Ultrasonic_ReadTwo+0x5c>)
 800148a:	6013      	str	r3, [r2, #0]
	Distance2 = (Difference2 /58);
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <Ultrasonic_ReadTwo+0x5c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0c      	ldr	r2, [pc, #48]	; (80014c4 <Ultrasonic_ReadTwo+0x60>)
 8001492:	fba2 2303 	umull	r2, r3, r2, r3
 8001496:	095b      	lsrs	r3, r3, #5
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <Ultrasonic_ReadTwo+0x64>)
 800149c:	701a      	strb	r2, [r3, #0]
	Is_First_Captured2=0;
 800149e:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <Ultrasonic_ReadTwo+0x50>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
	Timer2_VoidEnableIntOnEachChannle(Channle2);
 80014a4:	2001      	movs	r0, #1
 80014a6:	f7ff f9e5 	bl	8000874 <Timer2_VoidEnableIntOnEachChannle>
	return Distance2;
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <Ultrasonic_ReadTwo+0x64>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	b2db      	uxtb	r3, r3
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	2000004c 	.word	0x2000004c
 80014b8:	20000044 	.word	0x20000044
 80014bc:	20000040 	.word	0x20000040
 80014c0:	20000048 	.word	0x20000048
 80014c4:	8d3dcb09 	.word	0x8d3dcb09
 80014c8:	2000004d 	.word	0x2000004d

080014cc <Ultrasonic_ReadThree>:

u8 Ultrasonic_ReadThree (void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
	Timer3_VoidSetPreload(0);
 80014d0:	2000      	movs	r0, #0
 80014d2:	f7ff fb43 	bl	8000b5c <Timer3_VoidSetPreload>
	Ultrasonic_TrigThree();
 80014d6:	f7ff ff6d 	bl	80013b4 <Ultrasonic_TrigThree>
	while(Is_First_Captured3<2);
 80014da:	bf00      	nop
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <Ultrasonic_ReadThree+0x50>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d9fa      	bls.n	80014dc <Ultrasonic_ReadThree+0x10>
	Difference3 = IC3_Val2-IC3_Val1;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <Ultrasonic_ReadThree+0x54>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <Ultrasonic_ReadThree+0x58>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	4a0d      	ldr	r2, [pc, #52]	; (8001528 <Ultrasonic_ReadThree+0x5c>)
 80014f2:	6013      	str	r3, [r2, #0]
	Distance3 = (Difference3 /58);
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <Ultrasonic_ReadThree+0x5c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a0c      	ldr	r2, [pc, #48]	; (800152c <Ultrasonic_ReadThree+0x60>)
 80014fa:	fba2 2303 	umull	r2, r3, r2, r3
 80014fe:	095b      	lsrs	r3, r3, #5
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <Ultrasonic_ReadThree+0x64>)
 8001504:	701a      	strb	r2, [r3, #0]
	Is_First_Captured3=0;
 8001506:	4b05      	ldr	r3, [pc, #20]	; (800151c <Ultrasonic_ReadThree+0x50>)
 8001508:	2200      	movs	r2, #0
 800150a:	701a      	strb	r2, [r3, #0]
	Timer3_VoidEnableIntOnEachChannle(Channle1);
 800150c:	2000      	movs	r0, #0
 800150e:	f7ff fb35 	bl	8000b7c <Timer3_VoidEnableIntOnEachChannle>
	return Distance3;
 8001512:	4b07      	ldr	r3, [pc, #28]	; (8001530 <Ultrasonic_ReadThree+0x64>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b2db      	uxtb	r3, r3
}
 8001518:	4618      	mov	r0, r3
 800151a:	bd80      	pop	{r7, pc}
 800151c:	2000005c 	.word	0x2000005c
 8001520:	20000054 	.word	0x20000054
 8001524:	20000050 	.word	0x20000050
 8001528:	20000058 	.word	0x20000058
 800152c:	8d3dcb09 	.word	0x8d3dcb09
 8001530:	2000005d 	.word	0x2000005d

08001534 <Ultrasonic_ReadFive>:
	Timer3_VoidEnableIntOnEachChannle(Channle2);
	return Distance4;
}

u8 Ultrasonic_ReadFive (void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
	Timer3_VoidSetPreload(0);
 8001538:	2000      	movs	r0, #0
 800153a:	f7ff fb0f 	bl	8000b5c <Timer3_VoidSetPreload>
	Ultrasonic_TrigFive();
 800153e:	f7ff ff4a 	bl	80013d6 <Ultrasonic_TrigFive>
	while(Is_First_Captured5<2);
 8001542:	bf00      	nop
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <Ultrasonic_ReadFive+0x50>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b01      	cmp	r3, #1
 800154c:	d9fa      	bls.n	8001544 <Ultrasonic_ReadFive+0x10>
	Difference5 = IC5_Val2-IC5_Val1;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <Ultrasonic_ReadFive+0x54>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <Ultrasonic_ReadFive+0x58>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	4a0d      	ldr	r2, [pc, #52]	; (8001590 <Ultrasonic_ReadFive+0x5c>)
 800155a:	6013      	str	r3, [r2, #0]
	Distance5 = (Difference5 /58);
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <Ultrasonic_ReadFive+0x5c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0c      	ldr	r2, [pc, #48]	; (8001594 <Ultrasonic_ReadFive+0x60>)
 8001562:	fba2 2303 	umull	r2, r3, r2, r3
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <Ultrasonic_ReadFive+0x64>)
 800156c:	701a      	strb	r2, [r3, #0]
	Is_First_Captured5=0;
 800156e:	4b05      	ldr	r3, [pc, #20]	; (8001584 <Ultrasonic_ReadFive+0x50>)
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
	Timer3_VoidEnableIntOnEachChannle(Channle4);
 8001574:	2003      	movs	r0, #3
 8001576:	f7ff fb01 	bl	8000b7c <Timer3_VoidEnableIntOnEachChannle>
	return Distance5;
 800157a:	4b07      	ldr	r3, [pc, #28]	; (8001598 <Ultrasonic_ReadFive+0x64>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	b2db      	uxtb	r3, r3
}
 8001580:	4618      	mov	r0, r3
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000078 	.word	0x20000078
 8001588:	20000070 	.word	0x20000070
 800158c:	2000006c 	.word	0x2000006c
 8001590:	20000074 	.word	0x20000074
 8001594:	8d3dcb09 	.word	0x8d3dcb09
 8001598:	20000079 	.word	0x20000079

0800159c <APP_voidCollisionAvoidance>:
}



void APP_voidCollisionAvoidance(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
	/* Reads the Distances for the responsible sensors */
	Received_distanceOne = Ultrasonic_ReadOne();
 80015a0:	f7ff ff2a 	bl	80013f8 <Ultrasonic_ReadOne>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b50      	ldr	r3, [pc, #320]	; (80016ec <APP_voidCollisionAvoidance+0x150>)
 80015aa:	701a      	strb	r2, [r3, #0]
	_delay_ms(100);
 80015ac:	2064      	movs	r0, #100	; 0x64
 80015ae:	f7fe fddf 	bl	8000170 <_delay_ms>
	Received_distanceTwo = Ultrasonic_ReadTwo();
 80015b2:	f7ff ff57 	bl	8001464 <Ultrasonic_ReadTwo>
 80015b6:	4603      	mov	r3, r0
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b4d      	ldr	r3, [pc, #308]	; (80016f0 <APP_voidCollisionAvoidance+0x154>)
 80015bc:	701a      	strb	r2, [r3, #0]
	_delay_ms(100);
 80015be:	2064      	movs	r0, #100	; 0x64
 80015c0:	f7fe fdd6 	bl	8000170 <_delay_ms>
	Received_distanceThree = Ultrasonic_ReadThree();
 80015c4:	f7ff ff82 	bl	80014cc <Ultrasonic_ReadThree>
 80015c8:	4603      	mov	r3, r0
 80015ca:	461a      	mov	r2, r3
 80015cc:	4b49      	ldr	r3, [pc, #292]	; (80016f4 <APP_voidCollisionAvoidance+0x158>)
 80015ce:	701a      	strb	r2, [r3, #0]
	_delay_ms(100);
 80015d0:	2064      	movs	r0, #100	; 0x64
 80015d2:	f7fe fdcd 	bl	8000170 <_delay_ms>
//	Received_distanceFour = Ultrasonic_ReadFour();
//	_delay_ms(100);
	Received_distanceFive = Ultrasonic_ReadFive();
 80015d6:	f7ff ffad 	bl	8001534 <Ultrasonic_ReadFive>
 80015da:	4603      	mov	r3, r0
 80015dc:	461a      	mov	r2, r3
 80015de:	4b46      	ldr	r3, [pc, #280]	; (80016f8 <APP_voidCollisionAvoidance+0x15c>)
 80015e0:	701a      	strb	r2, [r3, #0]
	_delay_ms(100);
 80015e2:	2064      	movs	r0, #100	; 0x64
 80015e4:	f7fe fdc4 	bl	8000170 <_delay_ms>

	switch(g_u8Flag)
 80015e8:	4b44      	ldr	r3, [pc, #272]	; (80016fc <APP_voidCollisionAvoidance+0x160>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	3b01      	subs	r3, #1
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d879      	bhi.n	80016e6 <APP_voidCollisionAvoidance+0x14a>
 80015f2:	a201      	add	r2, pc, #4	; (adr r2, 80015f8 <APP_voidCollisionAvoidance+0x5c>)
 80015f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f8:	08001609 	.word	0x08001609
 80015fc:	08001633 	.word	0x08001633
 8001600:	0800166b 	.word	0x0800166b
 8001604:	080016a3 	.word	0x080016a3
	{
	/***************************************************************************/
		case CA_ADAS_FORWARD_STATE:
			if(Received_distanceOne > 10)
 8001608:	4b38      	ldr	r3, [pc, #224]	; (80016ec <APP_voidCollisionAvoidance+0x150>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b0a      	cmp	r3, #10
 800160e:	d904      	bls.n	800161a <APP_voidCollisionAvoidance+0x7e>
			{
				MOTOR_RF_GO_FORWARD();
 8001610:	f7fe ff68 	bl	80004e4 <MOTOR_RF_GO_FORWARD>
				MOTOR_LF_GO_FORWARD();
 8001614:	f7fe ff9c 	bl	8000550 <MOTOR_LF_GO_FORWARD>
				MOTOR_RF_STOP();
				MOTOR_LF_STOP();
				_delay_ms(1500);
				g_u8Flag = CA_ADAS_RIGHT_STATE;
			}
			break;
 8001618:	e065      	b.n	80016e6 <APP_voidCollisionAvoidance+0x14a>
				MOTOR_RF_STOP();
 800161a:	f7fe ff7f 	bl	800051c <MOTOR_RF_STOP>
				MOTOR_LF_STOP();
 800161e:	f7fe ffb3 	bl	8000588 <MOTOR_LF_STOP>
				_delay_ms(1500);
 8001622:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001626:	f7fe fda3 	bl	8000170 <_delay_ms>
				g_u8Flag = CA_ADAS_RIGHT_STATE;
 800162a:	4b34      	ldr	r3, [pc, #208]	; (80016fc <APP_voidCollisionAvoidance+0x160>)
 800162c:	2202      	movs	r2, #2
 800162e:	701a      	strb	r2, [r3, #0]
			break;
 8001630:	e059      	b.n	80016e6 <APP_voidCollisionAvoidance+0x14a>
		/***************************************************************************/
		case CA_ADAS_RIGHT_STATE:
			if(Received_distanceThree > 20)
 8001632:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <APP_voidCollisionAvoidance+0x158>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b14      	cmp	r3, #20
 8001638:	d913      	bls.n	8001662 <APP_voidCollisionAvoidance+0xc6>
			{
				MOTOR_RF_GO_BACKWARD();
 800163a:	f7fe ff61 	bl	8000500 <MOTOR_RF_GO_BACKWARD>
				MOTOR_LF_GO_FORWARD();
 800163e:	f7fe ff87 	bl	8000550 <MOTOR_LF_GO_FORWARD>
				_delay_ms(400);
 8001642:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001646:	f7fe fd93 	bl	8000170 <_delay_ms>
				MOTOR_RF_STOP();
 800164a:	f7fe ff67 	bl	800051c <MOTOR_RF_STOP>
				MOTOR_LF_STOP();
 800164e:	f7fe ff9b 	bl	8000588 <MOTOR_LF_STOP>
				_delay_ms(1500);
 8001652:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001656:	f7fe fd8b 	bl	8000170 <_delay_ms>
				g_u8Flag = CA_ADAS_FORWARD_STATE;
 800165a:	4b28      	ldr	r3, [pc, #160]	; (80016fc <APP_voidCollisionAvoidance+0x160>)
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				g_u8Flag = CA_ADAS_LEFT_STATE;
			}
			break;
 8001660:	e041      	b.n	80016e6 <APP_voidCollisionAvoidance+0x14a>
				g_u8Flag = CA_ADAS_LEFT_STATE;
 8001662:	4b26      	ldr	r3, [pc, #152]	; (80016fc <APP_voidCollisionAvoidance+0x160>)
 8001664:	2203      	movs	r2, #3
 8001666:	701a      	strb	r2, [r3, #0]
			break;
 8001668:	e03d      	b.n	80016e6 <APP_voidCollisionAvoidance+0x14a>
		/***************************************************************************/
		case CA_ADAS_LEFT_STATE:
			if(Received_distanceFive > 20)
 800166a:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <APP_voidCollisionAvoidance+0x15c>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b14      	cmp	r3, #20
 8001670:	d913      	bls.n	800169a <APP_voidCollisionAvoidance+0xfe>
			{
				MOTOR_RF_GO_FORWARD();
 8001672:	f7fe ff37 	bl	80004e4 <MOTOR_RF_GO_FORWARD>
				MOTOR_LF_GO_BACKWARD();
 8001676:	f7fe ff79 	bl	800056c <MOTOR_LF_GO_BACKWARD>
				_delay_ms(400);
 800167a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800167e:	f7fe fd77 	bl	8000170 <_delay_ms>
				MOTOR_RF_STOP();
 8001682:	f7fe ff4b 	bl	800051c <MOTOR_RF_STOP>
				MOTOR_LF_STOP();
 8001686:	f7fe ff7f 	bl	8000588 <MOTOR_LF_STOP>
				_delay_ms(1500);
 800168a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800168e:	f7fe fd6f 	bl	8000170 <_delay_ms>
				g_u8Flag = CA_ADAS_FORWARD_STATE;
 8001692:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <APP_voidCollisionAvoidance+0x160>)
 8001694:	2201      	movs	r2, #1
 8001696:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				g_u8Flag = CA_ADAS_REVERSE_STATE;
			}
			break;
 8001698:	e025      	b.n	80016e6 <APP_voidCollisionAvoidance+0x14a>
				g_u8Flag = CA_ADAS_REVERSE_STATE;
 800169a:	4b18      	ldr	r3, [pc, #96]	; (80016fc <APP_voidCollisionAvoidance+0x160>)
 800169c:	2204      	movs	r2, #4
 800169e:	701a      	strb	r2, [r3, #0]
			break;
 80016a0:	e021      	b.n	80016e6 <APP_voidCollisionAvoidance+0x14a>
		/***************************************************************************/
		case CA_ADAS_REVERSE_STATE:
			if(Received_distanceTwo > 20)
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <APP_voidCollisionAvoidance+0x154>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b14      	cmp	r3, #20
 80016a8:	d918      	bls.n	80016dc <APP_voidCollisionAvoidance+0x140>
			{
				if(Received_distanceThree < 20)
 80016aa:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <APP_voidCollisionAvoidance+0x158>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b13      	cmp	r3, #19
 80016b0:	d804      	bhi.n	80016bc <APP_voidCollisionAvoidance+0x120>
				{
					MOTOR_RF_GO_BACKWARD();
 80016b2:	f7fe ff25 	bl	8000500 <MOTOR_RF_GO_BACKWARD>
					MOTOR_LF_GO_BACKWARD();
 80016b6:	f7fe ff59 	bl	800056c <MOTOR_LF_GO_BACKWARD>
			else
			{
				MOTOR_RF_STOP();
				MOTOR_LF_STOP();
			}
			break;
 80016ba:	e013      	b.n	80016e4 <APP_voidCollisionAvoidance+0x148>
				else if(Received_distanceThree > 20)
 80016bc:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <APP_voidCollisionAvoidance+0x158>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b14      	cmp	r3, #20
 80016c2:	d90f      	bls.n	80016e4 <APP_voidCollisionAvoidance+0x148>
					MOTOR_RF_STOP();
 80016c4:	f7fe ff2a 	bl	800051c <MOTOR_RF_STOP>
					MOTOR_LF_STOP();
 80016c8:	f7fe ff5e 	bl	8000588 <MOTOR_LF_STOP>
					_delay_ms(1500);
 80016cc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80016d0:	f7fe fd4e 	bl	8000170 <_delay_ms>
					g_u8Flag = CA_ADAS_RIGHT_STATE;
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <APP_voidCollisionAvoidance+0x160>)
 80016d6:	2202      	movs	r2, #2
 80016d8:	701a      	strb	r2, [r3, #0]
			break;
 80016da:	e003      	b.n	80016e4 <APP_voidCollisionAvoidance+0x148>
				MOTOR_RF_STOP();
 80016dc:	f7fe ff1e 	bl	800051c <MOTOR_RF_STOP>
				MOTOR_LF_STOP();
 80016e0:	f7fe ff52 	bl	8000588 <MOTOR_LF_STOP>
			break;
 80016e4:	bf00      	nop
	}
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	2000007a 	.word	0x2000007a
 80016f0:	2000007b 	.word	0x2000007b
 80016f4:	2000007c 	.word	0x2000007c
 80016f8:	2000007d 	.word	0x2000007d
 80016fc:	20000000 	.word	0x20000000

08001700 <main>:
	}

}

int main(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0

	MRCC_VidInit();
 8001704:	f7fe ff66 	bl	80005d4 <MRCC_VidInit>
	MRCC_VidEnablePeripheralClock(APB1_BUS, TIM2_RCC);
 8001708:	2100      	movs	r1, #0
 800170a:	2001      	movs	r0, #1
 800170c:	f7fe ff96 	bl	800063c <MRCC_VidEnablePeripheralClock>
	MRCC_VidEnablePeripheralClock(APB1_BUS, TIM3_RCC);
 8001710:	2101      	movs	r1, #1
 8001712:	2001      	movs	r0, #1
 8001714:	f7fe ff92 	bl	800063c <MRCC_VidEnablePeripheralClock>
	MRCC_VidEnablePeripheralClock(APB2_BUS, GPIOA_RCC);
 8001718:	2102      	movs	r1, #2
 800171a:	2002      	movs	r0, #2
 800171c:	f7fe ff8e 	bl	800063c <MRCC_VidEnablePeripheralClock>
	MRCC_VidEnablePeripheralClock(APB2_BUS, GPIOB_RCC);
 8001720:	2103      	movs	r1, #3
 8001722:	2002      	movs	r0, #2
 8001724:	f7fe ff8a 	bl	800063c <MRCC_VidEnablePeripheralClock>
	MRCC_VidEnablePeripheralClock(APB1_BUS, TIM4_RCC);
 8001728:	2102      	movs	r1, #2
 800172a:	2001      	movs	r0, #1
 800172c:	f7fe ff86 	bl	800063c <MRCC_VidEnablePeripheralClock>

	/*Enable Interupt for each timer*/
	MNVIC_VidEnablePeripheral(TIM2_C);
 8001730:	201c      	movs	r0, #28
 8001732:	f7fe ff37 	bl	80005a4 <MNVIC_VidEnablePeripheral>
	MNVIC_VidEnablePeripheral(TIM3_C);
 8001736:	201d      	movs	r0, #29
 8001738:	f7fe ff34 	bl	80005a4 <MNVIC_VidEnablePeripheral>
	//timer2
	/*Echo1*/
	MGPIO_VidSetPinDirection(GPIOA,PIN0,INPUT_FLOATING);
 800173c:	2204      	movs	r2, #4
 800173e:	2100      	movs	r1, #0
 8001740:	2000      	movs	r0, #0
 8001742:	f7fe fd49 	bl	80001d8 <MGPIO_VidSetPinDirection>
	/*Echo2*/
	MGPIO_VidSetPinDirection(GPIOA,PIN1,INPUT_FLOATING);
 8001746:	2204      	movs	r2, #4
 8001748:	2101      	movs	r1, #1
 800174a:	2000      	movs	r0, #0
 800174c:	f7fe fd44 	bl	80001d8 <MGPIO_VidSetPinDirection>
	/*Echo3*/
	MGPIO_VidSetPinDirection(GPIOA,PIN6,INPUT_FLOATING);
 8001750:	2204      	movs	r2, #4
 8001752:	2106      	movs	r1, #6
 8001754:	2000      	movs	r0, #0
 8001756:	f7fe fd3f 	bl	80001d8 <MGPIO_VidSetPinDirection>
	/*Echo4*/
	MGPIO_VidSetPinDirection(GPIOA,PIN7,INPUT_FLOATING);
 800175a:	2204      	movs	r2, #4
 800175c:	2107      	movs	r1, #7
 800175e:	2000      	movs	r0, #0
 8001760:	f7fe fd3a 	bl	80001d8 <MGPIO_VidSetPinDirection>
	/*Echo5*/
	MGPIO_VidSetPinDirection(GPIOB,PIN1,INPUT_FLOATING);
 8001764:	2204      	movs	r2, #4
 8001766:	2101      	movs	r1, #1
 8001768:	2001      	movs	r0, #1
 800176a:	f7fe fd35 	bl	80001d8 <MGPIO_VidSetPinDirection>

	/*TIRG1*/
	MGPIO_VidSetPinDirection(GPIOB, PIN5, OUTPUT_SPEED_10MHZ_PP);
 800176e:	2201      	movs	r2, #1
 8001770:	2105      	movs	r1, #5
 8001772:	2001      	movs	r0, #1
 8001774:	f7fe fd30 	bl	80001d8 <MGPIO_VidSetPinDirection>
	/*TIRG2*/
	MGPIO_VidSetPinDirection(GPIOA, PIN2, OUTPUT_SPEED_10MHZ_PP);
 8001778:	2201      	movs	r2, #1
 800177a:	2102      	movs	r1, #2
 800177c:	2000      	movs	r0, #0
 800177e:	f7fe fd2b 	bl	80001d8 <MGPIO_VidSetPinDirection>
	/*TIRG3*/
	MGPIO_VidSetPinDirection(GPIOB, PIN0, OUTPUT_SPEED_10MHZ_PP);
 8001782:	2201      	movs	r2, #1
 8001784:	2100      	movs	r1, #0
 8001786:	2001      	movs	r0, #1
 8001788:	f7fe fd26 	bl	80001d8 <MGPIO_VidSetPinDirection>
	/*TIRG4*/
	MGPIO_VidSetPinDirection(GPIOB, PIN10, OUTPUT_SPEED_10MHZ_PP);
 800178c:	2201      	movs	r2, #1
 800178e:	210a      	movs	r1, #10
 8001790:	2001      	movs	r0, #1
 8001792:	f7fe fd21 	bl	80001d8 <MGPIO_VidSetPinDirection>
	/*TIRG5*/
	MGPIO_VidSetPinDirection(GPIOA, PIN3, OUTPUT_SPEED_10MHZ_PP);
 8001796:	2201      	movs	r2, #1
 8001798:	2103      	movs	r1, #3
 800179a:	2000      	movs	r0, #0
 800179c:	f7fe fd1c 	bl	80001d8 <MGPIO_VidSetPinDirection>

	/*SetCallBack*/
	Timer2_u8InputCaptureSetCallBack(&TIM2);
 80017a0:	4810      	ldr	r0, [pc, #64]	; (80017e4 <main+0xe4>)
 80017a2:	f7ff f843 	bl	800082c <Timer2_u8InputCaptureSetCallBack>
	Timer3_u8InputCaptureSetCallBack(&TIM3);
 80017a6:	4810      	ldr	r0, [pc, #64]	; (80017e8 <main+0xe8>)
 80017a8:	f7ff f9c4 	bl	8000b34 <Timer3_u8InputCaptureSetCallBack>
	/*Inizailize channle*/
	TIMER2_VoidInitInputCapture(Channle1);
 80017ac:	2000      	movs	r0, #0
 80017ae:	f7fe ffd7 	bl	8000760 <TIMER2_VoidInitInputCapture>
	TIMER2_VoidInitInputCapture(Channle2);
 80017b2:	2001      	movs	r0, #1
 80017b4:	f7fe ffd4 	bl	8000760 <TIMER2_VoidInitInputCapture>
	TIMER3_VoidInitInputCapture(Channle1);
 80017b8:	2000      	movs	r0, #0
 80017ba:	f7ff f90b 	bl	80009d4 <TIMER3_VoidInitInputCapture>
	TIMER3_VoidInitInputCapture(Channle2);
 80017be:	2001      	movs	r0, #1
 80017c0:	f7ff f908 	bl	80009d4 <TIMER3_VoidInitInputCapture>
	TIMER3_VoidInitInputCapture(Channle4);
 80017c4:	2003      	movs	r0, #3
 80017c6:	f7ff f905 	bl	80009d4 <TIMER3_VoidInitInputCapture>


	MOTORS_Void_MotorInit();
 80017ca:	f7fe fe51 	bl	8000470 <MOTORS_Void_MotorInit>
	//	MGPIO_VidSetPinDirection(GPIOA, PIN7, OUTPUT_SPEED_2MHZ_PP);




	MUSART_VidInit();
 80017ce:	f7ff fbf5 	bl	8000fbc <MUSART_VidInit>


	MOTOR_RF_Void_MotorSetSpeed(100);
 80017d2:	2064      	movs	r0, #100	; 0x64
 80017d4:	f7fe fe7a 	bl	80004cc <MOTOR_RF_Void_MotorSetSpeed>
	MOTOR_LF_Void_MotorSetSpeed(100);
 80017d8:	2064      	movs	r0, #100	; 0x64
 80017da:	f7fe fead 	bl	8000538 <MOTOR_LF_Void_MotorSetSpeed>
//	MOTOR_LF_Void_MotorSetSpeed(75);

	/* Loop forever */
	for(;;)
	{
		APP_voidCollisionAvoidance();
 80017de:	f7ff fedd 	bl	800159c <APP_voidCollisionAvoidance>
 80017e2:	e7fc      	b.n	80017de <main+0xde>
 80017e4:	080010a1 	.word	0x080010a1
 80017e8:	0800119d 	.word	0x0800119d

080017ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017ec:	480d      	ldr	r0, [pc, #52]	; (8001824 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f4:	480c      	ldr	r0, [pc, #48]	; (8001828 <LoopForever+0x6>)
  ldr r1, =_edata
 80017f6:	490d      	ldr	r1, [pc, #52]	; (800182c <LoopForever+0xa>)
  ldr r2, =_sidata
 80017f8:	4a0d      	ldr	r2, [pc, #52]	; (8001830 <LoopForever+0xe>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017fc:	e002      	b.n	8001804 <LoopCopyDataInit>

080017fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001802:	3304      	adds	r3, #4

08001804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001808:	d3f9      	bcc.n	80017fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <LoopForever+0x12>)
  ldr r4, =_ebss
 800180c:	4c0a      	ldr	r4, [pc, #40]	; (8001838 <LoopForever+0x16>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001810:	e001      	b.n	8001816 <LoopFillZerobss>

08001812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001814:	3204      	adds	r2, #4

08001816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001818:	d3fb      	bcc.n	8001812 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800181a:	f000 f811 	bl	8001840 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800181e:	f7ff ff6f 	bl	8001700 <main>

08001822 <LoopForever>:

LoopForever:
  b LoopForever
 8001822:	e7fe      	b.n	8001822 <LoopForever>
  ldr   r0, =_estack
 8001824:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800182c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001830:	080018a8 	.word	0x080018a8
  ldr r2, =_sbss
 8001834:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001838:	20000080 	.word	0x20000080

0800183c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800183c:	e7fe      	b.n	800183c <ADC1_2_IRQHandler>
	...

08001840 <__libc_init_array>:
 8001840:	b570      	push	{r4, r5, r6, lr}
 8001842:	2600      	movs	r6, #0
 8001844:	4d0c      	ldr	r5, [pc, #48]	; (8001878 <__libc_init_array+0x38>)
 8001846:	4c0d      	ldr	r4, [pc, #52]	; (800187c <__libc_init_array+0x3c>)
 8001848:	1b64      	subs	r4, r4, r5
 800184a:	10a4      	asrs	r4, r4, #2
 800184c:	42a6      	cmp	r6, r4
 800184e:	d109      	bne.n	8001864 <__libc_init_array+0x24>
 8001850:	f000 f81a 	bl	8001888 <_init>
 8001854:	2600      	movs	r6, #0
 8001856:	4d0a      	ldr	r5, [pc, #40]	; (8001880 <__libc_init_array+0x40>)
 8001858:	4c0a      	ldr	r4, [pc, #40]	; (8001884 <__libc_init_array+0x44>)
 800185a:	1b64      	subs	r4, r4, r5
 800185c:	10a4      	asrs	r4, r4, #2
 800185e:	42a6      	cmp	r6, r4
 8001860:	d105      	bne.n	800186e <__libc_init_array+0x2e>
 8001862:	bd70      	pop	{r4, r5, r6, pc}
 8001864:	f855 3b04 	ldr.w	r3, [r5], #4
 8001868:	4798      	blx	r3
 800186a:	3601      	adds	r6, #1
 800186c:	e7ee      	b.n	800184c <__libc_init_array+0xc>
 800186e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001872:	4798      	blx	r3
 8001874:	3601      	adds	r6, #1
 8001876:	e7f2      	b.n	800185e <__libc_init_array+0x1e>
 8001878:	080018a0 	.word	0x080018a0
 800187c:	080018a0 	.word	0x080018a0
 8001880:	080018a0 	.word	0x080018a0
 8001884:	080018a4 	.word	0x080018a4

08001888 <_init>:
 8001888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800188a:	bf00      	nop
 800188c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800188e:	bc08      	pop	{r3}
 8001890:	469e      	mov	lr, r3
 8001892:	4770      	bx	lr

08001894 <_fini>:
 8001894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001896:	bf00      	nop
 8001898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800189a:	bc08      	pop	{r3}
 800189c:	469e      	mov	lr, r3
 800189e:	4770      	bx	lr


TASK04_SYSTICK_TASK01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000544  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000674  0800067c  0001067c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000674  08000674  0001067c  2**0
                  CONTENTS
  4 .ARM          00000000  08000674  08000674  0001067c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000674  0800067c  0001067c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000674  08000674  00010674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000678  08000678  00010678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001067c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000000  0800067c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  0800067c  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001067c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000106a5  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000068d  00000000  00000000  000106e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000078  00000000  00000000  00010d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   000006d2  00000000  00000000  00010ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000034f  00000000  00000000  000114bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000000f0  00000000  00000000  00011810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000041a8  00000000  00000000  00011900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000009e  00000000  00000000  00015aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00001010  00000000  00000000  00015b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000240  00000000  00000000  00016b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800065c 	.word	0x0800065c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800065c 	.word	0x0800065c

08000170 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000170:	480d      	ldr	r0, [pc, #52]	; (80001a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000172:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000174:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000178:	480c      	ldr	r0, [pc, #48]	; (80001ac <LoopForever+0x6>)
  ldr r1, =_edata
 800017a:	490d      	ldr	r1, [pc, #52]	; (80001b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800017c:	4a0d      	ldr	r2, [pc, #52]	; (80001b4 <LoopForever+0xe>)
  movs r3, #0
 800017e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000180:	e002      	b.n	8000188 <LoopCopyDataInit>

08000182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000186:	3304      	adds	r3, #4

08000188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800018a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800018c:	d3f9      	bcc.n	8000182 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800018e:	4a0a      	ldr	r2, [pc, #40]	; (80001b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000190:	4c0a      	ldr	r4, [pc, #40]	; (80001bc <LoopForever+0x16>)
  movs r3, #0
 8000192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000194:	e001      	b.n	800019a <LoopFillZerobss>

08000196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000198:	3204      	adds	r2, #4

0800019a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800019a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800019c:	d3fb      	bcc.n	8000196 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800019e:	f000 fa39 	bl	8000614 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001a2:	f000 fa1f 	bl	80005e4 <main>

080001a6 <LoopForever>:

LoopForever:
  b LoopForever
 80001a6:	e7fe      	b.n	80001a6 <LoopForever>
  ldr   r0, =_estack
 80001a8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80001ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001b0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80001b4:	0800067c 	.word	0x0800067c
  ldr r2, =_sbss
 80001b8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80001bc:	20000028 	.word	0x20000028

080001c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001c0:	e7fe      	b.n	80001c0 <ADC1_2_IRQHandler>
	...

080001c4 <GPIO_voidSetPinDirection>:
 *                              					RCC Function Implementations									   	*
 *******************************************************************************/

// Initializes the RCC Module with the necessary Configurations
void GPIO_voidSetPinDirection(u8 copy_u8PinID, u8 copy_u8PortID, u8 copy_u8Mode)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	4603      	mov	r3, r0
 80001cc:	71fb      	strb	r3, [r7, #7]
 80001ce:	460b      	mov	r3, r1
 80001d0:	71bb      	strb	r3, [r7, #6]
 80001d2:	4613      	mov	r3, r2
 80001d4:	717b      	strb	r3, [r7, #5]
	// Setup the pin direction as required
	switch(copy_u8PortID) {
 80001d6:	79bb      	ldrb	r3, [r7, #6]
 80001d8:	2b02      	cmp	r3, #2
 80001da:	d07a      	beq.n	80002d2 <GPIO_voidSetPinDirection+0x10e>
 80001dc:	2b02      	cmp	r3, #2
 80001de:	f300 80b6 	bgt.w	800034e <GPIO_voidSetPinDirection+0x18a>
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d002      	beq.n	80001ec <GPIO_voidSetPinDirection+0x28>
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d03a      	beq.n	8000260 <GPIO_voidSetPinDirection+0x9c>
				GPIO_C_REG->GPIOx_CRH &= ~ ((0b1111) << (copy_u8PinID * 4));
				GPIO_C_REG->GPIOx_CRH |= ((copy_u8Mode) << (copy_u8PinID * 4));
			}
		break;
	}
}
 80001ea:	e0b0      	b.n	800034e <GPIO_voidSetPinDirection+0x18a>
			if(copy_u8PinID <= 7 )
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	2b07      	cmp	r3, #7
 80001f0:	d817      	bhi.n	8000222 <GPIO_voidSetPinDirection+0x5e>
				GPIO_A_REG->GPIOx_CRL &= ~ ((0b1111) << (copy_u8PinID * 4));
 80001f2:	4b59      	ldr	r3, [pc, #356]	; (8000358 <GPIO_voidSetPinDirection+0x194>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	79fa      	ldrb	r2, [r7, #7]
 80001f8:	0092      	lsls	r2, r2, #2
 80001fa:	210f      	movs	r1, #15
 80001fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000200:	43d2      	mvns	r2, r2
 8000202:	4611      	mov	r1, r2
 8000204:	4a54      	ldr	r2, [pc, #336]	; (8000358 <GPIO_voidSetPinDirection+0x194>)
 8000206:	400b      	ands	r3, r1
 8000208:	6013      	str	r3, [r2, #0]
				GPIO_A_REG->GPIOx_CRL |= ((copy_u8Mode) << (copy_u8PinID * 4));
 800020a:	4b53      	ldr	r3, [pc, #332]	; (8000358 <GPIO_voidSetPinDirection+0x194>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	7979      	ldrb	r1, [r7, #5]
 8000210:	79fa      	ldrb	r2, [r7, #7]
 8000212:	0092      	lsls	r2, r2, #2
 8000214:	fa01 f202 	lsl.w	r2, r1, r2
 8000218:	4611      	mov	r1, r2
 800021a:	4a4f      	ldr	r2, [pc, #316]	; (8000358 <GPIO_voidSetPinDirection+0x194>)
 800021c:	430b      	orrs	r3, r1
 800021e:	6013      	str	r3, [r2, #0]
		break;
 8000220:	e090      	b.n	8000344 <GPIO_voidSetPinDirection+0x180>
			else if(copy_u8PinID <= 15)
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	2b0f      	cmp	r3, #15
 8000226:	f200 808d 	bhi.w	8000344 <GPIO_voidSetPinDirection+0x180>
				copy_u8PinID -= 8;
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	3b08      	subs	r3, #8
 800022e:	71fb      	strb	r3, [r7, #7]
				GPIO_A_REG->GPIOx_CRH &= ~ ((0b1111) << (copy_u8PinID * 4));
 8000230:	4b49      	ldr	r3, [pc, #292]	; (8000358 <GPIO_voidSetPinDirection+0x194>)
 8000232:	685b      	ldr	r3, [r3, #4]
 8000234:	79fa      	ldrb	r2, [r7, #7]
 8000236:	0092      	lsls	r2, r2, #2
 8000238:	210f      	movs	r1, #15
 800023a:	fa01 f202 	lsl.w	r2, r1, r2
 800023e:	43d2      	mvns	r2, r2
 8000240:	4611      	mov	r1, r2
 8000242:	4a45      	ldr	r2, [pc, #276]	; (8000358 <GPIO_voidSetPinDirection+0x194>)
 8000244:	400b      	ands	r3, r1
 8000246:	6053      	str	r3, [r2, #4]
				GPIO_A_REG->GPIOx_CRH |= ((copy_u8Mode) << (copy_u8PinID * 4));
 8000248:	4b43      	ldr	r3, [pc, #268]	; (8000358 <GPIO_voidSetPinDirection+0x194>)
 800024a:	685b      	ldr	r3, [r3, #4]
 800024c:	7979      	ldrb	r1, [r7, #5]
 800024e:	79fa      	ldrb	r2, [r7, #7]
 8000250:	0092      	lsls	r2, r2, #2
 8000252:	fa01 f202 	lsl.w	r2, r1, r2
 8000256:	4611      	mov	r1, r2
 8000258:	4a3f      	ldr	r2, [pc, #252]	; (8000358 <GPIO_voidSetPinDirection+0x194>)
 800025a:	430b      	orrs	r3, r1
 800025c:	6053      	str	r3, [r2, #4]
		break;
 800025e:	e071      	b.n	8000344 <GPIO_voidSetPinDirection+0x180>
			if(copy_u8PinID <= 7 )
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	2b07      	cmp	r3, #7
 8000264:	d817      	bhi.n	8000296 <GPIO_voidSetPinDirection+0xd2>
				GPIO_B_REG->GPIOx_CRL &= ~ ((0b1111) << (copy_u8PinID * 4));
 8000266:	4b3d      	ldr	r3, [pc, #244]	; (800035c <GPIO_voidSetPinDirection+0x198>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	79fa      	ldrb	r2, [r7, #7]
 800026c:	0092      	lsls	r2, r2, #2
 800026e:	210f      	movs	r1, #15
 8000270:	fa01 f202 	lsl.w	r2, r1, r2
 8000274:	43d2      	mvns	r2, r2
 8000276:	4611      	mov	r1, r2
 8000278:	4a38      	ldr	r2, [pc, #224]	; (800035c <GPIO_voidSetPinDirection+0x198>)
 800027a:	400b      	ands	r3, r1
 800027c:	6013      	str	r3, [r2, #0]
				GPIO_B_REG->GPIOx_CRL |= ((copy_u8Mode) << (copy_u8PinID * 4));
 800027e:	4b37      	ldr	r3, [pc, #220]	; (800035c <GPIO_voidSetPinDirection+0x198>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	7979      	ldrb	r1, [r7, #5]
 8000284:	79fa      	ldrb	r2, [r7, #7]
 8000286:	0092      	lsls	r2, r2, #2
 8000288:	fa01 f202 	lsl.w	r2, r1, r2
 800028c:	4611      	mov	r1, r2
 800028e:	4a33      	ldr	r2, [pc, #204]	; (800035c <GPIO_voidSetPinDirection+0x198>)
 8000290:	430b      	orrs	r3, r1
 8000292:	6013      	str	r3, [r2, #0]
		break;
 8000294:	e058      	b.n	8000348 <GPIO_voidSetPinDirection+0x184>
			else if(copy_u8PinID <= 15)
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	2b0f      	cmp	r3, #15
 800029a:	d855      	bhi.n	8000348 <GPIO_voidSetPinDirection+0x184>
				copy_u8PinID -= 8;
 800029c:	79fb      	ldrb	r3, [r7, #7]
 800029e:	3b08      	subs	r3, #8
 80002a0:	71fb      	strb	r3, [r7, #7]
				GPIO_B_REG->GPIOx_CRH &= ~ ((0b1111) << (copy_u8PinID * 4));
 80002a2:	4b2e      	ldr	r3, [pc, #184]	; (800035c <GPIO_voidSetPinDirection+0x198>)
 80002a4:	685b      	ldr	r3, [r3, #4]
 80002a6:	79fa      	ldrb	r2, [r7, #7]
 80002a8:	0092      	lsls	r2, r2, #2
 80002aa:	210f      	movs	r1, #15
 80002ac:	fa01 f202 	lsl.w	r2, r1, r2
 80002b0:	43d2      	mvns	r2, r2
 80002b2:	4611      	mov	r1, r2
 80002b4:	4a29      	ldr	r2, [pc, #164]	; (800035c <GPIO_voidSetPinDirection+0x198>)
 80002b6:	400b      	ands	r3, r1
 80002b8:	6053      	str	r3, [r2, #4]
				GPIO_B_REG->GPIOx_CRH |= ((copy_u8Mode) << (copy_u8PinID * 4));
 80002ba:	4b28      	ldr	r3, [pc, #160]	; (800035c <GPIO_voidSetPinDirection+0x198>)
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	7979      	ldrb	r1, [r7, #5]
 80002c0:	79fa      	ldrb	r2, [r7, #7]
 80002c2:	0092      	lsls	r2, r2, #2
 80002c4:	fa01 f202 	lsl.w	r2, r1, r2
 80002c8:	4611      	mov	r1, r2
 80002ca:	4a24      	ldr	r2, [pc, #144]	; (800035c <GPIO_voidSetPinDirection+0x198>)
 80002cc:	430b      	orrs	r3, r1
 80002ce:	6053      	str	r3, [r2, #4]
		break;
 80002d0:	e03a      	b.n	8000348 <GPIO_voidSetPinDirection+0x184>
			if(copy_u8PinID <= 7 )
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	2b07      	cmp	r3, #7
 80002d6:	d817      	bhi.n	8000308 <GPIO_voidSetPinDirection+0x144>
				GPIO_C_REG->GPIOx_CRL &= ~ ((0b1111) << (copy_u8PinID * 4));
 80002d8:	4b21      	ldr	r3, [pc, #132]	; (8000360 <GPIO_voidSetPinDirection+0x19c>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	79fa      	ldrb	r2, [r7, #7]
 80002de:	0092      	lsls	r2, r2, #2
 80002e0:	210f      	movs	r1, #15
 80002e2:	fa01 f202 	lsl.w	r2, r1, r2
 80002e6:	43d2      	mvns	r2, r2
 80002e8:	4611      	mov	r1, r2
 80002ea:	4a1d      	ldr	r2, [pc, #116]	; (8000360 <GPIO_voidSetPinDirection+0x19c>)
 80002ec:	400b      	ands	r3, r1
 80002ee:	6013      	str	r3, [r2, #0]
				GPIO_C_REG->GPIOx_CRL |= ((copy_u8Mode) << (copy_u8PinID * 4));
 80002f0:	4b1b      	ldr	r3, [pc, #108]	; (8000360 <GPIO_voidSetPinDirection+0x19c>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	7979      	ldrb	r1, [r7, #5]
 80002f6:	79fa      	ldrb	r2, [r7, #7]
 80002f8:	0092      	lsls	r2, r2, #2
 80002fa:	fa01 f202 	lsl.w	r2, r1, r2
 80002fe:	4611      	mov	r1, r2
 8000300:	4a17      	ldr	r2, [pc, #92]	; (8000360 <GPIO_voidSetPinDirection+0x19c>)
 8000302:	430b      	orrs	r3, r1
 8000304:	6013      	str	r3, [r2, #0]
		break;
 8000306:	e021      	b.n	800034c <GPIO_voidSetPinDirection+0x188>
			else if(copy_u8PinID <= 15)
 8000308:	79fb      	ldrb	r3, [r7, #7]
 800030a:	2b0f      	cmp	r3, #15
 800030c:	d81e      	bhi.n	800034c <GPIO_voidSetPinDirection+0x188>
				copy_u8PinID -= 8;
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	3b08      	subs	r3, #8
 8000312:	71fb      	strb	r3, [r7, #7]
				GPIO_C_REG->GPIOx_CRH &= ~ ((0b1111) << (copy_u8PinID * 4));
 8000314:	4b12      	ldr	r3, [pc, #72]	; (8000360 <GPIO_voidSetPinDirection+0x19c>)
 8000316:	685b      	ldr	r3, [r3, #4]
 8000318:	79fa      	ldrb	r2, [r7, #7]
 800031a:	0092      	lsls	r2, r2, #2
 800031c:	210f      	movs	r1, #15
 800031e:	fa01 f202 	lsl.w	r2, r1, r2
 8000322:	43d2      	mvns	r2, r2
 8000324:	4611      	mov	r1, r2
 8000326:	4a0e      	ldr	r2, [pc, #56]	; (8000360 <GPIO_voidSetPinDirection+0x19c>)
 8000328:	400b      	ands	r3, r1
 800032a:	6053      	str	r3, [r2, #4]
				GPIO_C_REG->GPIOx_CRH |= ((copy_u8Mode) << (copy_u8PinID * 4));
 800032c:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <GPIO_voidSetPinDirection+0x19c>)
 800032e:	685b      	ldr	r3, [r3, #4]
 8000330:	7979      	ldrb	r1, [r7, #5]
 8000332:	79fa      	ldrb	r2, [r7, #7]
 8000334:	0092      	lsls	r2, r2, #2
 8000336:	fa01 f202 	lsl.w	r2, r1, r2
 800033a:	4611      	mov	r1, r2
 800033c:	4a08      	ldr	r2, [pc, #32]	; (8000360 <GPIO_voidSetPinDirection+0x19c>)
 800033e:	430b      	orrs	r3, r1
 8000340:	6053      	str	r3, [r2, #4]
		break;
 8000342:	e003      	b.n	800034c <GPIO_voidSetPinDirection+0x188>
		break;
 8000344:	bf00      	nop
 8000346:	e002      	b.n	800034e <GPIO_voidSetPinDirection+0x18a>
		break;
 8000348:	bf00      	nop
 800034a:	e000      	b.n	800034e <GPIO_voidSetPinDirection+0x18a>
		break;
 800034c:	bf00      	nop
}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	40010800 	.word	0x40010800
 800035c:	40010c00 	.word	0x40010c00
 8000360:	40010000 	.word	0x40010000

08000364 <GPIO_voidSetPinValue>:



void GPIO_voidSetPinValue(u8 copy_u8PinID, u8 copy_u8PortID, u8 copy_u8pinValue)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	71fb      	strb	r3, [r7, #7]
 800036e:	460b      	mov	r3, r1
 8000370:	71bb      	strb	r3, [r7, #6]
 8000372:	4613      	mov	r3, r2
 8000374:	717b      	strb	r3, [r7, #5]
	// Setup the pin direction as required
	switch(copy_u8PortID) {
 8000376:	79bb      	ldrb	r3, [r7, #6]
 8000378:	2b02      	cmp	r3, #2
 800037a:	d022      	beq.n	80003c2 <GPIO_voidSetPinValue+0x5e>
 800037c:	2b02      	cmp	r3, #2
 800037e:	dc33      	bgt.n	80003e8 <GPIO_voidSetPinValue+0x84>
 8000380:	2b00      	cmp	r3, #0
 8000382:	d002      	beq.n	800038a <GPIO_voidSetPinValue+0x26>
 8000384:	2b01      	cmp	r3, #1
 8000386:	d00e      	beq.n	80003a6 <GPIO_voidSetPinValue+0x42>
			{
				GPIO_A_REG->GPIOx_ODR = GPIO_ODR_LOW;
			}
		break;
	}
}
 8000388:	e02e      	b.n	80003e8 <GPIO_voidSetPinValue+0x84>
			if(copy_u8pinValue == GPIO_ODR_HIGH)
 800038a:	797b      	ldrb	r3, [r7, #5]
 800038c:	2b01      	cmp	r3, #1
 800038e:	d103      	bne.n	8000398 <GPIO_voidSetPinValue+0x34>
				GPIO_A_REG->GPIOx_ODR = GPIO_ODR_HIGH;
 8000390:	4b18      	ldr	r3, [pc, #96]	; (80003f4 <GPIO_voidSetPinValue+0x90>)
 8000392:	2201      	movs	r2, #1
 8000394:	60da      	str	r2, [r3, #12]
		break;
 8000396:	e022      	b.n	80003de <GPIO_voidSetPinValue+0x7a>
			else if(copy_u8pinValue == GPIO_ODR_LOW)
 8000398:	797b      	ldrb	r3, [r7, #5]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d11f      	bne.n	80003de <GPIO_voidSetPinValue+0x7a>
				GPIO_A_REG->GPIOx_ODR = GPIO_ODR_LOW;
 800039e:	4b15      	ldr	r3, [pc, #84]	; (80003f4 <GPIO_voidSetPinValue+0x90>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	60da      	str	r2, [r3, #12]
		break;
 80003a4:	e01b      	b.n	80003de <GPIO_voidSetPinValue+0x7a>
			if(copy_u8pinValue == GPIO_ODR_HIGH)
 80003a6:	797b      	ldrb	r3, [r7, #5]
 80003a8:	2b01      	cmp	r3, #1
 80003aa:	d103      	bne.n	80003b4 <GPIO_voidSetPinValue+0x50>
				GPIO_A_REG->GPIOx_ODR = GPIO_ODR_HIGH;
 80003ac:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <GPIO_voidSetPinValue+0x90>)
 80003ae:	2201      	movs	r2, #1
 80003b0:	60da      	str	r2, [r3, #12]
		break;
 80003b2:	e016      	b.n	80003e2 <GPIO_voidSetPinValue+0x7e>
			else if(copy_u8pinValue == GPIO_ODR_LOW)
 80003b4:	797b      	ldrb	r3, [r7, #5]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d113      	bne.n	80003e2 <GPIO_voidSetPinValue+0x7e>
				GPIO_A_REG->GPIOx_ODR = GPIO_ODR_LOW;
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <GPIO_voidSetPinValue+0x90>)
 80003bc:	2200      	movs	r2, #0
 80003be:	60da      	str	r2, [r3, #12]
		break;
 80003c0:	e00f      	b.n	80003e2 <GPIO_voidSetPinValue+0x7e>
			if(copy_u8pinValue == GPIO_ODR_HIGH)
 80003c2:	797b      	ldrb	r3, [r7, #5]
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d103      	bne.n	80003d0 <GPIO_voidSetPinValue+0x6c>
				GPIO_A_REG->GPIOx_ODR = GPIO_ODR_HIGH;
 80003c8:	4b0a      	ldr	r3, [pc, #40]	; (80003f4 <GPIO_voidSetPinValue+0x90>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	60da      	str	r2, [r3, #12]
		break;
 80003ce:	e00a      	b.n	80003e6 <GPIO_voidSetPinValue+0x82>
			else if(copy_u8pinValue == GPIO_ODR_LOW)
 80003d0:	797b      	ldrb	r3, [r7, #5]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d107      	bne.n	80003e6 <GPIO_voidSetPinValue+0x82>
				GPIO_A_REG->GPIOx_ODR = GPIO_ODR_LOW;
 80003d6:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <GPIO_voidSetPinValue+0x90>)
 80003d8:	2200      	movs	r2, #0
 80003da:	60da      	str	r2, [r3, #12]
		break;
 80003dc:	e003      	b.n	80003e6 <GPIO_voidSetPinValue+0x82>
		break;
 80003de:	bf00      	nop
 80003e0:	e002      	b.n	80003e8 <GPIO_voidSetPinValue+0x84>
		break;
 80003e2:	bf00      	nop
 80003e4:	e000      	b.n	80003e8 <GPIO_voidSetPinValue+0x84>
		break;
 80003e6:	bf00      	nop
}
 80003e8:	bf00      	nop
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc80      	pop	{r7}
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	40010800 	.word	0x40010800

080003f8 <RCC_voidInitialization_SYSTYPE>:
 *                              					RCC Function Implementations									   	*
 *******************************************************************************/

// Initializes the RCC Module with the necessary Configurations
void RCC_voidInitialization_SYSTYPE(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
#if	RCC_CLOCKTYPE == RCC_HSI
	RCC_CR_REG->HSION = HSION_STATE;
 80003fc:	4a18      	ldr	r2, [pc, #96]	; (8000460 <RCC_voidInitialization_SYSTYPE+0x68>)
 80003fe:	7813      	ldrb	r3, [r2, #0]
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	7013      	strb	r3, [r2, #0]
	RCC_CR_REG->HSITRIM = 0b10000; 		// Default Value @ 16
 8000406:	4a16      	ldr	r2, [pc, #88]	; (8000460 <RCC_voidInitialization_SYSTYPE+0x68>)
 8000408:	7813      	ldrb	r3, [r2, #0]
 800040a:	2110      	movs	r1, #16
 800040c:	f361 03c7 	bfi	r3, r1, #3, #5
 8000410:	7013      	strb	r3, [r2, #0]
	RCC_CFGR_REG->SW = CFGR_SW_HSI;
 8000412:	4a14      	ldr	r2, [pc, #80]	; (8000464 <RCC_voidInitialization_SYSTYPE+0x6c>)
 8000414:	7813      	ldrb	r3, [r2, #0]
 8000416:	f36f 0301 	bfc	r3, #0, #2
 800041a:	7013      	strb	r3, [r2, #0]
#else
		#error("CLOCK TYPE UNDEFINED!")
#endif

	// Other Initializations
	RCC_CR_REG->CSSON 			=	CSSON_STATE;
 800041c:	4a10      	ldr	r2, [pc, #64]	; (8000460 <RCC_voidInitialization_SYSTYPE+0x68>)
 800041e:	7893      	ldrb	r3, [r2, #2]
 8000420:	f043 0308 	orr.w	r3, r3, #8
 8000424:	7093      	strb	r3, [r2, #2]
	RCC_CFGR_REG->HPRE 			= 	CFGR_HPRE_PRESCALER;
 8000426:	4a0f      	ldr	r2, [pc, #60]	; (8000464 <RCC_voidInitialization_SYSTYPE+0x6c>)
 8000428:	7813      	ldrb	r3, [r2, #0]
 800042a:	210d      	movs	r1, #13
 800042c:	f361 1307 	bfi	r3, r1, #4, #4
 8000430:	7013      	strb	r3, [r2, #0]
	RCC_CFGR_REG->PPRE1 		=	CFGR_PPRE1_PRESCALER;
 8000432:	4a0c      	ldr	r2, [pc, #48]	; (8000464 <RCC_voidInitialization_SYSTYPE+0x6c>)
 8000434:	7853      	ldrb	r3, [r2, #1]
 8000436:	2105      	movs	r1, #5
 8000438:	f361 0302 	bfi	r3, r1, #0, #3
 800043c:	7053      	strb	r3, [r2, #1]
	RCC_CFGR_REG->PPRE2			= 	CFGR_PPRE2_PRESCALER;
 800043e:	4a09      	ldr	r2, [pc, #36]	; (8000464 <RCC_voidInitialization_SYSTYPE+0x6c>)
 8000440:	7853      	ldrb	r3, [r2, #1]
 8000442:	2105      	movs	r1, #5
 8000444:	f361 03c5 	bfi	r3, r1, #3, #3
 8000448:	7053      	strb	r3, [r2, #1]
	RCC_CFGR_REG->MCO			= 	CFGR_MSO_CLK;
 800044a:	4a06      	ldr	r2, [pc, #24]	; (8000464 <RCC_voidInitialization_SYSTYPE+0x6c>)
 800044c:	78d3      	ldrb	r3, [r2, #3]
 800044e:	2105      	movs	r1, #5
 8000450:	f361 0302 	bfi	r3, r1, #0, #3
 8000454:	70d3      	strb	r3, [r2, #3]
}
 8000456:	bf00      	nop
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	40021000 	.word	0x40021000
 8000464:	40021004 	.word	0x40021004

08000468 <RCC_voidPeripheralClockEnable>:

// Chooses the clock type and enables it
void RCC_voidPeripheralClockEnable(u8 copy_u8BusID, u8 copy_u8PeripheralID)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	460a      	mov	r2, r1
 8000472:	71fb      	strb	r3, [r7, #7]
 8000474:	4613      	mov	r3, r2
 8000476:	71bb      	strb	r3, [r7, #6]
	if (copy_u8PeripheralID <= 31)
 8000478:	79bb      	ldrb	r3, [r7, #6]
 800047a:	2b1f      	cmp	r3, #31
 800047c:	d82a      	bhi.n	80004d4 <RCC_voidPeripheralClockEnable+0x6c>
	{
		switch (copy_u8BusID)
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	2b02      	cmp	r3, #2
 8000482:	d01c      	beq.n	80004be <RCC_voidPeripheralClockEnable+0x56>
 8000484:	2b02      	cmp	r3, #2
 8000486:	dc25      	bgt.n	80004d4 <RCC_voidPeripheralClockEnable+0x6c>
 8000488:	2b00      	cmp	r3, #0
 800048a:	d002      	beq.n	8000492 <RCC_voidPeripheralClockEnable+0x2a>
 800048c:	2b01      	cmp	r3, #1
 800048e:	d00b      	beq.n	80004a8 <RCC_voidPeripheralClockEnable+0x40>
	}
	else
	{

	}
}
 8000490:	e020      	b.n	80004d4 <RCC_voidPeripheralClockEnable+0x6c>
				SET_BIT(RCC_AHBENR_REG  ,copy_u8PeripheralID);
 8000492:	4b13      	ldr	r3, [pc, #76]	; (80004e0 <RCC_voidPeripheralClockEnable+0x78>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	79ba      	ldrb	r2, [r7, #6]
 8000498:	2101      	movs	r1, #1
 800049a:	fa01 f202 	lsl.w	r2, r1, r2
 800049e:	4611      	mov	r1, r2
 80004a0:	4a0f      	ldr	r2, [pc, #60]	; (80004e0 <RCC_voidPeripheralClockEnable+0x78>)
 80004a2:	430b      	orrs	r3, r1
 80004a4:	6013      	str	r3, [r2, #0]
				break;
 80004a6:	e015      	b.n	80004d4 <RCC_voidPeripheralClockEnable+0x6c>
				SET_BIT(RCC_APB1ENR_REG ,copy_u8PeripheralID);
 80004a8:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <RCC_voidPeripheralClockEnable+0x7c>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	79ba      	ldrb	r2, [r7, #6]
 80004ae:	2101      	movs	r1, #1
 80004b0:	fa01 f202 	lsl.w	r2, r1, r2
 80004b4:	4611      	mov	r1, r2
 80004b6:	4a0b      	ldr	r2, [pc, #44]	; (80004e4 <RCC_voidPeripheralClockEnable+0x7c>)
 80004b8:	430b      	orrs	r3, r1
 80004ba:	6013      	str	r3, [r2, #0]
				break;
 80004bc:	e00a      	b.n	80004d4 <RCC_voidPeripheralClockEnable+0x6c>
				SET_BIT(RCC_APB2ENR_REG ,copy_u8PeripheralID);
 80004be:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <RCC_voidPeripheralClockEnable+0x80>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	79ba      	ldrb	r2, [r7, #6]
 80004c4:	2101      	movs	r1, #1
 80004c6:	fa01 f202 	lsl.w	r2, r1, r2
 80004ca:	4611      	mov	r1, r2
 80004cc:	4a06      	ldr	r2, [pc, #24]	; (80004e8 <RCC_voidPeripheralClockEnable+0x80>)
 80004ce:	430b      	orrs	r3, r1
 80004d0:	6013      	str	r3, [r2, #0]
				break;
 80004d2:	bf00      	nop
}
 80004d4:	bf00      	nop
 80004d6:	370c      	adds	r7, #12
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	40021014 	.word	0x40021014
 80004e4:	4002101c 	.word	0x4002101c
 80004e8:	40021018 	.word	0x40021018

080004ec <SYSTICK_voidInitialization>:

volatile u32 STK_delayComplete = 0;

// Initializes the RCC Module with the necessary Configurations
void SYSTICK_voidInitialization(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
	// CHOOSING THE CLK SOURCE FOR THE SYSTICK
	SET_BIT(STK_CTRL_REG, STK_CTRL_CLKSOURCE);
 80004f0:	4b09      	ldr	r3, [pc, #36]	; (8000518 <SYSTICK_voidInitialization+0x2c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a08      	ldr	r2, [pc, #32]	; (8000518 <SYSTICK_voidInitialization+0x2c>)
 80004f6:	f043 0304 	orr.w	r3, r3, #4
 80004fa:	6013      	str	r3, [r2, #0]

#if (SYSTICK_ISR_ENABLE)
	SET_BIT(STK_CTRL_REG, STK_CTRL_TICKINT);
 80004fc:	4b06      	ldr	r3, [pc, #24]	; (8000518 <SYSTICK_voidInitialization+0x2c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a05      	ldr	r2, [pc, #20]	; (8000518 <SYSTICK_voidInitialization+0x2c>)
 8000502:	f043 0302 	orr.w	r3, r3, #2
 8000506:	6013      	str	r3, [r2, #0]
#endif
	STK_delayComplete = 0;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <SYSTICK_voidInitialization+0x30>)
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
}
 800050e:	bf00      	nop
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	e000e010 	.word	0xe000e010
 800051c:	20000020 	.word	0x20000020

08000520 <SYSTICK_voidSetDelay_ms_ISR>:
}


// Chooses the clock type and enables it
void SYSTICK_voidSetDelay_ms_ISR(u32 copy_u32Delay, void(*Copy_voidPTF)(void))
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	6039      	str	r1, [r7, #0]
	if(Copy_voidPTF != NULL_PTR)
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d017      	beq.n	8000560 <SYSTICK_voidSetDelay_ms_ISR+0x40>
	{
		u32 ClockTicks = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	60fb      	str	r3, [r7, #12]

		// Calculate the number of ticks for the given delay
		ClockTicks = copy_u32Delay * SYSTICK_TICKS;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800053a:	fb02 f303 	mul.w	r3, r2, r3
 800053e:	60fb      	str	r3, [r7, #12]

		// Load the number of ticks into the SysTick LOAD register
		STK_LOAD_REG = ClockTicks - 1;
 8000540:	4a0a      	ldr	r2, [pc, #40]	; (800056c <SYSTICK_voidSetDelay_ms_ISR+0x4c>)
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	3b01      	subs	r3, #1
 8000546:	6013      	str	r3, [r2, #0]

		// Clear the SysTick current value
		STK_VAL_REG = 0;
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <SYSTICK_voidSetDelay_ms_ISR+0x50>)
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]

		CallBackPtr_SYSTICK = Copy_voidPTF;
 800054e:	4a09      	ldr	r2, [pc, #36]	; (8000574 <SYSTICK_voidSetDelay_ms_ISR+0x54>)
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	6013      	str	r3, [r2, #0]
		//SYSTICK_CallBackFunction_msDelay(Copy_voidPTF);
		SET_BIT(STK_CTRL_REG, STK_CTRL_ENABLE);
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <SYSTICK_voidSetDelay_ms_ISR+0x58>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a07      	ldr	r2, [pc, #28]	; (8000578 <SYSTICK_voidSetDelay_ms_ISR+0x58>)
 800055a:	f043 0301 	orr.w	r3, r3, #1
 800055e:	6013      	str	r3, [r2, #0]
	}
	else
	{
		// Return Error
	}
}
 8000560:	bf00      	nop
 8000562:	3714      	adds	r7, #20
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	e000e014 	.word	0xe000e014
 8000570:	e000e018 	.word	0xe000e018
 8000574:	2000001c 	.word	0x2000001c
 8000578:	e000e010 	.word	0xe000e010

0800057c <SysTick_Handler>:


// the Systick ISR function
// Should be written like this
void SysTick_Handler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	if(CallBackPtr_SYSTICK != NULL)
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <SysTick_Handler+0x1c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d002      	beq.n	800058e <SysTick_Handler+0x12>
	{
		CallBackPtr_SYSTICK();
 8000588:	4b03      	ldr	r3, [pc, #12]	; (8000598 <SysTick_Handler+0x1c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4798      	blx	r3
	}

	//Clear the flag by Reading it
	GET_BIT(STK_CTRL_REG, STK_CTRL_COUNTFLAG);
 800058e:	4b03      	ldr	r3, [pc, #12]	; (800059c <SysTick_Handler+0x20>)
 8000590:	681b      	ldr	r3, [r3, #0]

}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	2000001c 	.word	0x2000001c
 800059c:	e000e010 	.word	0xe000e010

080005a0 <FuncISR>:
#include "../Inc/RCC_INTERFACE.h"
#include "../Inc/SYSTICK_INTERFACE.h"
#include "../Inc/GPIO_INTERFACE.h"

void FuncISR(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	static u8 counter = 0;
	counter++;
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <FuncISR+0x40>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	3301      	adds	r3, #1
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <FuncISR+0x40>)
 80005ae:	701a      	strb	r2, [r3, #0]
	if(counter == 1)
 80005b0:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <FuncISR+0x40>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d105      	bne.n	80005c4 <FuncISR+0x24>
	{
		GPIO_voidSetPinValue(PIN_0, PORT_A, GPIO_ODR_HIGH);
 80005b8:	2201      	movs	r2, #1
 80005ba:	2100      	movs	r1, #0
 80005bc:	2000      	movs	r0, #0
 80005be:	f7ff fed1 	bl	8000364 <GPIO_voidSetPinValue>
	else if(counter == 2)
	{
		GPIO_voidSetPinValue(PIN_0, PORT_A, GPIO_ODR_LOW);
		counter = 0;
	}
}
 80005c2:	e00b      	b.n	80005dc <FuncISR+0x3c>
	else if(counter == 2)
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <FuncISR+0x40>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b02      	cmp	r3, #2
 80005ca:	d107      	bne.n	80005dc <FuncISR+0x3c>
		GPIO_voidSetPinValue(PIN_0, PORT_A, GPIO_ODR_LOW);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2100      	movs	r1, #0
 80005d0:	2000      	movs	r0, #0
 80005d2:	f7ff fec7 	bl	8000364 <GPIO_voidSetPinValue>
		counter = 0;
 80005d6:	4b02      	ldr	r3, [pc, #8]	; (80005e0 <FuncISR+0x40>)
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000024 	.word	0x20000024

080005e4 <main>:
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	RCC_voidInitialization_SYSTYPE();
 80005e8:	f7ff ff06 	bl	80003f8 <RCC_voidInitialization_SYSTYPE>
	RCC_voidPeripheralClockEnable(2,2);
 80005ec:	2102      	movs	r1, #2
 80005ee:	2002      	movs	r0, #2
 80005f0:	f7ff ff3a 	bl	8000468 <RCC_voidPeripheralClockEnable>
	GPIO_voidSetPinDirection(PIN_0, PORT_A, OUTSPEED_10MHZ_PUSHPULL);
 80005f4:	2201      	movs	r2, #1
 80005f6:	2100      	movs	r1, #0
 80005f8:	2000      	movs	r0, #0
 80005fa:	f7ff fde3 	bl	80001c4 <GPIO_voidSetPinDirection>
	SYSTICK_voidInitialization();
 80005fe:	f7ff ff75 	bl	80004ec <SYSTICK_voidInitialization>
	while(1)
	{
		SYSTICK_voidSetDelay_ms_ISR(1500, FuncISR);
 8000602:	4903      	ldr	r1, [pc, #12]	; (8000610 <main+0x2c>)
 8000604:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000608:	f7ff ff8a 	bl	8000520 <SYSTICK_voidSetDelay_ms_ISR>
 800060c:	e7f9      	b.n	8000602 <main+0x1e>
 800060e:	bf00      	nop
 8000610:	080005a1 	.word	0x080005a1

08000614 <__libc_init_array>:
 8000614:	b570      	push	{r4, r5, r6, lr}
 8000616:	2600      	movs	r6, #0
 8000618:	4d0c      	ldr	r5, [pc, #48]	; (800064c <__libc_init_array+0x38>)
 800061a:	4c0d      	ldr	r4, [pc, #52]	; (8000650 <__libc_init_array+0x3c>)
 800061c:	1b64      	subs	r4, r4, r5
 800061e:	10a4      	asrs	r4, r4, #2
 8000620:	42a6      	cmp	r6, r4
 8000622:	d109      	bne.n	8000638 <__libc_init_array+0x24>
 8000624:	f000 f81a 	bl	800065c <_init>
 8000628:	2600      	movs	r6, #0
 800062a:	4d0a      	ldr	r5, [pc, #40]	; (8000654 <__libc_init_array+0x40>)
 800062c:	4c0a      	ldr	r4, [pc, #40]	; (8000658 <__libc_init_array+0x44>)
 800062e:	1b64      	subs	r4, r4, r5
 8000630:	10a4      	asrs	r4, r4, #2
 8000632:	42a6      	cmp	r6, r4
 8000634:	d105      	bne.n	8000642 <__libc_init_array+0x2e>
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f855 3b04 	ldr.w	r3, [r5], #4
 800063c:	4798      	blx	r3
 800063e:	3601      	adds	r6, #1
 8000640:	e7ee      	b.n	8000620 <__libc_init_array+0xc>
 8000642:	f855 3b04 	ldr.w	r3, [r5], #4
 8000646:	4798      	blx	r3
 8000648:	3601      	adds	r6, #1
 800064a:	e7f2      	b.n	8000632 <__libc_init_array+0x1e>
 800064c:	08000674 	.word	0x08000674
 8000650:	08000674 	.word	0x08000674
 8000654:	08000674 	.word	0x08000674
 8000658:	08000678 	.word	0x08000678

0800065c <_init>:
 800065c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800065e:	bf00      	nop
 8000660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000662:	bc08      	pop	{r3}
 8000664:	469e      	mov	lr, r3
 8000666:	4770      	bx	lr

08000668 <_fini>:
 8000668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066a:	bf00      	nop
 800066c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800066e:	bc08      	pop	{r3}
 8000670:	469e      	mov	lr, r3
 8000672:	4770      	bx	lr
